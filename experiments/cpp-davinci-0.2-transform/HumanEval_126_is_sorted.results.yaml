language: cpp
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s(lst.begin(), lst.end());\n\
    \    if (s.size() != lst.size()) {\n        return false;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9parmdot.cpp: In function 'int main()':\n/tmp/tmp9parmdot.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9parmdot.cpp:2:\n/tmp/tmp9parmdot.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp9parmdot.cpp:38:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp9parmdot.cpp:38:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9parmdot.cpp:38:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp9parmdot.cpp:39:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp9parmdot.cpp:39:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp9parmdot.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9parmdot.cpp:39:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9parmd"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n-1; i++){\n        if(lst[i] >= lst[i+1]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpch_175la.cpp: In function 'int main()':\n/tmp/tmpch_175la.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpch_175la.cpp:2:\n/tmp/tmpch_175la.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpch_175la.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpch_175la.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpch_175la.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpch_175la.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpch_175la.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpch_175"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(int i=0;i<lst.size();i++){\n\
    \        s.insert(lst[i]);\n    }\n    if(s.size()==lst.size()){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n   \
    \ auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvu8bd18o.cpp: In function 'int main()':\n/tmp/tmpvu8bd18o.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvu8bd18o.cpp:2:\n/tmp/tmpvu8bd18o.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpvu8bd18o.cpp:38:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpvu8bd18o.cpp:38:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvu8bd18o.cpp:38:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpvu8bd18o.cpp:39:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpvu8bd18o.cpp:39:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpvu8bd18o.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvu8bd18o.cpp:39:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvu8bd1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22x7lq4x.cpp: In function 'int main()':\n/tmp/tmp22x7lq4x.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp22x7lq4x.cpp:2:\n/tmp/tmp22x7lq4x.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp22x7lq4x.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp22x7lq4x.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp22x7lq4x.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp22x7lq4x.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp22x7lq4x.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp22x7lq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        s.insert(lst[i]);\n    }\n    if (s.size() != lst.size()) {\n       \
    \ return false;\n    }\n    for (long i = 0; i < lst.size() - 1; i++) {\n    \
    \    if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzoi5_hmr.cpp: In function 'int main()':\n/tmp/tmpzoi5_hmr.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzoi5_hmr.cpp:2:\n/tmp/tmpzoi5_hmr.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpzoi5_hmr.cpp:40:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpzoi5_hmr.cpp:40:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzoi5_hmr.cpp:40:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpzoi5_hmr.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpzoi5_hmr.cpp:41:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpzoi5_hmr.cpp:41:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzoi5_hmr.cpp:41:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzoi5_h"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>=lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iqwlf6y.cpp: In function 'int main()':\n/tmp/tmp2iqwlf6y.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iqwlf6y.cpp:2:\n/tmp/tmp2iqwlf6y.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp2iqwlf6y.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp2iqwlf6y.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp2iqwlf6y.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp2iqwlf6y.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp2iqwlf6y.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2iqwlf"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] == lst[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxg_l05r5.cpp: In function 'int main()':\n/tmp/tmpxg_l05r5.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxg_l05r5.cpp:2:\n/tmp/tmpxg_l05r5.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpxg_l05r5.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpxg_l05r5.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxg_l05r5.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpxg_l05r5.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpxg_l05r5.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpxg_l05r5.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxg_l05r5.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxg_l05"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (std::is_sorted(lst.begin(), lst.end()))\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptgern5v2.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmptgern5v2.cpp:28:9: error: 'is_sorted' is not a member of 'std'\n     if\
    \ (std::is_sorted(lst.begin(), lst.end()))\n         ^\n/tmp/tmptgern5v2.cpp:28:9:\
    \ note: suggested alternative:\n/tmp/tmptgern5v2.cpp:23:6: note:   'is_sorted'\n\
    \ bool is_sorted(std::vector<long> lst) {\n      ^\n/tmp/tmptgern5v2.cpp: In function\
    \ 'int main()':\n/tmp/tmptgern5v2.cpp:34:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = is_sorted;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptgern5v2.cpp:2:\n/tmp/tmptgern5v2.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmptgern5v2.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmptgern5v2.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptgern5v2.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmptgern5v2.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmptgern5v2.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1)\n  \
    \      return true;\n    else {\n        for (int i = 0; i < lst.size() - 1; i++)\
    \ {\n            if (lst[i] > lst[i + 1])\n                return false;\n   \
    \     }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprhgrtnyo.cpp: In function 'int main()':\n/tmp/tmprhgrtnyo.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprhgrtnyo.cpp:2:\n/tmp/tmprhgrtnyo.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprhgrtnyo.cpp:41:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprhgrtnyo.cpp:41:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprhgrtnyo.cpp:41:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprhgrtnyo.cpp:42:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprhgrtnyo.cpp:42:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprhgrtnyo.cpp:42:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprhgrtnyo.cpp:42:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprhgrtn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp32xsn9hq.cpp: In function 'int main()':\n/tmp/tmp32xsn9hq.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp32xsn9hq.cpp:2:\n/tmp/tmp32xsn9hq.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp32xsn9hq.cpp:29:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp32xsn9hq.cpp:29:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp32xsn9hq.cpp:29:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp32xsn9hq.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp32xsn9hq.cpp:30:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp32xsn9hq.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp32xsn9hq.cpp:30:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp32xsn9"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    long prev = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++){\n        if(lst[i] < prev) return false;\n        prev =\
    \ lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmd3w7h3x.cpp: In function 'int main()':\n/tmp/tmpmd3w7h3x.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmd3w7h3x.cpp:2:\n/tmp/tmpmd3w7h3x.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpmd3w7h3x.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpmd3w7h3x.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmd3w7h3x.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpmd3w7h3x.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpmd3w7h3x.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpmd3w7h3x.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmd3w7h3x.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpmd3w7h"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>=lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iqwlf6y.cpp: In function 'int main()':\n/tmp/tmp2iqwlf6y.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iqwlf6y.cpp:2:\n/tmp/tmp2iqwlf6y.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp2iqwlf6y.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp2iqwlf6y.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp2iqwlf6y.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp2iqwlf6y.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp2iqwlf6y.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2iqwlf"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (auto i : lst) {\n        s.insert(i);\n\
    \    }\n    if (s.size() != lst.size()) {\n        return false;\n    }\n    for\
    \ (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s(lst.begin(), lst.end());\n    return s.size() ==\
    \ lst.size();\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdvyjd4q2: /tmp/tmpdvyjd4q2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        s.insert(lst[i]);\n    }\n    if (s.size() != lst.size()) {\n       \
    \ return false;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n     \
    \   if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    std::vector<long>::iterator\
    \ it = lst.begin();\n    long prev = *it;\n    it++;\n    while (it != lst.end())\
    \ {\n        if (*it < prev) {\n            return false;\n        }\n       \
    \ prev = *it;\n        it++;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n  // Your code here\n  std::set<long> s;\n  for(auto i:lst){\n    s.insert(i);\n\
    \  }\n  if(s.size()!=lst.size()){\n    return false;\n  }\n  for(int i=0;i<lst.size()-1;i++){\n\
    \    if(lst[i]>lst[i+1]){\n      return false;\n    }\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    for(; it != lst.end(); it++)\
    \ {\n        if(*it < prev) {\n            return false;\n        }\n        prev\
    \ = *it;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n-1; i++){\n        if(lst[i] >= lst[i+1]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpch_175la.cpp: In function 'int main()':\n/tmp/tmpch_175la.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpch_175la.cpp:2:\n/tmp/tmpch_175la.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpch_175la.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpch_175la.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpch_175la.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpch_175la.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpch_175la.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpch_175"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1) return\
    \ true;\n    for(int i = 0; i < n - 1; i++){\n        if(lst[i] > lst[i + 1])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi9oy366t: /tmp/tmpi9oy366t.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()==lst.size()){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpanxxa15u: /tmp/tmpanxxa15u.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i : lst){\n\
    \        s.insert(i);\n    }\n    if(s.size() != lst.size()){\n        return\
    \ false;\n    }\n    for(int i = 0; i < lst.size()-1; i++){\n        if(lst[i]\
    \ > lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        s.insert(lst[i]);\n    }\n    if (s.size() != lst.size()) {\n       \
    \ return false;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n     \
    \   if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    for(; it != lst.end(); it++)\
    \ {\n        if(prev > *it) {\n            return false;\n        }\n        prev\
    \ = *it;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it = lst.begin();\n\
    \    std::vector<long>::iterator it2 = lst.begin();\n    it2++;\n    while(it2\
    \ != lst.end()){\n        if(*it > *it2){\n            return false;\n       \
    \ }\n        it++;\n        it2++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1){\n        return true;\n\
    \    }\n    for(int i = 0; i < lst.size()-1; i++){\n        if(lst[i] >= lst[i+1]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    std::set<long>\
    \ s;\n    for (long i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i\
    \ + 1]) {\n            return false;\n        }\n        s.insert(lst[i]);\n \
    \   }\n    s.insert(lst[lst.size() - 1]);\n    if (s.size() != lst.size()) {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i : lst){\n\
    \        s.insert(i);\n    }\n    if(s.size() != lst.size()){\n        return\
    \ false;\n    }\n    for(int i = 0; i < lst.size()-1; i++){\n        if(lst[i]\
    \ > lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>=lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iqwlf6y.cpp: In function 'int main()':\n/tmp/tmp2iqwlf6y.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iqwlf6y.cpp:2:\n/tmp/tmp2iqwlf6y.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp2iqwlf6y.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp2iqwlf6y.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp2iqwlf6y.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp2iqwlf6y.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp2iqwlf6y.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2iqwlf"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator\
    \ it2;\n    it = lst.begin();\n    it2 = lst.begin();\n    it2++;\n    for(; it2\
    \ != lst.end(); it++, it2++){\n        if(*it > *it2){\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator\
    \ it2;\n    for(it = lst.begin(); it != lst.end(); it++){\n        for(it2 = it+1;\
    \ it2 != lst.end(); it2++){\n            if(*it > *it2){\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp672n6vv2: /tmp/tmp672n6vv2.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()!=lst.size()){\n        return false;\n\
    \    }\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator\
    \ it2;\n    for(it = lst.begin(); it != lst.end(); it++){\n        for(it2 = it+1;\
    \ it2 != lst.end(); it2++){\n            if(*it > *it2){\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp672n6vv2: /tmp/tmp672n6vv2.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    for(; it != lst.end(); it++)\
    \ {\n        if(*it < prev) {\n            return false;\n        }\n        prev\
    \ = *it;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >\
    \ lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    for(; it != lst.end(); it++)\
    \ {\n        if(*it < prev) {\n            return false;\n        }\n        prev\
    \ = *it;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    int last = *it;\n    it++;\n    for(it; it != lst.end(); it++){\n\
    \        if(last > *it){\n            return false;\n        }\n        last =\
    \ *it;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (auto i : lst) {\n        s.insert(i);\n\
    \    }\n    return s.size() == lst.size();\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpts4tcbgl: /tmp/tmpts4tcbgl.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it = lst.begin();\n    long prev = *it;\n\
    \    it++;\n    while (it != lst.end()) {\n        if (*it < prev) {\n       \
    \     return false;\n        }\n        prev = *it;\n        it++;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it;\n    it = std::unique(lst.begin(),\
    \ lst.end());\n    lst.resize(std::distance(lst.begin(), it));\n    for (int i\
    \ = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s(lst.begin(), lst.end());\n    if (s.size() < lst.size())\
    \ {\n        return false;\n    }\n    for (int i = 0; i < lst.size() - 1; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s(lst.begin(), lst.end());\n    if (s.size() != lst.size())\
    \ {\n        return false;\n    }\n    for (int i = 0; i < lst.size() - 1; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(int i=0;i<lst.size();i++){\n\
    \        s.insert(lst[i]);\n    }\n    if(s.size()==lst.size()){\n        for(int\
    \ i=0;i<lst.size()-1;i++){\n            if(lst[i]>lst[i+1]){\n               \
    \ return false;\n            }\n        }\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    std::sort(lst.begin(), lst.end());\n    if (lst == lst) {\n     \
    \   return true;\n    }\n    else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzsf9iiu1: /tmp/tmpzsf9iiu1.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()!=lst.size()){\n        return false;\n\
    \    }\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    long size = lst.size();\n    if (size ==\
    \ 1)\n        return true;\n    for (long i = 0; i < size - 1; i++) {\n      \
    \  if (lst[i] >= lst[i + 1])\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppg9d1v9s: /tmp/tmppg9d1v9s.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto x: lst)\n\
    \        s.insert(x);\n    if(s.size()!=lst.size())\n        return false;\n \
    \   for(int i=0;i<lst.size()-1;i++)\n        if(lst[i]>lst[i+1])\n           \
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn7qbohh2: /tmp/tmpn7qbohh2.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    int prev = *it;\n    it++;\n    for(; it != lst.end(); it++)\
    \ {\n        if(*it < prev) {\n            return false;\n        }\n        prev\
    \ = *it;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // YOUR CODE HERE\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    int prev = *it;\n    it++;\n    for(; it != lst.end(); it++)\
    \ {\n        if(*it < prev) {\n            return false;\n        }\n        prev\
    \ = *it;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn7qbohh2: /tmp/tmpn7qbohh2.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    for(it\
    \ = lst.begin(); it != lst.end(); it++)\n    {\n        if(it != lst.end()-1)\n\
    \        {\n            if(*it > *(it+1))\n            {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1nsushzp: /tmp/tmp1nsushzp.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7msavb5g: /tmp/tmp7msavb5g.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    long prev = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++){\n        if(lst[i] < prev) return false;\n        prev =\
    \ lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it = lst.begin();\n\
    \    std::vector<long>::iterator it2 = lst.begin();\n    it2++;\n    while(it2\
    \ != lst.end()){\n        if(*it > *it2){\n            return false;\n       \
    \ }\n        it++;\n        it2++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    std::vector<long>::iterator\
    \ it = lst.begin();\n    long prev = *it;\n    it++;\n    while (it != lst.end())\
    \ {\n        if (*it < prev) {\n            return false;\n        }\n       \
    \ prev = *it;\n        it++;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()==lst.size()){\n        for(int i=0;i<lst.size()-1;i++){\n\
    \            if(lst[i]>lst[i+1]){\n                return false;\n           \
    \ }\n        }\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        s.insert(lst[i]);\n    }\n    if (s.size() == lst.size()) {\n       \
    \ for (long i = 0; i < lst.size() - 1; i++) {\n            if (lst[i] > lst[i\
    \ + 1]) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] == lst[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxg_l05r5.cpp: In function 'int main()':\n/tmp/tmpxg_l05r5.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxg_l05r5.cpp:2:\n/tmp/tmpxg_l05r5.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpxg_l05r5.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpxg_l05r5.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxg_l05r5.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpxg_l05r5.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpxg_l05r5.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpxg_l05r5.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxg_l05r5.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxg_l05"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22x7lq4x.cpp: In function 'int main()':\n/tmp/tmp22x7lq4x.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp22x7lq4x.cpp:2:\n/tmp/tmp22x7lq4x.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp22x7lq4x.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp22x7lq4x.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp22x7lq4x.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp22x7lq4x.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp22x7lq4x.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp22x7lq"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n  // your code here\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9wb9t0qr: /tmp/tmp9wb9t0qr.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn7qbohh2: /tmp/tmpn7qbohh2.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it = lst.begin();\n\
    \    if(lst.size() == 1){\n        return true;\n    }\n    for(it = lst.begin();\
    \ it != lst.end()-1; it++){\n        if(*it > *(it+1)){\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()==lst.size()){\n        for(int i=0;i<lst.size()-1;i++){\n\
    \            if(lst[i]>lst[i+1]){\n                return false;\n           \
    \ }\n        }\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::sort(lst.begin(), lst.end());\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] == lst[i+1]){\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg8bfh_0_: /tmp/tmpg8bfh_0_.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s(lst.begin(), lst.end());\n\
    \    if (s.size() != lst.size()) {\n        return false;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9parmdot.cpp: In function 'int main()':\n/tmp/tmp9parmdot.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9parmdot.cpp:2:\n/tmp/tmp9parmdot.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp9parmdot.cpp:38:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp9parmdot.cpp:38:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9parmdot.cpp:38:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp9parmdot.cpp:39:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp9parmdot.cpp:39:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp9parmdot.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9parmdot.cpp:39:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9parmd"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >=\
    \ lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()!=lst.size()){\n        return false;\n\
    \    }\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::sort(lst.begin(), lst.end());\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] == lst[i+1]){\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpreetl3wi: /tmp/tmpreetl3wi.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    for(; it != lst.end(); it++)\
    \ {\n        if(*it < prev)\n            return false;\n        prev = *it;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        s.insert(lst[i]);\n    }\n    if (s.size() != lst.size()) {\n       \
    \ return false;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n     \
    \   if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator\
    \ it2;\n    it = lst.begin();\n    it2 = lst.begin();\n    it2++;\n    while(it2\
    \ != lst.end()){\n        if(*it > *it2){\n            return false;\n       \
    \ }\n        it++;\n        it2++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s(lst.begin(), lst.end());\n    if (s.size() != lst.size())\
    \ {\n        return false;\n    }\n    for (int i = 0; i < lst.size() - 1; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    std::sort(lst.begin(), lst.end());\n    if (lst == lst) {\n     \
    \   return true;\n    }\n    else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzsf9iiu1: /tmp/tmpzsf9iiu1.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (std::is_sorted(lst.begin(), lst.end()))\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp20pqn98n: /tmp/tmp20pqn98n.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()!=lst.size()){\n        return false;\n\
    \    }\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(int i=0;i<lst.size();i++){\n\
    \        s.insert(lst[i]);\n    }\n    if(s.size()!=lst.size()){\n        return\
    \ false;\n    }\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n == 1) return\
    \ true;\n    for(int i = 0; i < n - 1; i++){\n        if(lst[i] > lst[i + 1])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_6_tv90w: /tmp/tmp_6_tv90w.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()!=lst.size()){\n        return false;\n\
    \    }\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it;\n    it = std::unique(lst.begin(),\
    \ lst.end());\n    lst.resize(std::distance(lst.begin(), it));\n    std::sort(lst.begin(),\
    \ lst.end());\n    return lst == lst;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpivfddpjb: /tmp/tmpivfddpjb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it;\n    for(it = lst.begin(); it !=\
    \ lst.end(); it++) {\n        if(it != lst.begin()) {\n            if(*it < *(it-1))\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbn73evhc: /tmp/tmpbn73evhc.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(long i=0;i<lst.size();i++){\n\
    \        s.insert(lst[i]);\n    }\n    if(s.size()!=lst.size()){\n        return\
    \ false;\n    }\n    for(long i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn7qbohh2: /tmp/tmpn7qbohh2.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn7qbohh2: /tmp/tmpn7qbohh2.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    std::sort(lst.begin(), lst.end());\n    if (lst == lst) {\n     \
    \   return true;\n    }\n    else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzsf9iiu1: /tmp/tmpzsf9iiu1.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    for(; it != lst.end(); it++)\
    \ {\n        if(*it < prev) {\n            return false;\n        }\n        prev\
    \ = *it;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22x7lq4x.cpp: In function 'int main()':\n/tmp/tmp22x7lq4x.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp22x7lq4x.cpp:2:\n/tmp/tmp22x7lq4x.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp22x7lq4x.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp22x7lq4x.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp22x7lq4x.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp22x7lq4x.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp22x7lq4x.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp22x7lq"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplu1br9t3: /tmp/tmplu1br9t3.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n - 1; i++){\n        if(lst[i] >=\
    \ lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsa_s7zu5: /tmp/tmpsa_s7zu5.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn7qbohh2: /tmp/tmpn7qbohh2.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it;\n    for(it = lst.begin(); it !=\
    \ lst.end(); it++) {\n        if(it != lst.begin()) {\n            if(*it < *(it-1))\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbn73evhc: /tmp/tmpbn73evhc.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int len = lst.size();\n    if(len == 1)\n\
    \        return true;\n    for(int i = 0; i < len - 1; i++){\n        if(lst[i]\
    \ >= lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd74rfv3k: /tmp/tmpd74rfv3k.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>=lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iqwlf6y.cpp: In function 'int main()':\n/tmp/tmp2iqwlf6y.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iqwlf6y.cpp:2:\n/tmp/tmp2iqwlf6y.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp2iqwlf6y.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp2iqwlf6y.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp2iqwlf6y.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp2iqwlf6y.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp2iqwlf6y.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2iqwlf"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (auto i : lst) {\n        s.insert(i);\n\
    \    }\n    if (s.size() != lst.size()) {\n        return false;\n    }\n    for\
    \ (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22x7lq4x.cpp: In function 'int main()':\n/tmp/tmp22x7lq4x.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp22x7lq4x.cpp:2:\n/tmp/tmp22x7lq4x.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp22x7lq4x.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp22x7lq4x.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp22x7lq4x.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp22x7lq4x.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp22x7lq4x.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp22x7lq"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn7qbohh2: /tmp/tmpn7qbohh2.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    for(it\
    \ = lst.begin(); it != lst.end(); it++)\n    {\n        if(*it > *(it+1))\n  \
    \      {\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpia75ovcz: /tmp/tmpia75ovcz.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n  // your code here\n  std::vector<long>::iterator it;\n  for(it = lst.begin();\
    \ it != lst.end(); it++){\n    if(*it > *(it+1)){\n      return false;\n    }\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjwxj0l3e: /tmp/tmpjwxj0l3e.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() < 2) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg5ak0uir: /tmp/tmpg5ak0uir.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    std::sort(lst.begin(), lst.end());\n    if (lst == lst)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy5pu48jv: /tmp/tmpy5pu48jv.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749423
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn7qbohh2: /tmp/tmpn7qbohh2.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (auto i : lst) {\n        s.insert(i);\n\
    \    }\n    if (s.size() != lst.size()) {\n        return false;\n    }\n    for\
    \ (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>=lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iqwlf6y.cpp: In function 'int main()':\n/tmp/tmp2iqwlf6y.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iqwlf6y.cpp:2:\n/tmp/tmp2iqwlf6y.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp2iqwlf6y.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp2iqwlf6y.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp2iqwlf6y.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp2iqwlf6y.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp2iqwlf6y.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2iqwlf"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>=lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iqwlf6y.cpp: In function 'int main()':\n/tmp/tmp2iqwlf6y.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iqwlf6y.cpp:2:\n/tmp/tmp2iqwlf6y.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp2iqwlf6y.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp2iqwlf6y.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp2iqwlf6y.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp2iqwlf6y.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp2iqwlf6y.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2iqwlf"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22x7lq4x.cpp: In function 'int main()':\n/tmp/tmp22x7lq4x.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp22x7lq4x.cpp:2:\n/tmp/tmp22x7lq4x.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp22x7lq4x.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp22x7lq4x.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp22x7lq4x.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp22x7lq4x.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp22x7lq4x.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp22x7lq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n-1; i++){\n        if(lst[i] >= lst[i+1]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpch_175la.cpp: In function 'int main()':\n/tmp/tmpch_175la.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpch_175la.cpp:2:\n/tmp/tmpch_175la.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpch_175la.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpch_175la.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpch_175la.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpch_175la.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpch_175la.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpch_175"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    long prev\
    \ = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] <\
    \ prev) {\n            return false;\n        }\n        prev = lst[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()!=lst.size()){\n        return false;\n\
    \    }\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >\
    \ lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n-1; i++){\n        if(lst[i] >= lst[i+1]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpygcwogq4: /tmp/tmpygcwogq4.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it = lst.begin();\n    std::vector<long>::iterator\
    \ it2 = lst.begin();\n    it2++;\n    while (it2 != lst.end()) {\n        if (*it\
    \ > *it2) {\n            return false;\n        }\n        it++;\n        it2++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it;\n    it = std::unique(lst.begin(),\
    \ lst.end());\n    lst.resize(std::distance(lst.begin(), it));\n    if (lst.size()\
    \ == 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n\
    \        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(int i=0;i<lst.size();i++){\n\
    \        s.insert(lst[i]);\n    }\n    if(s.size()==lst.size()){\n        for(int\
    \ i=0;i<lst.size()-1;i++){\n            if(lst[i]>lst[i+1]){\n               \
    \ return false;\n            }\n        }\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >\
    \ lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::sort(lst.begin(), lst.end());\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] == lst[i+1]){\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg8bfh_0_: /tmp/tmpg8bfh_0_.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n == 1) return\
    \ true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] > lst[i+1]) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpt5_anvyc: /tmp/tmpt5_anvyc.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it;\n    it = std::unique(lst.begin(),\
    \ lst.end());\n    lst.resize(std::distance(lst.begin(), it));\n    std::sort(lst.begin(),\
    \ lst.end());\n    if (lst == lst) {\n        return true;\n    }\n    else {\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3e4rst1t: /tmp/tmp3e4rst1t.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplu1br9t3: /tmp/tmplu1br9t3.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    long prev = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++){\n        if(lst[i] < prev) return false;\n        prev =\
    \ lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749420
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    for(; it != lst.end(); it++)\
    \ {\n        if(*it < prev)\n            return false;\n        prev = *it;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749424
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n-1; i++){\n        if(lst[i] >= lst[i+1]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpch_175la.cpp: In function 'int main()':\n/tmp/tmpch_175la.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpch_175la.cpp:2:\n/tmp/tmpch_175la.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpch_175la.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpch_175la.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpch_175la.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpch_175la.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpch_175la.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpch_175"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n  // Your code here\n  std::set<long> s;\n  for(auto i:lst){\n    s.insert(i);\n\
    \  }\n  if(s.size()!=lst.size()){\n    return false;\n  }\n  for(int i=0;i<lst.size()-1;i++){\n\
    \    if(lst[i]>lst[i+1]){\n      return false;\n    }\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n    {\n        return\
    \ true;\n    }\n    for(int i=0;i<lst.size()-1;i++)\n    {\n        if(lst[i]>lst[i+1])\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749424
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>=lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iqwlf6y.cpp: In function 'int main()':\n/tmp/tmp2iqwlf6y.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iqwlf6y.cpp:2:\n/tmp/tmp2iqwlf6y.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp2iqwlf6y.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp2iqwlf6y.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp2iqwlf6y.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp2iqwlf6y.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp2iqwlf6y.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2iqwlf"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it = lst.begin();\n    std::vector<long>::iterator\
    \ it2 = lst.begin();\n    it2++;\n    while (it2 != lst.end()) {\n        if (*it\
    \ > *it2) {\n            return false;\n        }\n        it++;\n        it2++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it;\n    it = std::unique(lst.begin(),\
    \ lst.end());\n    lst.resize(std::distance(lst.begin(), it));\n    std::sort(lst.begin(),\
    \ lst.end());\n    return lst == lst;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpivfddpjb: /tmp/tmpivfddpjb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749422
