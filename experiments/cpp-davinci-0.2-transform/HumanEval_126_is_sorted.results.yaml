language: cpp
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s(lst.begin(), lst.end());\n\
    \    if (s.size() != lst.size()) {\n        return false;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9parmdot.cpp: In function 'int main()':\n/tmp/tmp9parmdot.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9parmdot.cpp:2:\n/tmp/tmp9parmdot.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp9parmdot.cpp:38:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp9parmdot.cpp:38:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9parmdot.cpp:38:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp9parmdot.cpp:39:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp9parmdot.cpp:39:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp9parmdot.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9parmdot.cpp:39:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9parmd"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n-1; i++){\n        if(lst[i] >= lst[i+1]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpch_175la.cpp: In function 'int main()':\n/tmp/tmpch_175la.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpch_175la.cpp:2:\n/tmp/tmpch_175la.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpch_175la.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpch_175la.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpch_175la.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpch_175la.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpch_175la.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpch_175la.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpch_175"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(int i=0;i<lst.size();i++){\n\
    \        s.insert(lst[i]);\n    }\n    if(s.size()==lst.size()){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n   \
    \ auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvu8bd18o.cpp: In function 'int main()':\n/tmp/tmpvu8bd18o.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvu8bd18o.cpp:2:\n/tmp/tmpvu8bd18o.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpvu8bd18o.cpp:38:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpvu8bd18o.cpp:38:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvu8bd18o.cpp:38:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpvu8bd18o.cpp:39:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpvu8bd18o.cpp:39:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpvu8bd18o.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvu8bd18o.cpp:39:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvu8bd1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22x7lq4x.cpp: In function 'int main()':\n/tmp/tmp22x7lq4x.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp22x7lq4x.cpp:2:\n/tmp/tmp22x7lq4x.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp22x7lq4x.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp22x7lq4x.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp22x7lq4x.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp22x7lq4x.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp22x7lq4x.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp22x7lq4x.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp22x7lq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        s.insert(lst[i]);\n    }\n    if (s.size() != lst.size()) {\n       \
    \ return false;\n    }\n    for (long i = 0; i < lst.size() - 1; i++) {\n    \
    \    if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzoi5_hmr.cpp: In function 'int main()':\n/tmp/tmpzoi5_hmr.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzoi5_hmr.cpp:2:\n/tmp/tmpzoi5_hmr.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpzoi5_hmr.cpp:40:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpzoi5_hmr.cpp:40:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzoi5_hmr.cpp:40:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpzoi5_hmr.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpzoi5_hmr.cpp:41:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpzoi5_hmr.cpp:41:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzoi5_hmr.cpp:41:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzoi5_h"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>=lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iqwlf6y.cpp: In function 'int main()':\n/tmp/tmp2iqwlf6y.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iqwlf6y.cpp:2:\n/tmp/tmp2iqwlf6y.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp2iqwlf6y.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp2iqwlf6y.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp2iqwlf6y.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp2iqwlf6y.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp2iqwlf6y.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2iqwlf6y.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2iqwlf"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprll8g_e2.cpp: In function 'int main()':\n/tmp/tmprll8g_e2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprll8g_e2.cpp:2:\n/tmp/tmprll8g_e2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprll8g_e2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprll8g_e2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprll8g_e2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprll8g_e2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprll8g_e2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprll8g_e2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprll8g_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] == lst[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxg_l05r5.cpp: In function 'int main()':\n/tmp/tmpxg_l05r5.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxg_l05r5.cpp:2:\n/tmp/tmpxg_l05r5.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpxg_l05r5.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpxg_l05r5.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxg_l05r5.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpxg_l05r5.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpxg_l05r5.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpxg_l05r5.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxg_l05r5.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxg_l05"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (std::is_sorted(lst.begin(), lst.end()))\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptgern5v2.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmptgern5v2.cpp:28:9: error: 'is_sorted' is not a member of 'std'\n     if\
    \ (std::is_sorted(lst.begin(), lst.end()))\n         ^\n/tmp/tmptgern5v2.cpp:28:9:\
    \ note: suggested alternative:\n/tmp/tmptgern5v2.cpp:23:6: note:   'is_sorted'\n\
    \ bool is_sorted(std::vector<long> lst) {\n      ^\n/tmp/tmptgern5v2.cpp: In function\
    \ 'int main()':\n/tmp/tmptgern5v2.cpp:34:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = is_sorted;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptgern5v2.cpp:2:\n/tmp/tmptgern5v2.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmptgern5v2.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmptgern5v2.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptgern5v2.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmptgern5v2.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmptgern5v2.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1)\n  \
    \      return true;\n    else {\n        for (int i = 0; i < lst.size() - 1; i++)\
    \ {\n            if (lst[i] > lst[i + 1])\n                return false;\n   \
    \     }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprhgrtnyo.cpp: In function 'int main()':\n/tmp/tmprhgrtnyo.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprhgrtnyo.cpp:2:\n/tmp/tmprhgrtnyo.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprhgrtnyo.cpp:41:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprhgrtnyo.cpp:41:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprhgrtnyo.cpp:41:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprhgrtnyo.cpp:42:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprhgrtnyo.cpp:42:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprhgrtnyo.cpp:42:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprhgrtnyo.cpp:42:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprhgrtn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp32xsn9hq.cpp: In function 'int main()':\n/tmp/tmp32xsn9hq.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp32xsn9hq.cpp:2:\n/tmp/tmp32xsn9hq.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp32xsn9hq.cpp:29:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp32xsn9hq.cpp:29:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp32xsn9hq.cpp:29:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp32xsn9hq.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp32xsn9hq.cpp:30:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp32xsn9hq.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp32xsn9hq.cpp:30:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp32xsn9"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    long prev = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++){\n        if(lst[i] < prev) return false;\n        prev =\
    \ lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmd3w7h3x.cpp: In function 'int main()':\n/tmp/tmpmd3w7h3x.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmd3w7h3x.cpp:2:\n/tmp/tmpmd3w7h3x.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpmd3w7h3x.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpmd3w7h3x.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmd3w7h3x.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpmd3w7h3x.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpmd3w7h3x.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpmd3w7h3x.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmd3w7h3x.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpmd3w7h"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46okfh8x.cpp: In function 'int main()':\n/tmp/tmp46okfh8x.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp46okfh8x.cpp:2:\n/tmp/tmp46okfh8x.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp46okfh8x.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp46okfh8x.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp46okfh8x.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp46okfh8x.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp46okfh8x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp46okfh8x.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp46okfh"
  stdout: ''
