name: HumanEval_77_iscube
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ an integer a and returns True \n// if this ingeger is a cube of some integer number.\n\
  // Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n\
  // (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>>\
  \ iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n\
  // (false)\nbool iscube(long a) {\n"
tests: "}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) ==\
  \ (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) ==\
  \ (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
  \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
  \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
completions: ["    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n     \
    \   return true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n     \
    \   if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;", '    return a>=0 && round(pow(a,1.0/3))==pow(a,1.0/3);',
  "    if (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    long i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
  "    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = 1;\n    while\
    \ (x * x * x < a) x++;\n    return x * x * x == a;", "    long x = std::cbrt(a);\n\
    \    return a == x * x * x;", "    if (a == 0) {\n        return true;\n    }\n\
    \    if (a < 0) {\n        a = -a;\n    }\n    long i = 1;\n    while (i * i *\
    \ i <= a) {\n        if (i * i * i == a) {\n            return true;\n       \
    \ }\n        i++;\n    }\n    return false;", "\tlong b = std::pow(a, 1.0/3);\n\
    \treturn b*b*b == a;", "    if (a == 0) return true;\n    if (a < 0) a = -a;\n\
    \    long b = std::cbrt(a);\n    return b * b * b == a;", "    if (a == 0) return\
    \ true;\n    if (a < 0) a = -a;\n    long b = std::cbrt(a);\n    return b * b\
    \ * b == a;", "    if (a == 0) {\n        return true;\n    }\n    if (a < 0)\
    \ {\n        a = -a;\n    }\n    long b = std::cbrt(a);\n    return b * b * b\
    \ == a;", "    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n     \
    \   return true;\n    }\n    long i = 1;\n    while (i * i * i <= a) {\n     \
    \   if (i * i * i == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;", "    if (a == 0) return true;\n    if (a < 0) a =\
    \ -a;\n    long x = 1;\n    while (x * x * x < a) {\n        x++;\n    }\n   \
    \ return x * x * x == a;", "    if (a == 0) return true;\n    if (a < 0) a = -a;\n\
    \    long b = std::cbrt(a);\n    return b * b * b == a;", "    if (a < 0) {\n\
    \        a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long\
    \ i = 1;\n    while (i*i*i <= a) {\n        if (i*i*i == a) {\n            return\
    \ true;\n        }\n        i++;\n    }\n    return false;", "    if (a < 0) {\n\
    \        a = -a;\n    }\n    long i = 0;\n    while (i * i * i < a) {\n      \
    \  i++;\n    }\n    return i * i * i == a;", "    if (a < 0)\n        a = -a;\n\
    \    long x = 0;\n    while (x * x * x < a) {\n        x++;\n    }\n    return\
    \ x * x * x == a;", "    if (a < 0) {\n        a = -a;\n    }\n    if (a == 0)\
    \ {\n        return true;\n    }\n    long b = 1;\n    while (b * b * b < a) {\n\
    \        b++;\n    }\n    return b * b * b == a;", "    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;", "    // Your code here\n    long\
    \ b = std::cbrt(a);\n    return b*b*b == a;", "    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;"]
stop_tokens:
- "\n}"
