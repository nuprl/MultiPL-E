language: cpp
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\"\
    );\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\"\
    );\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\"\
    );\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\"\
    );\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\"\
    );\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\"\
    );\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\"\
    );\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\"\
    );\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\"\
    );\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpe2r6tgfb.cpp: In function 'int main()':\n/tmp/tmpe2r6tgfb.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe2r6tgfb.cpp:2:\n/tmp/tmpe2r6tgfb.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpe2r6tgfb.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpe2r6tgfb.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpe2r6tgfb.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpe2r6tgfb.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe2r6tgfb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphve4yp0s.cpp: In function 'int main()':\n/tmp/tmphve4yp0s.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphve4yp0s.cpp:2:\n/tmp/tmphve4yp0s.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmphve4yp0s.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphve4yp0s.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphve4yp0s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphve4yp0s.cpp: In function 'int main()':\n/tmp/tmphve4yp0s.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphve4yp0s.cpp:2:\n/tmp/tmphve4yp0s.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmphve4yp0s.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphve4yp0s.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphve4yp0s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            result.push_back(\"A+\"\
    );\n        } else if (grades[i] > 3.7) {\n            result.push_back(\"A\"\
    );\n        } else if (grades[i] > 3.3) {\n            result.push_back(\"A-\"\
    );\n        } else if (grades[i] > 3.0) {\n            result.push_back(\"B+\"\
    );\n        } else if (grades[i] > 2.7) {\n            result.push_back(\"B\"\
    );\n        } else if (grades[i] > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grades[i] > 2.0) {\n            result.push_back(\"C+\"\
    );\n        } else if (grades[i] > 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grades[i] > 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grades[i] > 1.0) {\n            result.push_back(\"D+\"\
    );\n        } else if (grades[i] > 0.7) {\n            result.push_back(\"D\"\
    );\n        } else if (grades[i] > 0.0) {\n            result.push_back(\"D-\"\
    );\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp09_jnpgv.cpp: In function 'int main()':\n/tmp/tmp09_jnpgv.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp09_jnpgv.cpp:2:\n/tmp/tmp09_jnpgv.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp09_jnpgv.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp09_jnpgv.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp09_jnpgv.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp09_jnpgv.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp09_jnpgv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            result.push_back(\"A+\"\
    );\n        } else if (grades[i] > 3.7) {\n            result.push_back(\"A\"\
    );\n        } else if (grades[i] > 3.3) {\n            result.push_back(\"A-\"\
    );\n        } else if (grades[i] > 3.0) {\n            result.push_back(\"B+\"\
    );\n        } else if (grades[i] > 2.7) {\n            result.push_back(\"B\"\
    );\n        } else if (grades[i] > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grades[i] > 2.0) {\n            result.push_back(\"C+\"\
    );\n        } else if (grades[i] > 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grades[i] > 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grades[i] > 1.0) {\n            result.push_back(\"D+\"\
    );\n        } else if (grades[i] > 0.7) {\n            result.push_back(\"D\"\
    );\n        } else if (grades[i] > 0.0) {\n            result.push_back(\"D-\"\
    );\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp09_jnpgv.cpp: In function 'int main()':\n/tmp/tmp09_jnpgv.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp09_jnpgv.cpp:2:\n/tmp/tmp09_jnpgv.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp09_jnpgv.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp09_jnpgv.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp09_jnpgv.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp09_jnpgv.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp09_jnpgv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (auto grade : grades)\
    \ {\n        if (grade >= 4.0) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if (grade >= 3.7) {\n            letter_grades.push_back(\"A\"\
    );\n        } else if (grade >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxe4pju2k.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpxe4pju2k.cpp:27:15:\
    \ error: 'grade' does not name a type\n     for (auto grade : grades) {\n    \
    \           ^\n/tmp/tmpxe4pju2k.cpp:56:5: error: expected ';' before 'return'\n\
    \     return letter_grades;\n     ^\n/tmp/tmpxe4pju2k.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpxe4pju2k.cpp:56:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpxe4pju2k.cpp:56:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpxe4pju2k.cpp:56:5: error: expected ')' before 'return'\n\
    /tmp/tmpxe4pju2k.cpp: In function 'int main()':\n/tmp/tmpxe4pju2k.cpp:59:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxe4pju2k.cpp:2:\n/tmp/tmpxe4pju2k.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpxe4pju2k.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpxe4pju2k.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxe4pju2k.cpp:60:98: error: no matching function for call to\
    \ 'std::vect"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            result.push_back(\"A+\"\
    );\n        } else if (grades[i] > 3.7) {\n            result.push_back(\"A\"\
    );\n        } else if (grades[i] > 3.3) {\n            result.push_back(\"A-\"\
    );\n        } else if (grades[i] > 3.0) {\n            result.push_back(\"B+\"\
    );\n        } else if (grades[i] > 2.7) {\n            result.push_back(\"B\"\
    );\n        } else if (grades[i] > 2.3) {\n            result.push_back(\"B-\"\
    );\n        } else if (grades[i] > 2.0) {\n            result.push_back(\"C+\"\
    );\n        } else if (grades[i] > 1.7) {\n            result.push_back(\"C\"\
    );\n        } else if (grades[i] > 1.3) {\n            result.push_back(\"C-\"\
    );\n        } else if (grades[i] > 1.0) {\n            result.push_back(\"D+\"\
    );\n        } else if (grades[i] > 0.7) {\n            result.push_back(\"D\"\
    );\n        } else if (grades[i] > 0.0) {\n            result.push_back(\"D-\"\
    );\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp09_jnpgv.cpp: In function 'int main()':\n/tmp/tmp09_jnpgv.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp09_jnpgv.cpp:2:\n/tmp/tmp09_jnpgv.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp09_jnpgv.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp09_jnpgv.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp09_jnpgv.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp09_jnpgv.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp09_jnpgv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphve4yp0s.cpp: In function 'int main()':\n/tmp/tmphve4yp0s.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphve4yp0s.cpp:2:\n/tmp/tmphve4yp0s.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmphve4yp0s.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphve4yp0s.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphve4yp0s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp95m7ecwa.cpp: In function 'int main()':\n/tmp/tmp95m7ecwa.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95m7ecwa.cpp:2:\n/tmp/tmp95m7ecwa.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp95m7ecwa.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp95m7ecwa.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp95m7ecwa.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp95m7ecwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphve4yp0s.cpp: In function 'int main()':\n/tmp/tmphve4yp0s.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphve4yp0s.cpp:2:\n/tmp/tmphve4yp0s.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmphve4yp0s.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphve4yp0s.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphve4yp0s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphve4yp0s.cpp: In function 'int main()':\n/tmp/tmphve4yp0s.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphve4yp0s.cpp:2:\n/tmp/tmphve4yp0s.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmphve4yp0s.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphve4yp0s.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphve4yp0s.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphve4yp0s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
