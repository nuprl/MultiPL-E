name: HumanEval_62_derivative
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
  \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
  \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
  \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
  \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
  \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
  \ xs) {\n"
tests: "}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
  \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
  \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
  \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
  \ (std::vector<long>()));\n}\n"
completions: ["\tstd::vector<long> result;\n\tfor (int i = 1; i < xs.size(); i++)\
    \ {\n\t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;", "    std::vector<long>\
    \ result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i]\
    \ * i);\n    }\n    return result;", "    std::vector<long> ans;\n    for (int\
    \ i = 1; i < xs.size(); i++) {\n        ans.push_back(xs[i] * i);\n    }\n   \
    \ return ans;", "    std::vector<long> result;\n    for (int i = 1; i < xs.size();\
    \ i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;", " \
    \   std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n      \
    \  ans.push_back(xs[i] * i);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i]\
    \ * i);\n    }\n    return result;", "    std::vector<long> ans;\n    for (int\
    \ i = 1; i < xs.size(); i++) {\n        ans.push_back(xs[i] * i);\n    }\n   \
    \ return ans;", "    std::vector<long> result;\n    for (int i = 1; i < xs.size();\
    \ i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;", " \
    \   std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n      \
    \  ans.push_back(xs[i] * i);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i]\
    \ * i);\n    }\n    return result;", "    std::vector<long> result;\n    for (int\
    \ i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (int i = 1; i <\
    \ xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;",
  "    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++) {\n    \
    \    result.push_back(xs[i] * i);\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    for (int i = 1; i < xs.size(); i++) {\n        res.push_back(xs[i]\
    \ * i);\n    }\n    return res;", "    std::vector<long> res;\n    for (int i\
    \ = 1; i < xs.size(); i++) {\n        res.push_back(xs[i] * i);\n    }\n    return\
    \ res;", "    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        ans.push_back(xs[i] * i);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i]\
    \ * i);\n    }\n    return result;", "    std::vector<long> result;\n    for (int\
    \ i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (int i = 1; i <\
    \ xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;",
  "    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n       \
    \ res.push_back(xs[i] * i);\n    }\n    return res;"]
stop_tokens:
- "\n}"
