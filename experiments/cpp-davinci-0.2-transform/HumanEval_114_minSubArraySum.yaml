name: HumanEval_114_minSubArraySum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
  \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
  // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
  \ (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2,\
  \ (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\n"
tests: "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
  \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10,\
  \ (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
  \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
  \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n  \
  \  assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
completions: ["    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n\
    \        min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;", "   \
    \ long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;", "    long min_sum = 0;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min_sum) {\n            min_sum = sum;\n        }\n        if (sum > 0) {\n\
    \            sum = 0;\n        }\n    }\n    return min_sum;", "    long min_sum\
    \ = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   sum += nums[i];\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n \
    \   return min_sum;", "    long min_sum = 0;\n    long sum = 0;\n    for (auto\
    \ num : nums) {\n        sum += num;\n        if (sum < min_sum) {\n         \
    \   min_sum = sum;\n        }\n    }\n    return min_sum;", "    long min_sum\
    \ = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum =\
    \ sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n \
    \   }\n    return min_sum;", "    long minSum = INT_MAX;\n    long currSum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        currSum += nums[i];\n  \
    \      if (currSum < minSum) {\n            minSum = currSum;\n        }\n   \
    \     if (currSum > 0) {\n            currSum = 0;\n        }\n    }\n    return\
    \ minSum;", "    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum\
    \ = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n\
    \        if (curr_sum < min_sum) {\n            min_sum = curr_sum;\n        }\n\
    \        if (curr_sum > 0) {\n            curr_sum = 0;\n        }\n    }\n  \
    \  return min_sum;", "    long min_sum = std::numeric_limits<long>::max();\n \
    \   long curr_sum = 0;\n    for (auto num : nums) {\n        curr_sum += num;\n\
    \        min_sum = std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n\
    \            curr_sum = 0;\n        }\n    }\n    return min_sum;", "  long min_sum\
    \ = nums[0];\n  long curr_sum = nums[0];\n  for (int i = 1; i < nums.size(); i++)\
    \ {\n    curr_sum = std::min(nums[i], curr_sum + nums[i]);\n    min_sum = std::min(min_sum,\
    \ curr_sum);\n  }\n  return min_sum;", "    long min_sum = nums[0];\n    long\
    \ sum = 0;\n    for (auto num : nums) {\n        sum += num;\n        if (sum\
    \ < min_sum) {\n            min_sum = sum;\n        }\n        if (sum > 0) {\n\
    \            sum = 0;\n        }\n    }\n    return min_sum;", "    long min_sum\
    \ = std::numeric_limits<long>::max();\n    long sum = 0;\n    for (auto num :\
    \ nums) {\n        sum += num;\n        min_sum = std::min(min_sum, sum);\n  \
    \      if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;",
  "    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum + nums[i]);\n\
    \        min_sum = std::min(min_sum, curr_sum);\n    }\n    return min_sum;",
  "    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min_sum) {\n            min_sum = sum;\n        }\n        if (sum > 0) {\n\
    \            sum = 0;\n        }\n    }\n    return min_sum;", "    long min_sum\
    \ = nums[0];\n    long curr_sum = nums[0];\n    for (int i = 1; i < nums.size();\
    \ i++) {\n        curr_sum = std::min(nums[i], curr_sum + nums[i]);\n        min_sum\
    \ = std::min(min_sum, curr_sum);\n    }\n    return min_sum;", "    long min_sum\
    \ = LONG_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum =\
    \ sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n \
    \   }\n    return min_sum;", "    long min_sum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min_sum) {\n            min_sum = sum;\n       \
    \ }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;", "    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums)\
    \ {\n        sum += num;\n        if (sum < min_sum) {\n            min_sum =\
    \ sum;\n        }\n    }\n    return min_sum;", "    long min_sum = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min_sum) {\n            min_sum = sum;\n    \
    \    }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;"]
stop_tokens:
- "\n}"
