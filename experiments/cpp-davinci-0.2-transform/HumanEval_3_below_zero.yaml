name: HumanEval_3_below_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of deposit\
  \ and withdrawal operations on a bank account that starts with\n// zero balance.\
  \ Your task is to detect if at any point the balance of account fallls below zero,\
  \ and\n// at that point function should return True. Otherwise it should return\
  \ False.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n\
  // (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n\
  // (true)\nbool below_zero(std::vector<long> operations) {\n"
tests: "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
  \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
  \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
  }\n"
completions: []
stop_tokens:
- "\n}"
