language: cpp
name: HumanEval_74_total_match
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (auto s : lst1) {\n\
    \        total1 += s.size();\n    }\n    for (auto s : lst2) {\n        total2\
    \ += s.size();\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\
    \ else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp_qo52uzj: /tmp/tmp_qo52uzj.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total_chars_lst1 = 0;\n\tint total_chars_lst2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\ttotal_chars_lst1 += lst1[i].size();\n\t\
    }\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\ttotal_chars_lst2 += lst2[i].size();\n\
    \t}\n\tif (total_chars_lst1 < total_chars_lst2) {\n\t\treturn lst1;\n\t}\n\telse\
    \ {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpu42ag07z: /tmp/tmpu42ag07z.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 > total2) {\n\t\treturn\
    \ lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps5d9k52j: /tmp/tmps5d9k52j.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    l2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpr0jck9f0: /tmp/tmpr0jck9f0.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmplp42zrbv: /tmp/tmplp42zrbv.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpoyzbw92t: /tmp/tmpoyzbw92t.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (auto i : lst1) {\n\
    \        total1 += i.size();\n    }\n    for (auto i : lst2) {\n        total2\
    \ += i.size();\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n\
    \    return lst2;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpiurjkjx5: /tmp/tmpiurjkjx5.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmphdxnrqvm: /tmp/tmphdxnrqvm.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmphdxnrqvm: /tmp/tmphdxnrqvm.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpxpf9m4bc: /tmp/tmpxpf9m4bc.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (auto i : lst1) {\n\
    \        total1 += i.size();\n    }\n    for (auto i : lst2) {\n        total2\
    \ += i.size();\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n\
    \    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpy38a_z7_: /tmp/tmpy38a_z7_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmphdxnrqvm: /tmp/tmphdxnrqvm.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps5d9k52j: /tmp/tmps5d9k52j.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++)\n\
    \        l1 += lst1[i].size();\n    for(int i = 0; i < lst2.size(); i++)\n   \
    \     l2 += lst2[i].size();\n    if(l1 < l2)\n        return lst1;\n    else if(l2\
    \ < l1)\n        return lst2;\n    else\n        return lst1;\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n\
    \        l1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size(); i++)\
    \ {\n        l2 += lst2[i].size();\n    }\n    if(l1 < l2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp1dk55vso: /tmp/tmp1dk55vso.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1=0,count2=0;\n    for(int i=0;i<lst1.size();i++)\n  \
    \  {\n        count1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++)\n\
    \    {\n        count2+=lst2[i].size();\n    }\n    if(count1<count2)\n    {\n\
    \        return lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpi5uti1fs: /tmp/tmpi5uti1fs.cpp:44: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpr9c4kwop: /tmp/tmpr9c4kwop.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1=0,l2=0;\n    for(int i=0;i<lst1.size();i++)\n    {\n   \
    \     l1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++)\n    {\n\
    \        l2+=lst2[i].size();\n    }\n    if(l1<l2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp8_tr7_df: /tmp/tmp8_tr7_df.cpp:44: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpr9c4kwop: /tmp/tmpr9c4kwop.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpxpf9m4bc: /tmp/tmpxpf9m4bc.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpq5uwqei5: /tmp/tmpq5uwqei5.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    for\
    \ (int i = 0; i < lst1.size(); i++) {\n        total_chars_lst1 += lst1[i].size();\n\
    \    }\n    for (int i = 0; i < lst2.size(); i++) {\n        total_chars_lst2\
    \ += lst2[i].size();\n    }\n    if (total_chars_lst1 < total_chars_lst2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0ehnq7gp: /tmp/tmp0ehnq7gp.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++)\n    {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i <\
    \ lst2.size(); i++)\n    {\n        sum2 += lst2[i].size();\n    }\n    if(sum1\
    \ < sum2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpemz7wa47: /tmp/tmpemz7wa47.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmphdxnrqvm: /tmp/tmphdxnrqvm.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++)\n    {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i <\
    \ lst2.size(); i++)\n    {\n        sum2 += lst2[i].size();\n    }\n    if(sum1\
    \ < sum2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpemz7wa47: /tmp/tmpemz7wa47.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++)\n    {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i <\
    \ lst2.size(); i++)\n    {\n        sum2 += lst2[i].size();\n    }\n    if(sum1\
    \ < sum2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpemz7wa47: /tmp/tmpemz7wa47.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1=0,l2=0;\n    for(int i=0;i<lst1.size();i++)\n        l1+=lst1[i].size();\n\
    \    for(int i=0;i<lst2.size();i++)\n        l2+=lst2[i].size();\n    if(l1<l2)\n\
    \        return lst1;\n    else if(l2<l1)\n        return lst2;\n    else\n  \
    \      return lst1;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpxpf9m4bc: /tmp/tmpxpf9m4bc.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    l2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpr0jck9f0: /tmp/tmpr0jck9f0.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    l2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse if\
    \ (l1 > l2) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpt7qljjui: /tmp/tmpt7qljjui.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    l2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpr0jck9f0: /tmp/tmpr0jck9f0.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n\
    \        l1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size(); i++)\
    \ {\n        l2 += lst2[i].size();\n    }\n    if(l1 < l2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp1dk55vso: /tmp/tmp1dk55vso.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpxpf9m4bc: /tmp/tmpxpf9m4bc.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++)\n    {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i <\
    \ lst2.size(); i++)\n    {\n        sum2 += lst2[i].size();\n    }\n    if(sum1\
    \ < sum2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpemz7wa47: /tmp/tmpemz7wa47.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpr9c4kwop: /tmp/tmpr9c4kwop.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n\
    \    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpr9c4kwop: /tmp/tmpr9c4kwop.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpt_znjzfz: /tmp/tmpt_znjzfz.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    return\
    \ lst2;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmplsm3njp2: /tmp/tmplsm3njp2.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else if(sum1 > sum2) {\n        return lst2;\n \
    \   }\n    else {\n        return lst1;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    for\
    \ (auto s : lst1) {\n        total_chars_lst1 += s.size();\n    }\n    for (auto\
    \ s : lst2) {\n        total_chars_lst2 += s.size();\n    }\n    if (total_chars_lst1\
    \ < total_chars_lst2) {\n        return lst1;\n    }\n    else {\n        return\
    \ lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpo0n8glmm: /tmp/tmpo0n8glmm.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n\
    \        l1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size(); i++)\
    \ {\n        l2 += lst2[i].size();\n    }\n    if(l1 < l2) {\n        return lst1;\n\
    \    }\n    return lst2;\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp2v84n4iv: /tmp/tmp2v84n4iv.cpp:38: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (auto i : lst1) {\n\t\tsum1\
    \ += i.size();\n\t}\n\tfor (auto i : lst2) {\n\t\tsum2 += i.size();\n\t}\n\tif\
    \ (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpynp7n6b7: /tmp/tmpynp7n6b7.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmphdxnrqvm: /tmp/tmphdxnrqvm.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else if(sum1 > sum2) {\n        return lst2;\n \
    \   }\n    else {\n        return lst1;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptfoku4d9: /tmp/tmptfoku4d9.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpt_znjzfz: /tmp/tmpt_znjzfz.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    for (auto i :\
    \ lst1) {\n        total_lst1 += i.size();\n    }\n    for (auto i : lst2) {\n\
    \        total_lst2 += i.size();\n    }\n    if (total_lst1 < total_lst2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpylmix335: /tmp/tmpylmix335.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(auto i : lst1)\n    \
    \    sum1 += i.size();\n    for(auto i : lst2)\n        sum2 += i.size();\n  \
    \  if(sum1 < sum2)\n        return lst1;\n    else\n        return lst2;\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpk0z5jyg5: /tmp/tmpk0z5jyg5.cpp:37: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    for\
    \ (int i = 0; i < lst1.size(); i++) {\n        total_chars_lst1 += lst1[i].size();\n\
    \    }\n    for (int i = 0; i < lst2.size(); i++) {\n        total_chars_lst2\
    \ += lst2[i].size();\n    }\n    if (total_chars_lst1 < total_chars_lst2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0ehnq7gp: /tmp/tmp0ehnq7gp.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(auto i : lst1)\n        l1 += i.size();\n\
    \    for(auto i : lst2)\n        l2 += i.size();\n    if(l1 < l2)\n        return\
    \ lst1;\n    else if(l2 < l1)\n        return lst2;\n    else\n        return\
    \ lst1;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpq5uwqei5: /tmp/tmpq5uwqei5.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n\
    \        l1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size(); i++)\
    \ {\n        l2 += lst2[i].size();\n    }\n    if(l1 < l2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp1dk55vso: /tmp/tmp1dk55vso.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpr9c4kwop: /tmp/tmpr9c4kwop.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0hpg1dj_: /tmp/tmp0hpg1dj_.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4y4i5d5k: /tmp/tmp4y4i5d5k.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660064258
