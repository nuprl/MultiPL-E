name: HumanEval_74_total_match
language: rs
results:
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp6kk3nsow.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_1 = 0;\n    let mut total_chars_2 = 0;\n    for i in\
    \ lst1.iter() {\n        total_chars_1 += i.len();\n    }\n    for i in lst2.iter()\
    \ {\n        total_chars_2 += i.len();\n    }\n    if total_chars_1 < total_chars_2\
    \ {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmptoab9h_z.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmptrvyt928.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpb7dqsgkn.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3bs47hxa.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmphj4znlgf.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let total2\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if total1 < total2 {\n \
    \       lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpbods2zhp.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmptadlyejn.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpfmm56u7w.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp4kbxvxe3.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp0lxfv3xx.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpzaneybce.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_lst1 = 0;\n    let mut total_lst2 = 0;\n    for i in lst1.iter()\
    \ {\n        total_lst1 += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   total_lst2 += i.len();\n    }\n    if total_lst1 < total_lst2 {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpmkuc64z4.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_1 = 0;\n    let mut total_chars_2 = 0;\n    for i in\
    \ lst1.iter() {\n        total_chars_1 += i.len();\n    }\n    for i in lst2.iter()\
    \ {\n        total_chars_2 += i.len();\n    }\n    if total_chars_1 < total_chars_2\
    \ {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpsbgv_t3n.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp1a1cxfb6.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_lst1 = 0;\n    let mut total_lst2 = 0;\n    for i in lst1.iter()\
    \ {\n        total_lst1 += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   total_lst2 += i.len();\n    }\n    if total_lst1 < total_lst2 {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpofu42x6f.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_lst1 = 0;\n    let mut total_lst2 = 0;\n    for i in lst1.iter()\
    \ {\n        total_lst1 += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   total_lst2 += i.len();\n    }\n    if total_lst1 < total_lst2 {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3yhc1hvj.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpvq5wug2j.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpb4tiiktu.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpgrqfk7ed.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp86_ykbv3.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpt5bytdc4.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_1 = 0;\n    let mut total_chars_2 = 0;\n    for i in\
    \ lst1.iter() {\n        total_chars_1 += i.len();\n    }\n    for i in lst2.iter()\
    \ {\n        total_chars_2 += i.len();\n    }\n    if total_chars_1 < total_chars_2\
    \ {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp_v5oqk6k.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ == total_chars_lst2 {\n        return lst1;\n    } else if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpf3zp9c9o.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpk584n2xr.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmphj3q4hpd.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp88av25qj.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpgqmxchpl.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpmhoppf_0.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp34s_2g9b.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp9cx_nq1a.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmppj01fq70.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for s in lst1.iter() {\n\
    \        total1 += s.len();\n    }\n    for s in lst2.iter() {\n        total2\
    \ += s.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpasf1wbej.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpwkt_r620.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpahpb12jp.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpbwtsj_fe.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars1 = 0;\n    let mut total_chars2 = 0;\n    for s in lst1.iter()\
    \ {\n        total_chars1 += s.len();\n    }\n    for s in lst2.iter() {\n   \
    \     total_chars2 += s.len();\n    }\n    if total_chars1 < total_chars2 {\n\
    \        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmplhywe18a.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp7dxx3qw8.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp7dxx3qw8.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst2;\n    }\n    if lst2.len() == 0\
    \ {\n        return lst1;\n    }\n    let mut total1 = 0;\n    let mut total2\
    \ = 0;\n    for i in lst1.iter() {\n        total1 += i.len();\n    }\n    for\
    \ i in lst2.iter() {\n        total2 += i.len();\n    }\n    if total1 < total2\
    \ {\n        return lst1;\n    }\n    if total2 < total1 {\n        return lst2;\n\
    \    }\n    return lst1;\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmpejllyqmo.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars1 = 0;\n    let mut total_chars2 = 0;\n    for i in lst1.iter()\
    \ {\n        total_chars1 += i.len();\n    }\n    for i in lst2.iter() {\n   \
    \     total_chars2 += i.len();\n    }\n    if total_chars1 < total_chars2 {\n\
    \        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpsx3qcwml.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3lku9aa2.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp43e9bl7e.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpln_cqa6w.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpnsaqzbam.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp719ga0td.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp719ga0td.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpt5814ype.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp0e3k1e5g.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmptp55cg50.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpsl3hb8hv.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpg1n6xuef.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpd6r7v_u5.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpwy84lbit.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp33zvyh88.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpyqf5l3mo.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpc0bcgqhf.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmphzzszeg0.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmph_o75ulh.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpgv_71fkv.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpil4w4r92.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpa06hi2dl.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpdbg3ejnz.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpeulam_8o.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3x2jb453.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_lst1 = 0;\n    let mut total_lst2 = 0;\n    for i in lst1.iter()\
    \ {\n        total_lst1 += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   total_lst2 += i.len();\n    }\n    if total_lst1 < total_lst2 {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpfnl93__q.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpabbo43wg.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpqj878rbo.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp82r47vxm.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3fq33y4l.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_lst1 = 0;\n    let mut total_lst2 = 0;\n    for i in lst1.iter()\
    \ {\n        total_lst1 += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   total_lst2 += i.len();\n    }\n    if total_lst1 < total_lst2 {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp5p4pv6gl.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp_mr4pbi8.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp0yge6quq.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpyqr_2_5l.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp5jt3eayv.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpe085mhg2.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for s in lst1.iter() {\n\
    \        total1 += s.len();\n    }\n    for s in lst2.iter() {\n        total2\
    \ += s.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpsgzhgkxi.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst2;\n    }\n    if lst2.len() == 0\
    \ {\n        return lst1;\n    }\n    let mut sum1 = 0;\n    let mut sum2 = 0;\n\
    \    for i in lst1.iter() {\n        sum1 += i.len();\n    }\n    for i in lst2.iter()\
    \ {\n        sum2 += i.len();\n    }\n    if sum1 < sum2 {\n        return lst1;\n\
    \    }\n    return lst2;\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmprc82mqnf.rs:44:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpvqoa1jcu.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpfqku5o85.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpr2ny589p.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpe6epd0wf.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpnz96f7n5.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpy2b0w2s3.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpd9z05jee.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpd9z05jee.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp5eugkh56.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp94u_faec.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpdywjczad.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpfg2a_vyw.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpkfwobd1q.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp9em896w6.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpjhbz7s27.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpm38c1bro.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpddqxuzci.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpddqxuzci.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let len1 = lst1.iter().map(|x| x.len()).sum();\n    let len2 = lst2.iter().map(|x|\
    \ x.len()).sum();\n    if len1 < len2 {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpwm36ensm.rs:16:9\n\
    \   |\n16 |     let len1 = lst1.iter().map(|x| x.len()).sum();\n   |         ^^^^\
    \ consider giving `len1` a type\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpauuvwktt.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3ddsyna7.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpk39ssgcc.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpy5vn08wf.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpsy2mhckv.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_1 = 0;\n    let mut total_chars_2 = 0;\n    for i in\
    \ lst1.iter() {\n        total_chars_1 += i.len();\n    }\n    for i in lst2.iter()\
    \ {\n        total_chars_2 += i.len();\n    }\n    if total_chars_1 < total_chars_2\
    \ {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp39fop7hk.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpayvouq0d.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpb_3c8q68.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpuascterw.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpafp4_w1r.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpuhpvmg7s.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp6i4fb3z5.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpd7ns9bud.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpac07_k09.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmphm371k8z.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpcr7o3ym8.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpcr7o3ym8.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp9a4lgp_n.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp9a4lgp_n.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpgtf8o9sa.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp9t5p__cm.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpr_wivi_l.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpdget_2km.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp852umz6j.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp2z6l58mh.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 == total2 {\n        return lst1;\n    } else\
    \ if total1 < total2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp399cdt7j.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpb68jnf7w.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpp6td3zjt.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp5y_dx_cb.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpfkrt8bn7.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpmlvykwzs.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpjqs_nxe7.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmphswqmrol.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut count1 = 0;\n    let mut count2 = 0;\n    for i in lst1.iter() {\n\
    \        count1 += i.len();\n    }\n    for i in lst2.iter() {\n        count2\
    \ += i.len();\n    }\n    if count1 < count2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpc69971n6.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpyg7yvz2g.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp7d7nj5zf.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars1 = 0;\n    let mut total_chars2 = 0;\n    for i in lst1.iter()\
    \ {\n        total_chars1 += i.len();\n    }\n    for i in lst2.iter() {\n   \
    \     total_chars2 += i.len();\n    }\n    if total_chars1 < total_chars2 {\n\
    \        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpeayouzyc.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_1 = 0;\n    let mut total_chars_2 = 0;\n    for i in\
    \ lst1.iter() {\n        total_chars_1 += i.len();\n    }\n    for i in lst2.iter()\
    \ {\n        total_chars_2 += i.len();\n    }\n    if total_chars_1 < total_chars_2\
    \ {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp_k88dm4d.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp_3sfdf5m.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpop3fn3as.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmppu1n07zt.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp8uwpwnba.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp5aka265j.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpze0ok_ce.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp49bci3xw.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmptx0mtvj2.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmptx0mtvj2.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpc63c7p4c.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for s in lst1.iter() {\n\
    \        total1 += s.len();\n    }\n    for s in lst2.iter() {\n        total2\
    \ += s.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp2xr599s3.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpb_kxv736.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars1 = 0;\n    let mut total_chars2 = 0;\n    for i in lst1.iter()\
    \ {\n        total_chars1 += i.len();\n    }\n    for i in lst2.iter() {\n   \
    \     total_chars2 += i.len();\n    }\n    if total_chars1 < total_chars2 {\n\
    \        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpys1vl95d.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpwk2tmakh.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3l04ghfq.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp0lgrhlem.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp1x7q27bs.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let len1 = lst1.iter().map(|s| s.len()).sum();\n    let len2 = lst2.iter().map(|s|\
    \ s.len()).sum();\n    if len1 < len2 {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp19hfyhtf.rs:16:9\n\
    \   |\n16 |     let len1 = lst1.iter().map(|s| s.len()).sum();\n   |         ^^^^\
    \ consider giving `len1` a type\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 <= sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpiot7jbam.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmprm4dcwx7.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpwlowlboq.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpiegvrto2.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpdwj1s_06.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpy6_112y9.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp2xyixyep.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpsdqjefh1.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars1 = 0;\n    let mut total_chars2 = 0;\n    for i in lst1.iter()\
    \ {\n        total_chars1 += i.len();\n    }\n    for i in lst2.iter() {\n   \
    \     total_chars2 += i.len();\n    }\n    if total_chars1 < total_chars2 {\n\
    \        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpyrdr3g36.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len == lst2_len {\n        return lst1;\n    }\
    \ else if lst1_len < lst2_len {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpsuqcoe_0.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpsuqcoe_0.rs:29:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n29 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpl1awqgqk.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp_53yru0m.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp61l8vf1t.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3yw7i_eb.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpptx2hlh1.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpwi8zihpa.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp5ad28_xf.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp6pspu6kd.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpvshsgdj5.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpvshsgdj5.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpf9t8dogn.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpno44pe5w.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpa9k7849m.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpeg4unf43.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpe5ktahl7.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total_chars_1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let\
    \ total_chars_2 = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if total_chars_1\
    \ < total_chars_2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn\
    \ main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpwmtdowpi.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpi6rpprr3.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst2;\n    }\n    if lst2.len() == 0\
    \ {\n        return lst1;\n    }\n    let mut total1 = 0;\n    let mut total2\
    \ = 0;\n    for i in lst1.iter() {\n        total1 += i.len();\n    }\n    for\
    \ i in lst2.iter() {\n        total2 += i.len();\n    }\n    if total1 < total2\
    \ {\n        return lst1;\n    }\n    if total2 < total1 {\n        return lst2;\n\
    \    }\n    return lst1;\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmpaigjk0jt.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpxwjo6sbw.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpxhfpmsun.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpx8is97v5.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpe2fbslpc.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp5c3j4fo1.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for s in lst1.iter() {\n  \
    \      sum1 += s.len();\n    }\n    for s in lst2.iter() {\n        sum2 += s.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp8jv63ki0.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_total = 0;\n    let mut lst2_total = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_total += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_total += i.len();\n    }\n    if lst1_total < lst2_total {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp6ktqs3j2.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmppfpsx5io.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp0vhmxxdm.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpgubmyex4.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpi3voq1lj.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpaio5be0n.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpmx8lj1eh.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpyzs2qt_9.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in &lst1 {\n    \
    \    total1 += i.len();\n    }\n    for i in &lst2 {\n        total2 += i.len();\n\
    \    }\n    if total1 < total2 {\n        lst1\n    } else {\n        lst2\n \
    \   }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpxh68x5ae.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst1;\n    }\n    if lst2.len() == 0\
    \ {\n        return lst2;\n    }\n    let mut total_len1 = 0;\n    let mut total_len2\
    \ = 0;\n    for s in lst1.iter() {\n        total_len1 += s.len();\n    }\n  \
    \  for s in lst2.iter() {\n        total_len2 += s.len();\n    }\n    if total_len1\
    \ < total_len2 {\n        return lst1;\n    }\n    return lst2;\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp_wfcbhx4.rs:44:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpxvwym1v9.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpnpv0l723.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmppxl9wzgu.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in lst1.iter() {\n  \
    \      sum1 += i.len();\n    }\n    for i in lst2.iter() {\n        sum2 += i.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpv1h00_7e.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp4y4bvo9h.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ item in lst1.iter() {\n        total_chars_lst1 += item.len();\n    }\n    for\
    \ item in lst2.iter() {\n        total_chars_lst2 += item.len();\n    }\n    if\
    \ total_chars_lst1 < total_chars_lst2 {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpgc7x6iq4.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars1 = 0;\n    let mut total_chars2 = 0;\n    for s in lst1.iter()\
    \ {\n        total_chars1 += s.len();\n    }\n    for s in lst2.iter() {\n   \
    \     total_chars2 += s.len();\n    }\n    if total_chars1 <= total_chars2 {\n\
    \        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp3cutrwh1.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp3cutrwh1.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
