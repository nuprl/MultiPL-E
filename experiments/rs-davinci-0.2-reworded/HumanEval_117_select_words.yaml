name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a vector of all words from string s that contain\
  \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
  \ If the string s is empty then the function should return an empty vector.\n///\
  \ Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n\
  /// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n/// vec![String::from(\"\
  little\")]\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 3)\n\
  /// vec![String::from(\"Mary\"), String::from(\"lamb\")]\n/// >>> select_words(String::from(\"\
  simple white space\"), 2)\n/// vec![]\n/// >>> select_words(String::from(\"Hello\
  \ world\"), 4)\n/// vec![String::from(\"world\")]\n/// >>> select_words(String::from(\"\
  Uncle sam\"), 3)\n/// vec![String::from(\"Uncle\")]\nfn select_words(s: String,\
  \ n: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\"\
  )]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), String::new());\n\
  \    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"\
  world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"\
  Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), String::new());\n\
  \    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"\
  b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n"
completions: ["    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !is_vowel(c) {\n                count += 1;\n            }\n        } else {\n\
    \            if count == n {\n                result.push_str(&word);\n      \
    \          result.push(' ');\n            }\n            word.clear();\n     \
    \       count = 0;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            word.push(c);\n\
    \            if !is_vowel(c) {\n                count += 1;\n            }\n \
    \       }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n\
    \    let mut count: isize = 0;\n    for c in s.chars() {\n        if c == ' '\
    \ {\n            if count == n {\n                result.push(word);\n       \
    \     }\n            word = String::new();\n            count = 0;\n        }\
    \ else {\n            word.push(c);\n            if !is_vowel(c) {\n         \
    \       count += 1;\n            }\n        }\n    }\n    if count == n {\n  \
    \      result.push(word);\n    }\n    result.join(\" \")", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut res = String::new();\n    let mut words: Vec<&str> = s.split_whitespace().collect();\n\
    \    for word in words.iter() {\n        if count_consonants(word) == n {\n  \
    \          res.push_str(word);\n            res.push(' ');\n        }\n    }\n\
    \    res.trim().to_string()", "    let mut words = String::new();\n    let mut\
    \ word = String::new();\n    let mut count = 0;\n    for c in s.chars() {\n  \
    \      if c.is_alphabetic() {\n            if !c.is_vowel() {\n              \
    \  count += 1;\n            }\n            word.push(c);\n        } else {\n \
    \           if count == n {\n                words.push_str(&word);\n        \
    \        words.push(' ');\n            }\n            word.clear();\n        \
    \    count = 0;\n        }\n    }\n    if count == n {\n        words.push_str(&word);\n\
    \    }\n    words.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut word = String::new();\n    let\
    \ mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n            if !is_vowel(c) {\n                count\
    \ += 1;\n            }\n        } else {\n            if count == n {\n      \
    \          result.push_str(&word);\n                result.push(' ');\n      \
    \      }\n            word.clear();\n            count = 0;\n        }\n    }\n\
    \    if count == n {\n        result.push_str(&word);\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if word.len() > 0 {\n      \
    \          words.push(word);\n                word = String::new();\n        \
    \    }\n        } else {\n            word.push(c);\n        }\n    }\n    if\
    \ word.len() > 0 {\n        words.push(word);\n    }\n    let mut selected_words\
    \ = Vec::new();\n    for word in words {\n        let mut n_consonants = 0;\n\
    \        for c in word.chars() {\n            if c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' {\n                n_consonants += 1;\n        \
    \    }\n        }\n        if n_consonants == n {\n            selected_words.push(word);\n\
    \        }\n    }\n    let mut result = String::new();\n    for word in selected_words\
    \ {\n        result.push_str(&word);\n        result.push(' ');\n    }\n    if\
    \ result.len() > 0 {\n        result.pop();\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words: Vec<&str> = s.split_whitespace().collect();\n    let mut i\
    \ = 0;\n    while i < words.len() {\n        let mut consonants = 0;\n       \
    \ for c in words[i].chars() {\n            if c.is_alphabetic() && !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        }\n        if consonants\
    \ == n {\n            result.push_str(words[i]);\n            result.push(' ');\n\
    \        }\n        i += 1;\n    }\n    result.trim().to_string()", "    let mut\
    \ result = String::new();\n    let mut words = s.split_whitespace();\n    while\
    \ let Some(word) = words.next() {\n        if count_consonants(word) == n {\n\
    \            result.push_str(word);\n            result.push(' ');\n        }\n\
    \    }\n    result.trim().to_string()", "    let mut result: Vec<String> = Vec::new();\n\
    \    let mut word: String = String::new();\n    let mut consonants: isize = 0;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \            if !c.is_vowel() {\n                consonants += 1;\n          \
    \  }\n        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result.join(\" \")", "    let mut words = Vec::new();\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if word.len() > 0 {\n                words.push(word);\n                word\
    \ = String::new();\n            }\n        } else {\n            word.push(c);\n\
    \        }\n    }\n    if word.len() > 0 {\n        words.push(word);\n    }\n\
    \    let mut result = String::new();\n    for word in words {\n        let mut\
    \ count = 0;\n        for c in word.chars() {\n            if !is_vowel(c) {\n\
    \                count += 1;\n            }\n        }\n        if count == n\
    \ {\n            result.push_str(&word);\n            result.push(' ');\n    \
    \    }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n        } else {\n            if word.len() >\
    \ 0 {\n                words.push(word);\n                word = String::new();\n\
    \            }\n        }\n    }\n    if word.len() > 0 {\n        words.push(word);\n\
    \    }\n    let mut result = String::new();\n    for word in words {\n       \
    \ let mut count = 0;\n        for c in word.chars() {\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(&word);\n            result.push(' ');\n  \
    \      }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut words = s.split_whitespace();\n    let mut result = String::new();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if !is_vowel(c) {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if consonants(word) == n {\n            result.push_str(word);\n    \
    \        result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut words = s.split_whitespace();\n    let mut result = String::new();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_alphabetic() && !c.is_ascii_lowercase()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut consonants = 0;\n        for c in word.chars() {\n      \
    \      if !is_vowel(c) {\n                consonants += 1;\n            }\n  \
    \      }\n        if consonants == n {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut res = String::new();\n    for word in s.split_whitespace() {\n    \
    \    if count_consonants(word) == n {\n            res.push_str(word);\n     \
    \       res.push(' ');\n        }\n    }\n    res.trim().to_string()", "    let\
    \ mut res = String::new();\n    let mut words = s.split_whitespace();\n    while\
    \ let Some(word) = words.next() {\n        if count_consonants(word) == n {\n\
    \            res.push_str(word);\n            res.push(' ');\n        }\n    }\n\
    \    res.trim().to_string()", "    let mut result = String::new();\n    let mut\
    \ words = s.split_whitespace();\n    while let Some(word) = words.next() {\n \
    \       if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n\
    \    let mut count: isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if !c.is_vowel() {\n                count += 1;\n           \
    \ }\n            word.push(c);\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result.join(\" \")", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c.is_ascii_alphabetic() && !c.is_ascii_lowercase() {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut word = String::new();\n    let\
    \ mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n            if !is_vowel(c) {\n                count\
    \ += 1;\n            }\n        } else {\n            if count == n {\n      \
    \          result.push_str(&word);\n                result.push(' ');\n      \
    \      }\n            word.clear();\n            count = 0;\n        }\n    }\n\
    \    if count == n {\n        result.push_str(&word);\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    if result.len() > 0 {\n        result.pop();\n    }\n \
    \   result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    for word in s.split_whitespace() {\n        if count_consonants(word) ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !c.is_vowel() {\n                count += 1;\n            }\n        }\n\
    \        if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n \
    \       if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if word.len() > 0 {\n                words.push(word);\n        \
    \        word = String::new();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        words.push(word);\n    }\n    let mut result = String::new();\n\
    \    for word in words {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if !c.is_vowel() {\n                count += 1;\n           \
    \ }\n        }\n        if count == n {\n            result.push_str(&word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut words = s.split_whitespace();\n    let mut result = String::new();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' {\n                count += 1;\n            }\n       \
    \ }\n        if count == n {\n            result.push_str(word);\n           \
    \ result.push(' ');\n        }\n    }\n    result.trim().to_string()", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ while let Some(word) = words.next() {\n        if count_consonants(word) ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut words = String::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_vowel() {\n         \
    \       count = 0;\n                word.clear();\n            } else {\n    \
    \            count += 1;\n                word.push(c);\n            }\n     \
    \   } else {\n            if count == n {\n                words.push_str(&word);\n\
    \                words.push(' ');\n            }\n            count = 0;\n   \
    \         word.clear();\n        }\n    }\n    if count == n {\n        words.push_str(&word);\n\
    \        words.push(' ');\n    }\n    words.trim().to_string()", "    let mut\
    \ result = String::new();\n    let mut words = s.split_whitespace();\n    let\
    \ mut word = words.next();\n    while word != None {\n        let mut consonants\
    \ = 0;\n        for c in word.unwrap().chars() {\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        }\n        if consonants\
    \ == n {\n            result.push_str(word.unwrap());\n            result.push('\
    \ ');\n        }\n        word = words.next();\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words: Vec<&str> = s.split_whitespace().collect();\n    let mut consonants\
    \ = 0;\n    let mut i = 0;\n    while i < words.len() {\n        let mut j = 0;\n\
    \        while j < words[i].len() {\n            if !is_vowel(words[i].chars().nth(j).unwrap())\
    \ {\n                consonants += 1;\n            }\n            j += 1;\n  \
    \      }\n        if consonants == n {\n            result.push_str(words[i]);\n\
    \            result.push(' ');\n        }\n        consonants = 0;\n        i\
    \ += 1;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ words = s.split_whitespace();\n    while let Some(word) = words.next() {\n \
    \       if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !is_vowel(c) {\n                count += 1;\n            }\n        }\n \
    \       if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    for word in s.split_whitespace() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut words = s.split_whitespace();\n    let mut res = String::new();\n \
    \   while let Some(word) = words.next() {\n        if word.chars().filter(|c|\
    \ c.is_ascii_alphabetic() && !c.is_ascii_vowel()).count() as isize == n {\n  \
    \          res.push_str(word);\n            res.push(' ');\n        }\n    }\n\
    \    res.trim().to_string()", "    let mut result = String::new();\n    let mut\
    \ words = s.split_whitespace();\n    for word in words {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c.is_ascii_alphabetic() && !c.is_ascii_lowercase() {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut words: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if word.len() >\
    \ 0 {\n                words.push(word);\n                word = String::new();\n\
    \            }\n        } else {\n            word.push(c);\n        }\n    }\n\
    \    if word.len() > 0 {\n        words.push(word);\n    }\n    let mut result:\
    \ Vec<String> = Vec::new();\n    for word in words {\n        let mut count: isize\
    \ = 0;\n        for c in word.chars() {\n            if c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n          \
    \  }\n        }\n        if count == n {\n            result.push(word);\n   \
    \     }\n    }\n    result.join(\" \")", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words: Vec<String> = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c ==\
    \ ' ' {\n            if word.len() > 0 {\n                words.push(word);\n\
    \                word = String::new();\n            }\n        } else {\n    \
    \        word.push(c);\n        }\n    }\n    if word.len() > 0 {\n        words.push(word);\n\
    \    }\n    for word in words {\n        let mut count = 0;\n        for c in\
    \ word.chars() {\n            if !is_vowel(c) {\n                count += 1;\n\
    \            }\n        }\n        if count == n {\n            result.push_str(&word);\n\
    \            result.push(' ');\n        }\n    }\n    if result.len() > 0 {\n\
    \        result.pop();\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut res = String::new();\n\
    \    for word in s.split_whitespace() {\n        if count_consonants(word) ==\
    \ n {\n            res.push_str(word);\n            res.push(' ');\n        }\n\
    \    }\n    res.trim().to_string()", "    let mut result = String::new();\n  \
    \  let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if word.chars().filter(|c|\
    \ c.is_alphabetic()).filter(|c| !c.is_vowel()).count() as isize == n {\n     \
    \       result.push_str(word);\n            result.push(' ');\n        }\n   \
    \ }\n    result.trim().to_string()", "    let mut result = String::new();\n  \
    \  let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            word.clear();\n\
    \            count = 0;\n        } else {\n            word.push(c);\n       \
    \     if !is_vowel(c) {\n                count += 1;\n            }\n        }\n\
    \    }\n    if count == n {\n        result.push_str(&word);\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if word.chars().filter(|c|\
    \ c.is_ascii_alphabetic()).filter(|c| !c.is_ascii_vowel()).count() as isize ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c.is_ascii_alphabetic() && !c.is_ascii_vowel() {\n                count +=\
    \ 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if word.chars().filter(|c|\
    \ !c.is_vowel()).count() as isize == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    for word in words {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut words = s.split_whitespace();\n    let mut result = String::new();\n\
    \    while let Some(word) = words.next() {\n        let mut consonants = 0;\n\
    \        for c in word.chars() {\n            if c.is_ascii_alphabetic() && !c.is_ascii_vowel()\
    \ {\n                consonants += 1;\n            }\n        }\n        if consonants\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if count_consonants(&word) ==\
    \ n {\n                words.push(word.clone());\n            }\n            word.clear();\n\
    \        } else {\n            word.push(c);\n        }\n    }\n    if count_consonants(&word)\
    \ == n {\n        words.push(word.clone());\n    }\n    words.join(\" \")", " \
    \   let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", '    unimplemented!()', " \
    \   let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    let mut is_first = true;\n    while let Some(word) = words.next() {\n   \
    \     if count_consonants(word) == n {\n            if is_first {\n          \
    \      is_first = false;\n            } else {\n                result.push_str(\"\
    , \");\n            }\n            result.push_str(word);\n        }\n    }\n\
    \    result", "    let mut words = s.split_whitespace();\n    let mut result =\
    \ String::new();\n    while let Some(word) = words.next() {\n        let mut count\
    \ = 0;\n        for c in word.chars() {\n            if c.is_ascii_lowercase()\
    \ && !c.is_ascii_vowel() {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result.push_str(word);\n         \
    \   result.push(' ');\n        }\n    }\n    result.trim().to_string()", "   \
    \ let mut result = String::new();\n    let mut words: Vec<String> = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n        } else {\n            if word.len() >\
    \ 0 {\n                words.push(word);\n                word = String::new();\n\
    \            }\n        }\n    }\n    if word.len() > 0 {\n        words.push(word);\n\
    \    }\n    for word in words {\n        let mut count = 0;\n        for c in\
    \ word.chars() {\n            if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(&word);\n            result.push(' ');\n  \
    \      }\n    }\n    result.pop();\n    result", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    for word in words {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut words = s.split_whitespace();\n    let mut result = Vec::new();\n \
    \   while let Some(word) = words.next() {\n        let mut count = 0;\n      \
    \  for c in word.chars() {\n            if !c.is_vowel() {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push(word.to_string());\n\
    \        }\n    }\n    result.join(\" \")", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    let mut word = words.next();\n\
    \    while word != None {\n        let mut consonants = 0;\n        for c in word.unwrap().chars()\
    \ {\n            if !is_vowel(c) {\n                consonants += 1;\n       \
    \     }\n        }\n        if consonants == n {\n            result.push_str(word.unwrap());\n\
    \            result.push(' ');\n        }\n        word = words.next();\n    }\n\
    \    result.pop();\n    result", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c.is_ascii_alphabetic() && !c.is_ascii_vowel() {\n                count +=\
    \ 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut words = s.split_whitespace();\n    let mut result = String::new();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !c.is_vowel() {\n                count += 1;\n            }\n        }\n\
    \        if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut words =\
    \ String::new();\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c == ' ' {\n            if consonants(&word) == n {\n            \
    \    words.push_str(&word);\n                words.push(' ');\n            }\n\
    \            word.clear();\n        } else {\n            word.push(c);\n    \
    \    }\n    }\n    if consonants(&word) == n {\n        words.push_str(&word);\n\
    \    }\n    words.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c.is_ascii_alphabetic() && !c.is_ascii_lowercase() {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n\
    \    let mut consonants: isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result.join(\" \")", "    let\
    \ mut result = String::new();\n    let mut words: Vec<&str> = s.split_whitespace().collect();\n\
    \    for word in words.iter() {\n        if count_consonants(word) == n {\n  \
    \          result.push_str(word);\n            result.push(' ');\n        }\n\
    \    }\n    result.trim().to_string()", "    let mut result: Vec<String> = Vec::new();\n\
    \    let mut word: String = String::new();\n    let mut count: isize = 0;\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \            if !is_vowel(c) {\n                count += 1;\n            }\n \
    \       } else {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      }\n    }\n    if count == n {\n        result.push(word);\n    }\n    result.join(\"\
    \ \")", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words: Vec<&str> = s.split_whitespace().collect();\n    for word in words.iter()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n\
    \    let mut consonants: isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result.join(\" \")", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ for word in words {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !c.is_vowel() {\n                count += 1;\n            }\n        }\n\
    \        if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if word.len() > 0 {\n      \
    \          words.push(word);\n                word = String::new();\n        \
    \    }\n        } else {\n            word.push(c);\n        }\n    }\n    if\
    \ word.len() > 0 {\n        words.push(word);\n    }\n    let mut result = Vec::new();\n\
    \    for word in words {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if !is_vowel(c) {\n                count += 1;\n            }\n\
    \        }\n        if count == n {\n            result.push(word);\n        }\n\
    \    }\n    result.join(\" \")", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !is_vowel(c) {\n                count += 1;\n            }\n        }\n \
    \       if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    for word in words\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    for word in words {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words: Vec<&str> = s.split_whitespace().collect();\n    for word\
    \ in words.iter() {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result: Vec<String>\
    \ = Vec::new();\n    let mut word: String = String::new();\n    let mut consonants:\
    \ isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n     \
    \       word.push(c);\n            if !c.is_vowel() {\n                consonants\
    \ += 1;\n            }\n        } else {\n            if consonants == n {\n \
    \               result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result.join(\" \")", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    for word in\
    \ words {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace();\n\
    \    let mut result = String::new();\n    while let Some(word) = words.next()\
    \ {\n        let mut consonants = 0;\n        for c in word.chars() {\n      \
    \      if !c.is_vowel() {\n                consonants += 1;\n            }\n \
    \       }\n        if consonants == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut words = s.split_whitespace();\n    let mut result = String::new();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_alphabetic() && !c.is_ascii_lowercase()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result: Vec<String>\
    \ = Vec::new();\n    let mut word: String = String::new();\n    let mut consonants:\
    \ isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n     \
    \       word.push(c);\n            if !c.is_vowel() {\n                consonants\
    \ += 1;\n            }\n        } else {\n            if consonants == n {\n \
    \               result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result.join(\" \")", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if word.chars().filter(|&c| c.is_ascii_alphabetic() && !c.is_ascii_vowel()).count()\
    \ as isize == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    for word in words\
    \ {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if word.len() > 0 {\n      \
    \          words.push(word);\n                word = String::new();\n        \
    \    }\n        } else {\n            word.push(c);\n        }\n    }\n    if\
    \ word.len() > 0 {\n        words.push(word);\n    }\n    let mut result = String::new();\n\
    \    for word in words {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n\
    \                count += 1;\n            }\n        }\n        if count == n\
    \ {\n            result.push_str(&word);\n            result.push(' ');\n    \
    \    }\n    }\n    if result.len() > 0 {\n        result.pop();\n    }\n    result",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    let mut word = words.next();\n    while word != None {\n        let mut count\
    \ = 0;\n        for c in word.unwrap().chars() {\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word.unwrap());\n            result.push('\
    \ ');\n        }\n        word = words.next();\n    }\n    result.pop();\n   \
    \ result", "    let mut result: Vec<String> = Vec::new();\n    let mut word: String\
    \ = String::new();\n    let mut count: isize = 0;\n    for c in s.chars() {\n\
    \        if c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            word.push(c);\n            if !is_vowel(c) {\n  \
    \              count += 1;\n            }\n        }\n    }\n    if count == n\
    \ {\n        result.push(word);\n    }\n    result.join(\" \")", "    let mut\
    \ words = s.split_whitespace();\n    let mut result = String::new();\n    for\
    \ word in words {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        if word.chars().filter(|c| c.is_ascii_alphabetic()).count() as isize\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !is_vowel(c) {\n                count += 1;\n            }\n        } else {\n\
    \            if count == n {\n                result.push_str(&word);\n      \
    \          result.push(' ');\n            }\n            word.clear();\n     \
    \       count = 0;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut words = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n        } else {\n            if count == n {\n   \
    \             words.push_str(&word);\n                words.push(' ');\n     \
    \       }\n            count = 0;\n            word = String::new();\n       \
    \ }\n        if c.is_ascii_lowercase() && !c.is_ascii_vowel() {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        words.push_str(&word);\n\
    \    }\n    words"]
stop_tokens:
- "\n}"
