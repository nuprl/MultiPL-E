name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a vector of all words from string s that contain\
  \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
  \ If the string s is empty then the function should return an empty vector.\n///\
  \ Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n\
  /// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n/// vec![String::from(\"\
  little\")]\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 3)\n\
  /// vec![String::from(\"Mary\"), String::from(\"lamb\")]\n/// >>> select_words(String::from(\"\
  simple white space\"), 2)\n/// vec![]\n/// >>> select_words(String::from(\"Hello\
  \ world\"), 4)\n/// vec![String::from(\"world\")]\n/// >>> select_words(String::from(\"\
  Uncle sam\"), 3)\n/// vec![String::from(\"Uncle\")]\nfn select_words(s: String,\
  \ n: isize) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\"\
  )]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"\
  world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"\
  Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"\
  b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n"
completions: []
stop_tokens:
- "\n}"
