name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a vector of all words from string s that contain\
  \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
  \ If the string s is empty then the function should return an empty vector.\n///\
  \ Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n\
  /// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n/// vec![String::from(\"\
  little\")]\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 3)\n\
  /// vec![String::from(\"Mary\"), String::from(\"lamb\")]\n/// >>> select_words(String::from(\"\
  simple white space\"), 2)\n/// vec![]\n/// >>> select_words(String::from(\"Hello\
  \ world\"), 4)\n/// vec![String::from(\"world\")]\n/// >>> select_words(String::from(\"\
  Uncle sam\"), 3)\n/// vec![String::from(\"Uncle\")]\nfn select_words(s: String,\
  \ n: isize) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\"\
  )]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"\
  world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"\
  Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"\
  b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n"
completions: ["    let mut result = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if !c.is_vowel() {\n                consonants += 1;\n      \
    \      }\n            word.push(c);\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result:\
    \ Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    let\
    \ mut count: isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result: Vec<String> = Vec::new();\n    let mut\
    \ word: String = String::new();\n    let mut consonants: isize = 0;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \            if !is_vowel(c) {\n                consonants += 1;\n           \
    \ }\n        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                words.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        words.push(word);\n\
    \    }\n    words", "    let mut words: Vec<String> = Vec::new();\n    let mut\
    \ word: String = String::new();\n    let mut consonants: isize = 0;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \            if !is_vowel(c) {\n                consonants += 1;\n           \
    \ }\n        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    let mut consonants = 0;\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                words.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        } else {\n            word.push(c);\n  \
    \          if !is_vowel(c) {\n                consonants += 1;\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result: Vec<String> = Vec::new();\n    let mut\
    \ word: String = String::new();\n    let mut count: isize = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if !is_vowel(c) {\n         \
    \       count += 1;\n            }\n            word.push(c);\n        } else\
    \ {\n            if count == n {\n                result.push(word);\n       \
    \     }\n            word = String::new();\n            count = 0;\n        }\n\
    \    }\n    if count == n {\n        result.push(word);\n    }\n    result", " \
    \   let mut words = Vec::new();\n    for word in s.split_whitespace() {\n    \
    \    if count_consonants(word) == n {\n            words.push(word.to_string());\n\
    \        }\n    }\n    words", "    let mut result: Vec<String> = Vec::new();\n\
    \    let mut word: String = String::new();\n    let mut consonants: isize = 0;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \            if !is_vowel(c) {\n                consonants += 1;\n           \
    \ }\n        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    let mut count = 0;\n   \
    \ for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n \
    \               words.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        } else {\n            if !is_vowel(c) {\n   \
    \             count += 1;\n            }\n            word.push(c);\n        }\n\
    \    }\n    if count == n {\n        words.push(word);\n    }\n    words", " \
    \   let mut words = Vec::new();\n    let mut word = String::new();\n    let mut\
    \ count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if\
    \ count == n {\n                words.push(word);\n            }\n           \
    \ word = String::new();\n            count = 0;\n        } else {\n          \
    \  word.push(c);\n            if !is_vowel(c) {\n                count += 1;\n\
    \            }\n        }\n    }\n    if count == n {\n        words.push(word);\n\
    \    }\n    words", "    let mut result = Vec::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            count = 0;\n        } else {\n\
    \            word.push(c);\n            if c.is_ascii_lowercase() && !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n    }\n    if count\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    for word in s.split_whitespace() {\n        if count_consonants(word)\
    \ == n {\n            words.push(word.to_string());\n        }\n    }\n    words",
  "    let mut result = Vec::new();\n    let mut word = String::new();\n    let mut\
    \ consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            word.push(c);\n            if !c.is_vowel() {\n                consonants\
    \ += 1;\n            }\n        } else {\n            if consonants == n {\n \
    \               result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result: Vec<String>\
    \ = Vec::new();\n    let mut word: String = String::new();\n    let mut count:\
    \ isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n     \
    \       word.push(c);\n            if !is_vowel(c) {\n                count +=\
    \ 1;\n            }\n        } else {\n            if count == n {\n         \
    \       result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                words.push(word);\n            }\n\
    \            word = String::new();\n            count = 0;\n        } else {\n\
    \            word.push(c);\n            if !is_vowel(c) {\n                count\
    \ += 1;\n            }\n        }\n    }\n    if count == n {\n        words.push(word);\n\
    \    }\n    words", "    let mut result = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result"]
stop_tokens:
- "\n}"
