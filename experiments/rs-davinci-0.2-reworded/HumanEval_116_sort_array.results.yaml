name: HumanEval_116_sort_array
language: rs
results:
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp2enm4dvv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpypwym8nf.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpw4rpxtuc.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp2uzae9gm.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpepopt0tn.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpg3w7xj15.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpzwi8lgor.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpxgwrfvve.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpmzfiu4xe.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpqb5dnb5q.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnb5lsknv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpht2hguwn.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpvz76idef.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1157kofv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphd3jz8bm.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp2x49ybg1.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5u65eoxw.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpt99mq_pc.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp8h33amfn.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnlvwtzkq.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp8o2rz5zz.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpcyp1z2f3.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp95dwluqc.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpzdzq2dtg.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpo9gyufj4.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmps5tw15g9.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpvkqjr55d.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpde0xmewz.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpxl402svy.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmprelefdb1.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpncxs9j38.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnx_fdil7.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnhuz725l.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpqh7jwrld.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp4b3uz1uo.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp9ggsmx7o.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpxivulpsi.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpns9j9qez.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpwwzy3xiu.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpjd6shbcs.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1efxgghy.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpg5yrz0ju.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmporixhbep.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1fjviy2r.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphodrodsr.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpac9ra907.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp36ij4lbs.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpdn0l4ieo.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp92_nwgn6.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpzy57ho6k.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones != b_ones {\n            a_ones.cmp(&b_ones)\n        } else\
    \ {\n            a.cmp(b)\n        }\n    });\n    arr\n}\n\nfn main() {\n   \
    \ let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp4nq2wfhk.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp7xssjn_f.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpggk4bh89.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpgezz8f3g.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp6z7zx67s.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpgcwxnuwf.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpfgtkmf7d.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpm92l7h9m.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmppfa8yobx.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpelm5f4h6.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp3hr1jp2s.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp4xe04r3w.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpt2m_ipgr.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpbeza_atw.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpk577g1tu.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp0nfoe5ue.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpcmyp2xig.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1nney6fg.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpam2acni5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp0piplhsz.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpgydwqur5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphyxquw4c.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpk_eyq9en.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpevwt33o6.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmprnhte_uf.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpi22rfxfc.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpzv0wdvj5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpxib3gew7.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnw0jdyb2.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpww06p_ir.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp8qwujy3j.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpl5160iw0.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp2i5lfovv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpspeq3qem.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp8j0daco5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpl5yckyj5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5fnyercu.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmps_nchh4z.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpyt5a6cxw.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmps0kany2o.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp7jbqlxki.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp6kumtnr5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp9bi_6nbr.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpjwt4_hs6.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp7pn443bx.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpckpfpy6c.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpsp0oyndd.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a = a.abs();\n        let b = b.abs();\n        let a_ones =\
    \ a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones ==\
    \ b_ones {\n            a.cmp(&b)\n        } else {\n            a_ones.cmp(&b_ones)\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -4, -3, -5, -6]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpbhn_coyh.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmps1jpac81.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmprjvl3cko.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpvo0mthff.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpayol4tpj.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnjcd6w87.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp64yt9gg5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmprln81gif.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmplu82bj61.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpdlc2zd3o.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpsd0lnkby.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmps9tzkir4.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmph74odqr1.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp6ktuhbob.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmplfgo1ya4.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmps6ljuadh.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a = a.abs();\n        let b = b.abs();\n        let a_ones =\
    \ a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones ==\
    \ b_ones {\n            a.cmp(&b)\n        } else {\n            a_ones.cmp(&b_ones)\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -4, -3, -5, -6]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpxp96pxi9.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1mktofdn.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5ivn_xze.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpv4jdmdp4.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp6nimn_xd.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5kz9hr2i.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpbigzqn38.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpses65y5c.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp8_e8jrq9.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpluqw3j4r.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmprtu4hljj.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpazrv1phn.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp_56u4cnc.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp4uzshw5l.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpezxqvewx.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpyubgslhq.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a = a.abs();\n        let b = b.abs();\n        let a_ones =\
    \ a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones ==\
    \ b_ones {\n            a.cmp(&b)\n        } else {\n            a_ones.cmp(&b_ones)\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -4, -3, -5, -6]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpi3ifoqy1.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1__cp5dj.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp8x819__h.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpwo8e9w2l.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpm_0pmqy0.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmppdfr3lph.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpus3pzt0h.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpa_bfcrvd.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp6u43ktvj.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpuvda7y_9.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp8c9bp7nm.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpe1qqc8ot.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpa7ojf3f4.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpscgqg075.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp_5l427ex.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpenj83soe.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp4euq3t22.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpeoa365fm.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpbpi63kq1.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpv7x3qj6t.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpxrn8xjmp.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpwsrj2hvv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp7affl4bd.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp7cdsoqh4.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpjs_fx186.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpskozfq60.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpmta1fmtw.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp3xeu18hj.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by(|a,\
    \ b| {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    sorted_arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpshdv8wzk.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpaf_5_xl0.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp64uoaoh7.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpzpkg2ol5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp739xui56.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpz7onr2bq.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpytiayxtu.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnteaaxac.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpc0f3r9q0.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpgk03kg70.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpewfkzz45.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5_jbhv57.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpvateq8ss.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp0xkqzclp.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpgpaw2f03.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpftzqinq2.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpwx8sqxnd.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpymhy0ddj.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp0y1cmioj.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp7ta5gose.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpiccb722x.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpwp7r4m15.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpbtyaqqsm.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp5ocmmnfp.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpen1qytjx.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp6evsv8lw.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpynzi3qx1.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpgvs2xgqj.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp0syldblx.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpdavqn02e.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1m06nfs4.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpjkj2_kez.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted = arr.clone();\n    sorted.sort_by(|a,\
    \ b| {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    sorted\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphx0v6xaf.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp624lyxln.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp7wz_cjmj.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp_vl16hg9.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpmoz_daoz.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpzkycif0u.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpbiv3o9z7.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp23n6y8vo.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpofbrv5hy.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpfnt66ufu.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this Kata, you have to sort a vector of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
    /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
    \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpibr5mvuv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
