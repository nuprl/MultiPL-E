name: HumanEval_54_same_chars
language: rs
results:
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgomckprg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1 = s1.chars().collect::<Vec<char>>();\n    s0.sort();\n    s1.sort();\n\
    \    s0 == s1\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptj0wizpf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqagkei46.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbncir372.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsycm_yki.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5ukjs64g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo6equ5kx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpndct9169.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsrs5n427.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp84h1cv52.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3srci6gv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbofa8nzv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5ehnzj78.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfvl87bhg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvqbj4ro2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppu0lxfll.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg78kx8d3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaimmq4wt.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu8apvir2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1jpa64gf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1z6ke5lc.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0n42jzk6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfgstyi28.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4b2p7wvi.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8ym61d1x.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3cl4tv2y.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps1okaipn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplhvsjnmd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0i7mgktg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaq3xfrls.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmmeibwny.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdj5gqvjp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpubuhp230.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8jm3xlgj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0xw377lo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiqm1qpbn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmporqe28u4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8xe9zgdq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars_count = [0; 26];\n    for c\
    \ in s0.chars() {\n        chars_count[(c as u8 - b'a') as usize] += 1;\n    }\n\
    \    for c in s1.chars() {\n        chars_count[(c as u8 - b'a') as usize] -=\
    \ 1;\n    }\n    chars_count.iter().all(|&x| x == 0)\n}\n\nfn main() {\n    let\
    \ candidate = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpczeomryi.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplee_k28c.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp64v341qw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9qtfrt7c.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7v4giisj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0kqyggtj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8gzkyn7_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfdqq2s2x.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjeizmqox.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplwc02u3u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_e9dy9dk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7xvf8jye.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzy1x2kxw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars_s0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars_s1 = s1.chars().collect::<Vec<char>>();\n    chars_s0.sort();\n\
    \    chars_s1.sort();\n    chars_s0 == chars_s1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdkhumtjs.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbkz12nee.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnoaeonxo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1y1nrwjb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_d_xwp1q.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoayrxepx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpogjrp8rp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo_k3ovhp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplfa30qp8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmkad3_sj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqzxpovq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmm64yqra.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi18juncu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzh27fur3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2shss338.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmc_5tpsf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0tlcvcdz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3founlyj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0bkdf6la.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8dx0d6zo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1x7k8r_b.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9p4hlu15.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd_mh4k20.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfzn39ta5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphei6yups.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9e08_tu1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqcyohphc.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg7_d6d_l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk5kvg_o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp52wrcap3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars_count = HashMap::new();\n \
    \   for c in s0.chars() {\n        *chars_count.entry(c).or_insert(0) += 1;\n\
    \    }\n    for c in s1.chars() {\n        *chars_count.entry(c).or_insert(0)\
    \ -= 1;\n    }\n    chars_count.values().all(|&x| x == 0)\n}\n\nfn main() {\n\
    \    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpxrdf0o2g.rs:15:27\n   |\n15 |     let mut chars_count = HashMap::new();\n\
    \   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4y_w5dov.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwosh7i5k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu42p90nq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcj0i7qp_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwkc_n2p5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprj6tg710.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj7f3vn1c.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw11amay2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5xty7cwm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd5ql0etq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp6dy2ad8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzhp9p1bn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph2kbznho.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphfmhv7a8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1 = s1.chars().collect::<Vec<char>>();\n    s0.sort();\n    s1.sort();\n\
    \    s0 == s1\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxu285k0t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvigur4u6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4bl6zoen.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9sna88c4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4c6y1o6e.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4ncpz73j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7h_iuarz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpm4sr69t0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl7g7qt_l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv4m775mq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdjvfc1o0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphr2e7mp1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvod4kf2a.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsxqsjlpx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphi0punt0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzdmfc_w0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9a8oioud.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpclj5cbvv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5pav5_e9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp17gj3o_7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgpkh24i3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkx5ptmcw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa8l8i6tu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxnhnrwr9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2x2cphbl.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_t5ltk3g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqj4h2_fh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_71emcrn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphwbj3z2x.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqbuakzv5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpniorvb76.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplwzng1hf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1354r7hq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt3ahuem9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5yso3n70.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjwxb9ua8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl6r8cyee.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfu_newc4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpixrwuk85.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptoctnvdj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpna2bykoj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaf4_sg4m.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptsnb593w.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplz3dmyvu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2vkbrfy1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj7mbe06a.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgtd9jwyz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1k_9kf_t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1 = s1.chars().collect::<Vec<char>>();\n    s0.sort();\n    s1.sort();\n\
    \    s0 == s1\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4lpg_616.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc7ms58uf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmrv6ugzj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpurnrt_rj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp87qbxwak.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiff8ksyz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdoxmbg9d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp63ixse55.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfn2ozcv1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo2kvqbpk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp75bv99f_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzinkjdy2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdjuv8mde.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprusv0bdn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp56vl3jow.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmhiqjx9v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpphpo1i1c.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpniub9vad.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl976sx75.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp66mkfx9j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1 = s1.chars().collect::<Vec<char>>();\n    s0.sort();\n    s1.sort();\n\
    \    s0 == s1\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps0xbjkkn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmbfei9yi.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptjzotelo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpch0oapnf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3tjt7sgd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg44b3qy0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnv6t4q8p.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdrhplmj2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpreawe701.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpae92x0_8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmponysc5p1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmh7w70ym.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpio5boe1k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp52chrs9j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3ihcnjhn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphj41jerr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphfvlo8i8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyppnc6i5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvnpc_dim.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3o5pp3xg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6ift1seu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6eh2sq_9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd6js_d_9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5zsn7w2n.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpovw5gsia.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars: Vec<char> = s0.chars().collect();\n\
    \    let mut s1_chars: Vec<char> = s1.chars().collect();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoqcyeb9u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp07l2dppt.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdhcfju0k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9a0dbl94.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaoye87p6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptx8zjdd4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1g8q8agh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf1dgwnlg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsm7gefpg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut chars0 = s0.chars().collect::<Vec<char>>();\n\
    \    let mut chars1 = s1.chars().collect::<Vec<char>>();\n    chars0.sort();\n\
    \    chars1.sort();\n    chars0 == chars1\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq6x3w097.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n\
    \    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n\
    \    s1_chars.sort();\n    s0_chars == s1_chars\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiovj9oyp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
