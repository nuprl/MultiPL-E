name: HumanEval_46_fib4
language: rs
results:
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..=n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp7to9d_pq.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n  \
    \      let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp0xpjr_so.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpe3c772sg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpsbl7af20.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n+1 {\n        let e = a + b + c + d;\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpjkfpp5qz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpq9s_fuz4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpud3pxzev.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmpg642l746.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n + 1 {\n        let temp = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = temp;\n    }\n    a + b + c + d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpm_yofn_i.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpftonv_in.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpj19n7nd_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpcmdd5r84.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    let mut i = 4;\n    while i <= n {\n        let temp = a + b + c + d;\n \
    \       a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i +=\
    \ 1;\n    }\n    return a + b + c + d;\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpqufnolp9.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp48jd44ta.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e;\n    for _ in 4..n + 1 {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpe0f32eai.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp3zv6ujm2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpauq2oyij.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        let e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n        i += 1;\n    }\n    d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpilq85sqh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    a\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmpsenl084d.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpodnwjd88.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 4..n + 1 {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp34emb9i6.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmphjc6d774.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n  \
    \      let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpftd6d0w2.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    let mut a = 0;\n    let mut b\
    \ = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut i = 3;\n    while\
    \ i <= n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n \
    \       c = d;\n        d = e;\n        i += 1;\n    }\n    a + b + c + d\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `4`', /tmp/tmpc4uu1ib8.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmppiy4yqzn.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpnto_77i_.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpviopmwlx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpl5clf5oh.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpkx7hsc6s.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmp39hg9ikv.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n+1 {\n        let e = a + b + c + d;\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    if n < 3 {\n        return n\
    \ * 2;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n  \
    \  let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp4rg1wglz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut f0 = 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3\
    \ = 0;\n    let mut f4 = 0;\n    for _ in 4..n + 1 {\n        f4 = f3 + f2 + f1\
    \ + f0;\n        f0 = f1;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n\
    \    }\n    f4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmp7pdzpw6i.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp1vnyalj0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpqfve6sr0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = e;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmp8_7l_pqa.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmpcufahjwq.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpf_mn_cs2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp3yp3q478.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 4..n+1 {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n+1 {\n        let e = a + b + c + d;\n        a = b;\n     \
    \   b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n  \
    \      let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpeui6wooz.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmpte0qjffb.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp45_gha6z.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp_ry7w5po.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n  \
    \      let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp86pj4nu7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4_n_minus_1\
    \ = 0;\n    let mut fib4_n_minus_2 = 0;\n    let mut fib4_n_minus_3 = 2;\n   \
    \ let mut fib4_n_minus_4 = 0;\n    let mut fib4_n = 0;\n    for _ in 4..n+1 {\n\
    \        fib4_n = fib4_n_minus_1 + fib4_n_minus_2 + fib4_n_minus_3 + fib4_n_minus_4;\n\
    \        fib4_n_minus_4 = fib4_n_minus_3;\n        fib4_n_minus_3 = fib4_n_minus_2;\n\
    \        fib4_n_minus_2 = fib4_n_minus_1;\n        fib4_n_minus_1 = fib4_n;\n\
    \    }\n    fib4_n\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmpb3m0eld5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmprsfcls2y.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 4..n + 1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n       \
    \ c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp7oqqqi5e.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpxh5cmz9g.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut fib4_n_minus_1 = 0;\n    let mut fib4_n_minus_2 = 0;\n    let mut fib4_n_minus_3\
    \ = 2;\n    let mut fib4_n_minus_4 = 0;\n    let mut fib4_n = 0;\n    for _ in\
    \ 4..n+1 {\n        fib4_n = fib4_n_minus_1 + fib4_n_minus_2 + fib4_n_minus_3\
    \ + fib4_n_minus_4;\n        fib4_n_minus_4 = fib4_n_minus_3;\n        fib4_n_minus_3\
    \ = fib4_n_minus_2;\n        fib4_n_minus_2 = fib4_n_minus_1;\n        fib4_n_minus_1\
    \ = fib4_n;\n    }\n    fib4_n\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmphhp8i628.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut fib4_n_minus_1 = 0;\n    let mut fib4_n_minus_2 = 0;\n    let mut\
    \ fib4_n_minus_3 = 2;\n    let mut fib4_n_minus_4 = 0;\n    let mut fib4_n = 0;\n\
    \    for _ in 4..n + 1 {\n        fib4_n = fib4_n_minus_1 + fib4_n_minus_2 + fib4_n_minus_3\
    \ + fib4_n_minus_4;\n        fib4_n_minus_4 = fib4_n_minus_3;\n        fib4_n_minus_3\
    \ = fib4_n_minus_2;\n        fib4_n_minus_2 = fib4_n_minus_1;\n        fib4_n_minus_1\
    \ = fib4_n;\n    }\n    fib4_n\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmp3a9uzs5e.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp0ve9iden.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpsarbswcp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpfeodtuwt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n\
    \ + 1 {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n    \
    \    c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpkf05huhr.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n  \
    \      let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp_ycz9xlo.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp1547jceo.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmprq_hbuyg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        return n * 2;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let\
    \ mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp1x3jnf4b.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n+1 {\n        let temp = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c\
    \ + d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp574dm363.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp4yw1kdsa.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmp8tm0yezh.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmptp6d_5if.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        let e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n        i += 1;\n    }\n    d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpd1w6wbk3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmp6veomoag.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // TODO: Implement\
    \ this function.\n    0\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpryb82dgf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = d;\n        d = c;\n        c = b +\
    \ c + d + e;\n        b = a;\n        a = d;\n    }\n    a\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `66`,\n right: `4`', /tmp/tmpurfbyufl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n    \
    \    return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c =\
    \ 2;\n    let mut d = 0;\n    for _ in 4..=n {\n        let e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 4..n+1 {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 3..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    let mut i = 4;\n    while i <= n {\n        let temp = a + b + c + d;\n \
    \       a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i +=\
    \ 1;\n    }\n    return a + b + c + d;\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpj0c35y1w.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpeo4_trpr.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpfj0s0e6q.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp0kyguee3.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp4x9qxbfa.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpjwmjoo5o.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpe6qe13su.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    let mut a = 0;\n    let mut b\
    \ = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpnp278k4z.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 4..n + 1 {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpoc8buehf.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmpcdfklfls.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpdhlot1ll.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n\
    \ + 1 {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n    \
    \    c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmppmpls90x.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 4..n+1 {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    if n\
    \ == 3 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n \
    \   let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n+1 {\n        let e =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ e;\n    }\n    return d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmpltw8zytw.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n+1\
    \ {\n        let tmp = a + b + c + d;\n        a = b;\n        b = c;\n      \
    \  c = d;\n        d = tmp;\n    }\n    return a + b + c + d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpvpnga6eh.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n+1 {\n        let temp = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c\
    \ + d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpg1o9q8yf.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp9p2cfnp_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    let mut a = 0;\n    let mut b\
    \ = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        let\
    \ e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n       \
    \ d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpo4ila5uj.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp8flouufq.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmp3s_xd7yc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmp108o40h6.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpl3w4nba2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        return n * 2;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let\
    \ mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpqjqxr6uh.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4: n must be >= 0\");\n    }\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n    \
    \    return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c =\
    \ 2;\n    let mut d = 0;\n    for _ in 4..n+1 {\n        let e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp1247knrd.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp2nj5wofu.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n+1 {\n        let temp = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c\
    \ + d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp1_kvc7d8.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp_x36rka9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp3rjttbmn.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpdniamltj.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmp2ydwxpu8.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut f0 =\
    \ 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3 = 0;\n    let mut\
    \ f4 = 0;\n    for _ in 4..n {\n        f4 = f0 + f1 + f2 + f3;\n        f0 =\
    \ f1;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n    }\n    f4\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp3_ws6zpc.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpy7ruoyxr.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpijqbuwwv.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmpxlavq2am.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmp21q7ixa6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 4..n + 1 {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpzj6qhucz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpyvp5j8uz.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpztl128jm.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpeoq8j8nk.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpry3rb862.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmpqglio_82.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4(n) is undefined for n < 0\");\n    }\n    let mut a = 0;\n\
    \    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        let tmp = a + b + c + d;\n        a = b;\n        b = c;\n      \
    \  c = d;\n        d = tmp;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpjih2jin7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmpge__o12e.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n  \
    \      let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpr0wanj5g.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpmkjrm0rj.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmprn23ttgn.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    let mut i = 4;\n    while i <= n {\n        let temp = a + b + c + d;\n \
    \       a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i +=\
    \ 1;\n    }\n    return a + b + c + d;\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmps7ibc52q.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpdlegux7g.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpjdcf2c11.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n  \
    \      let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpdr6u9hae.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        let tmp = a + b + c + d;\n        a = b;\n    \
    \    b = c;\n        c = d;\n        d = tmp;\n    }\n    a + b + c + d\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmphqzsakvt.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpddtl6xmh.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    let mut a = 0;\n    let mut b\
    \ = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n+1 {\n      \
    \  let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n  \
    \      d = e;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpnavtml2q.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 4..n+1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpw4ajqhko.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpz3vogxbi.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpcw2xwhyx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 4..n+1 {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp9_dbgpf8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"Negative numbers are not allowed\");\n    }\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmp8n0u_jcq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmptm7v6mox.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut f0 =\
    \ 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3 = 0;\n    let mut\
    \ f4 = 0;\n    for _ in 4..n {\n        f4 = f3 + f2 + f1 + f0;\n        f0 =\
    \ f1;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n    }\n    f4\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxhhwf52c.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpd6s1k6rs.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpihfgucre.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        let e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n        i += 1;\n    }\n    a\
    \ + b + c + d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `4`', /tmp/tmp25a1l7r1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpujevvhmt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpw3v7mdvm.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        let e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n        i += 1;\n    }\n    d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpqrqx9y_9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        return 0;\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n\
    \ == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n\
    \    if n == 3 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b\
    \ = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n+1 {\n      \
    \  let temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = temp;\n    }\n    return a + b + c + d;\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpcjlzek_4.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n+1 {\n        let e = a + b + c + d;\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = e;\n    }\n    d\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpux973ce5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpnwfcdaq5.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpklglg3v3.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpsvzkbpw2.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n+1\
    \ {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpljz5xy8u.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpw8c20eq0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        let e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n        i += 1;\n    }\n    a\
    \ + b + c + d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `4`', /tmp/tmp75w01nsb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut f0 =\
    \ 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3 = 0;\n    let mut\
    \ f4 = 0;\n    for _ in 4..n {\n        f4 = f3 + f2 + f1 + f0;\n        f0 =\
    \ f1;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n    }\n    f4\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpdsfgrn2e.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpx4quboc_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        let e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    if n\
    \ == 3 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n \
    \   let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n + 1 {\n        let e\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = e;\n    }\n    return d;\n}\n\nfn main() {\n    let candidate = fib4;\n  \
    \  assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 4..n + 1 {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = e;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 4..n + 1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n       \
    \ c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpeny8jm4f.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp3nd_ru6v.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n + 1 {\n        let temp = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = temp;\n    }\n    a + b + c + d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp9bg3jlrv.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpdfudqn0a.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        let e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n        i += 1;\n    }\n    d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp1z2xg__j.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 4..n+1 {\n        let tmp = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = tmp;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp5ehosees.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpzkz4i0ny.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmp52t60v03.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n\
    \ + 1 {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n    \
    \    c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp8svvjaj7.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib_nums\
    \ = vec![0, 0, 2, 0];\n    for i in 4..n + 1 {\n        fib_nums.push(fib_nums[i\
    \ as usize - 1] + fib_nums[i as usize - 2] + fib_nums[i as usize - 3] + fib_nums[i\
    \ as usize - 4]);\n    }\n    fib_nums[n as usize]\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpl1c_erw7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n+1 {\n        let e = a + b + c + d;\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp_cmm50pr.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..=n\
    \ {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = e;\n    }\n    return d;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n {\n  \
    \      let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpn4g2nz6b.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ e = 0;\n    for _ in 0..n {\n        e = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmp39jvd20q.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp1i0sv77d.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp8v1vmqze.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = e;\n    }\n    a + b + c + d\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmptwz1ytr3.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        let e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n        i += 1;\n    }\n    d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpt22napb5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4_n_minus_4\
    \ = 0;\n    let mut fib4_n_minus_3 = 0;\n    let mut fib4_n_minus_2 = 2;\n   \
    \ let mut fib4_n_minus_1 = 0;\n    let mut fib4_n = 0;\n    for _ in 4..n+1 {\n\
    \        fib4_n = fib4_n_minus_1 + fib4_n_minus_2 + fib4_n_minus_3 + fib4_n_minus_4;\n\
    \        fib4_n_minus_4 = fib4_n_minus_3;\n        fib4_n_minus_3 = fib4_n_minus_2;\n\
    \        fib4_n_minus_2 = fib4_n_minus_1;\n        fib4_n_minus_1 = fib4_n;\n\
    \    }\n    fib4_n\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpj0c0tfh_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative\");\n    }\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..=n {\n \
    \       let t = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = t;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpc63tpfsl.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut\
    \ i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp1xvp1eym.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpeq4jugg1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
