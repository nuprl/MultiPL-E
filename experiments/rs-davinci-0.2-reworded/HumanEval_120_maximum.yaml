name: HumanEval_120_maximum
language: rs
prompt: "/// Given a vector arr of integers and a positive integer k, return a sorted\
  \ vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n\
  /// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>>\
  \ maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
  \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
  \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
  \ k: isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
  \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
  \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n \
  \   assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
  \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
  \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0,\
  \ 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n\
  \    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
  \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
  \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
  }\n"
completions: ["    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::new();\n\
    \    for _ in 0..k {\n        let max = arr.iter().max().unwrap();\n        result.push(*max);\n\
    \        arr.remove_item(max);\n    }\n    result", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut max_idx = 0;\n    let mut max_val =\
    \ arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > max_val {\n      \
    \      max_idx = i;\n            max_val = arr[i];\n        }\n    }\n    arr.swap(0,\
    \ max_idx);\n    let mut i = 1;\n    while i < arr.len() && k > 0 {\n        let\
    \ mut max_idx = i;\n        let mut max_val = arr[i];\n        for j in i..arr.len()\
    \ {\n            if arr[j] > max_val {\n                max_idx = j;\n       \
    \         max_val = arr[j];\n            }\n        }\n        arr.swap(i, max_idx);\n\
    \        i += 1;\n        k -= 1;\n    }\n    arr.iter().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    let\
    \ mut j = arr.len() - 1;\n    while i < j {\n        let mut l = i;\n        let\
    \ mut r = j;\n        let pivot = arr[(l + r) / 2];\n        while l <= r {\n\
    \            while arr[l] > pivot {\n                l += 1;\n            }\n\
    \            while arr[r] < pivot {\n                r -= 1;\n            }\n\
    \            if l <= r {\n                arr.swap(l, r);\n                l +=\
    \ 1;\n                r -= 1;\n            }\n        }\n        if k <= r {\n\
    \            j = r;\n        } else if k >= l {\n            i = l;\n        \
    \    k -= l;\n        } else {\n            break;\n        }\n    }\n    arr[..k].to_vec()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut start = 0;\n \
    \   let mut end = arr.len() - 1;\n    while start < end {\n        let pivot =\
    \ partition(&mut arr, start, end);\n        if pivot == k {\n            break;\n\
    \        } else if pivot < k {\n            start = pivot + 1;\n        } else\
    \ {\n            end = pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", " \
    \   let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while\
    \ k > 0 {\n        let mut j = i;\n        while j < arr.len() - k + 1 {\n   \
    \         if arr[j] > arr[i] {\n                arr.swap(i, j);\n            }\n\
    \            j += 1;\n        }\n        i += 1;\n        k -= 1;\n    }\n   \
    \ arr[..i].to_vec()", "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n\
    \    for i in arr {\n        heap.push(i);\n        if heap.len() > k as usize\
    \ {\n            heap.pop();\n        }\n    }\n    while !heap.is_empty() {\n\
    \        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n   \
    \ result", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while k > 0\
    \ {\n        let mut max_i = i;\n        for j in i..arr.len() {\n           \
    \ if arr[j] > arr[max_i] {\n                max_i = j;\n            }\n      \
    \  }\n        arr.swap(i, max_i);\n        i += 1;\n        k -= 1;\n    }\n \
    \   arr[..i].to_vec()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut left = 0;\n    let mut\
    \ right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut\
    \ arr, left, right);\n        if pivot == k {\n            break;\n        } else\
    \ if pivot < k {\n            left = pivot + 1;\n        } else {\n          \
    \  right = pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut max_idx = 0;\n    while\
    \ k > 0 {\n        max_idx = 0;\n        for i in 1..k {\n            if arr[i]\
    \ > arr[max_idx] {\n                max_idx = i;\n            }\n        }\n \
    \       arr.swap(max_idx, k - 1);\n        k -= 1;\n    }\n    arr[..k as usize].to_vec()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while\
    \ k > 0 {\n        let mut j = i;\n        for x in i + 1..arr.len() {\n     \
    \       if arr[x] > arr[j] {\n                j = x;\n            }\n        }\n\
    \        arr.swap(i, j);\n        i += 1;\n        k -= 1;\n    }\n    arr[..i].to_vec()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut res = Vec::new();\n\
    \    for i in 0..k {\n        let mut max = i;\n        for j in i+1..arr.len()\
    \ {\n            if arr[j] > arr[max] {\n                max = j;\n          \
    \  }\n        }\n        res.push(arr[max]);\n        arr.swap(i, max);\n    }\n\
    \    res", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut result = Vec::with_capacity(k as\
    \ usize);\n    let mut heap = BinaryHeap::new();\n    for i in arr {\n       \
    \ heap.push(i);\n        if heap.len() > k as usize {\n            heap.pop();\n\
    \        }\n    }\n    while let Some(i) = heap.pop() {\n        result.push(i);\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        let p = partition(&mut arr, i, j);\n        if p ==\
    \ k {\n            break;\n        } else if p < k {\n            i = p + 1;\n\
    \        } else {\n            j = p - 1;\n            k = k - (p - i);\n    \
    \    }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    let mut k\
    \ = k as usize;\n    arr.sort();\n    arr.reverse();\n    arr.truncate(k);\n \
    \   arr", "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut result\
    \ = Vec::new();\n    let mut i = 0;\n    while i < arr.len() {\n        let mut\
    \ j = i + 1;\n        while j < arr.len() {\n            if arr[i] < arr[j] {\n\
    \                arr.swap(i, j);\n            }\n            j += 1;\n       \
    \ }\n        if k > 0 {\n            result.push(arr[i]);\n            k -= 1;\n\
    \        }\n        i += 1;\n    }\n    result", "    let mut arr = arr;\n   \
    \ arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut max_heap = BinaryHeap::new();\n    for i\
    \ in 0..k {\n        max_heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len()\
    \ as isize {\n        if arr[i as usize] > max_heap.peek().unwrap() {\n      \
    \      max_heap.pop();\n            max_heap.push(arr[i as usize]);\n        }\n\
    \    }\n    let mut result = Vec::new();\n    while !max_heap.is_empty() {\n \
    \       result.push(max_heap.pop().unwrap());\n    }\n    result.reverse();\n\
    \    result", "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut\
    \ max_idx = 0;\n    let mut max_val = arr[0];\n    let mut i = 0;\n    while k\
    \ > 0 {\n        for j in i..arr.len() {\n            if arr[j] > max_val {\n\
    \                max_idx = j;\n                max_val = arr[j];\n           \
    \ }\n        }\n        arr.swap(i, max_idx);\n        i += 1;\n        k -= 1;\n\
    \        max_idx = i;\n        max_val = arr[i];\n    }\n    arr[..i].to_vec()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while\
    \ k > 0 {\n        let mut max_i = i;\n        for j in i + 1..arr.len() {\n \
    \           if arr[j] > arr[max_i] {\n                max_i = j;\n           \
    \ }\n        }\n        arr.swap(i, max_i);\n        i += 1;\n        k -= 1;\n\
    \    }\n    arr[..i].to_vec()", "    let mut arr = arr;\n    let mut k = k as\
    \ usize;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while\
    \ left < right {\n        let pivot = partition(&mut arr, left, right);\n    \
    \    if pivot == k {\n            break;\n        } else if pivot < k {\n    \
    \        left = pivot + 1;\n        } else {\n            right = pivot - 1;\n\
    \        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.into_iter().rev().take(k as usize).collect()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut result = Vec::with_capacity(k);\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n   \
    \     while j < arr.len() && arr[j] > arr[i] {\n            j += 1;\n        }\n\
    \        if j - i >= k {\n            result.push(arr[i]);\n            k -= 1;\n\
    \        }\n        i = j;\n    }\n    result", "    let mut arr = arr;\n    let\
    \ mut k = k as usize;\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len()\
    \ {\n            if arr[i] < arr[j] {\n                arr.swap(i, j);\n     \
    \       }\n            j += 1;\n        }\n        if k > 0 {\n            result.push(arr[i]);\n\
    \            k -= 1;\n        }\n        i += 1;\n    }\n    result", "    let\
    \ mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k\
    \ as usize).collect()", "    let mut res = Vec::new();\n    let mut arr = arr;\n\
    \    arr.sort();\n    for i in 0..k {\n        res.push(arr[arr.len() - 1 - i\
    \ as usize]);\n    }\n    res", "    let mut arr = arr;\n    let mut k = k as\
    \ usize;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while\
    \ left < right {\n        let pivot = partition(&mut arr, left, right);\n    \
    \    if pivot == k {\n            break;\n        } else if pivot < k {\n    \
    \        left = pivot + 1;\n        } else {\n            right = pivot - 1;\n\
    \        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut result = vec![];\n    let mut max_heap =\
    \ BinaryHeap::new();\n    for i in 0..k {\n        max_heap.push(arr[i as usize]);\n\
    \    }\n    for i in k..arr.len() as isize {\n        if arr[i as usize] > max_heap.peek().unwrap()\
    \ {\n            max_heap.pop();\n            max_heap.push(arr[i as usize]);\n\
    \        }\n    }\n    while !max_heap.is_empty() {\n        result.push(max_heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.into_iter().rev().take(k as usize).collect()", "    let mut arr = arr;\n\
    \    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    let\
    \ mut j = arr.len() - 1;\n    while i < j {\n        let p = partition(&mut arr,\
    \ i, j);\n        if p == k {\n            break;\n        } else if p < k {\n\
    \            i = p + 1;\n        } else {\n            j = p - 1;\n          \
    \  k = k - (p - i);\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr\
    \ = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n \
    \       while j < arr.len() {\n            if arr[i] < arr[j] {\n            \
    \    arr.swap(i, j);\n            }\n            j += 1;\n        }\n        if\
    \ k > 0 {\n            result.push(arr[i]);\n            k -= 1;\n        }\n\
    \        i += 1;\n    }\n    result", "    let mut arr = arr;\n    let mut k =\
    \ k as usize;\n    let mut i = 0;\n    while k > 0 {\n        let mut j = i;\n\
    \        while j < arr.len() - k + 1 {\n            if arr[j] > arr[i] {\n   \
    \             arr.swap(i, j);\n            }\n            j += 1;\n        }\n\
    \        i += 1;\n        k -= 1;\n    }\n    arr[..i].to_vec()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut left = 0;\n    let mut\
    \ right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut\
    \ arr, left, right);\n        if pivot == k {\n            break;\n        } else\
    \ if pivot < k {\n            left = pivot + 1;\n        } else {\n          \
    \  right = pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut start = 0;\n    let mut\
    \ end = arr.len() - 1;\n    while start < end {\n        let pivot = partition(&mut\
    \ arr, start, end);\n        if pivot == k {\n            break;\n        } else\
    \ if pivot < k {\n            start = pivot + 1;\n        } else {\n         \
    \   end = pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut max_heap\
    \ = BinaryHeap::new();\n    for i in 0..k {\n        max_heap.push(arr[i as usize]);\n\
    \    }\n    for i in k..arr.len() as isize {\n        if arr[i as usize] > max_heap.peek().unwrap()\
    \ {\n            max_heap.pop();\n            max_heap.push(arr[i as usize]);\n\
    \        }\n    }\n    let mut result = Vec::new();\n    while !max_heap.is_empty()\
    \ {\n        result.push(max_heap.pop().unwrap());\n    }\n    result.reverse();\n\
    \    result", "    let mut arr = arr;\n    let mut k = k as usize;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.truncate(k);\n    arr", "    let mut arr = arr;\n\
    \    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::new();\n\
    \    while k > 0 {\n        let max = arr.iter().max().unwrap();\n        result.push(*max);\n\
    \        arr.retain(|&x| x != *max);\n        k -= 1;\n    }\n    result", " \
    \   let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        let pivot = partition(&mut arr, i, j);\n        if\
    \ pivot < k {\n            i = pivot + 1;\n        } else if pivot > k {\n   \
    \         j = pivot - 1;\n        } else {\n            break;\n        }\n  \
    \  }\n    arr.iter().take(k).cloned().collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        let p = partition(&mut arr, i, j);\n        if p ==\
    \ k {\n            break;\n        } else if p < k {\n            i = p + 1;\n\
    \        } else {\n            j = p - 1;\n            k = k - (p - i);\n    \
    \    }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    let mut k\
    \ = k as usize;\n    let mut result = Vec::new();\n    while k > 0 {\n       \
    \ let max = arr.iter().max().unwrap();\n        result.push(*max);\n        arr.retain(|&x|\
    \ x != *max);\n        k -= 1;\n    }\n    result", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut i = 0;\n    let mut j = arr.len() -\
    \ 1;\n    while i < j {\n        let p = partition(&mut arr, i, j);\n        if\
    \ p == k {\n            break;\n        } else if p < k {\n            i = p +\
    \ 1;\n        } else {\n            j = p - 1;\n            k = k - (p - i);\n\
    \        }\n    }\n    arr[..k].to_vec()", "    let mut res = vec![];\n    let\
    \ mut arr = arr;\n    arr.sort();\n    for i in 0..k {\n        res.push(arr[arr.len()\
    \ - 1 - i as usize]);\n    }\n    res", "    let mut arr = arr;\n    let mut k\
    \ = k as usize;\n    let mut result = Vec::new();\n    let mut i = 0;\n    while\
    \ i < arr.len() && k > 0 {\n        let mut j = i + 1;\n        while j < arr.len()\
    \ && arr[j] > arr[i] {\n            j += 1;\n        }\n        if j < arr.len()\
    \ {\n            result.push(arr[i]);\n            arr.remove(i);\n          \
    \  k -= 1;\n        } else {\n            i += 1;\n        }\n    }\n    result",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        let pivot = partition(&mut arr, left, right);\n        if pivot ==\
    \ k {\n            break;\n        } else if pivot < k {\n            left = pivot\
    \ + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n \
    \   arr[..k].to_vec()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    while k > 0 {\n        let mut max_index = i;\n     \
    \   for j in i..arr.len() {\n            if arr[j] > arr[max_index] {\n      \
    \          max_index = j;\n            }\n        }\n        arr.swap(i, max_index);\n\
    \        i += 1;\n        k -= 1;\n    }\n    arr[0..i].to_vec()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    let mut j =\
    \ arr.len() - 1;\n    while i < j {\n        let p = partition(&mut arr, i, j);\n\
    \        if p == k {\n            break;\n        } else if p < k {\n        \
    \    i = p + 1;\n        } else {\n            j = p - 1;\n            k = k -\
    \ (p - i + 1);\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut start = 0;\n    let mut end = arr.len()\
    \ - 1;\n    while start < end {\n        let pivot = partition(&mut arr, start,\
    \ end);\n        if pivot == k {\n            break;\n        } else if pivot\
    \ < k {\n            start = pivot + 1;\n        } else {\n            end = pivot\
    \ - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut heap = BinaryHeap::new();\n    for i in 0..k\
    \ {\n        heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as\
    \ isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n            heap.pop();\n\
    \            heap.push(arr[i as usize]);\n        }\n    }\n    heap.into_sorted_vec()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::with_capacity(k);\n\
    \    for _ in 0..k {\n        let max = arr.iter().max().unwrap();\n        result.push(*max);\n\
    \        arr.remove_item(max);\n    }\n    result", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut i = 0;\n    while k > 0 {\n        let\
    \ mut max_index = i;\n        for j in i + 1..arr.len() {\n            if arr[j]\
    \ > arr[max_index] {\n                max_index = j;\n            }\n        }\n\
    \        arr.swap(i, max_index);\n        i += 1;\n        k -= 1;\n    }\n  \
    \  arr[..i].to_vec()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    arr.sort();\n    arr.reverse();\n    arr.truncate(k);\n    arr", "    let\
    \ mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while k\
    \ > 0 {\n        let mut max_i = i;\n        for j in i + 1..arr.len() {\n   \
    \         if arr[j] > arr[max_i] {\n                max_i = j;\n            }\n\
    \        }\n        arr.swap(i, max_i);\n        i += 1;\n        k -= 1;\n  \
    \  }\n    arr[0..i].to_vec()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut result = Vec::new();\n    while k > 0 {\n        let max = arr.iter().max().unwrap();\n\
    \        result.push(*max);\n        arr.retain(|&x| x != *max);\n        k -=\
    \ 1;\n    }\n    result", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut result = Vec::with_capacity(k);\n    let mut i = 0;\n    while i\
    \ < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() && arr[j]\
    \ > arr[i] {\n            j += 1;\n        }\n        if j - i >= k {\n      \
    \      result.push(arr[i]);\n            k -= 1;\n        }\n        i = j;\n\
    \    }\n    result", "    let mut arr = arr;\n    let mut k = k as usize;\n  \
    \  let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right\
    \ {\n        let pivot = partition(&mut arr, left, right);\n        if pivot ==\
    \ k {\n            break;\n        } else if pivot < k {\n            left = pivot\
    \ + 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n \
    \   arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   let p = partition(&mut arr, i, j);\n        if p == k {\n            break;\n\
    \        } else if p < k {\n            i = p + 1;\n        } else {\n       \
    \     j = p - 1;\n            k = k - (p - i);\n        }\n    }\n    arr[..k].to_vec()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut res = Vec::new();\n\
    \    while k > 0 {\n        let mut max = arr[0];\n        let mut max_idx = 0;\n\
    \        for (i, &x) in arr.iter().enumerate() {\n            if x > max {\n \
    \               max = x;\n                max_idx = i;\n            }\n      \
    \  }\n        res.push(max);\n        arr.remove(max_idx);\n        k -= 1;\n\
    \    }\n    res", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut result = Vec::with_capacity(k\
    \ as usize);\n    for i in 0..k {\n        result.push(arr[i as usize]);\n   \
    \ }\n    result.sort();\n    for i in k..arr.len() as isize {\n        if arr[i\
    \ as usize] > result[0] {\n            result.remove(0);\n            result.push(arr[i\
    \ as usize]);\n            result.sort();\n        }\n    }\n    result", "  \
    \  let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    while k > 0 {\n        let mut max_idx = i;\n       \
    \ for j in i + 1..arr.len() {\n            if arr[j] > arr[max_idx] {\n      \
    \          max_idx = j;\n            }\n        }\n        arr.swap(i, max_idx);\n\
    \        i += 1;\n        k -= 1;\n    }\n    arr[..k as usize].to_vec()", " \
    \   let mut arr = arr;\n    let mut k = k as usize;\n    let mut max_idx = 0;\n\
    \    while k > 0 {\n        max_idx = 0;\n        for i in 1..k {\n          \
    \  if arr[i] > arr[max_idx] {\n                max_idx = i;\n            }\n \
    \       }\n        arr.swap(max_idx, k - 1);\n        k -= 1;\n    }\n    arr.truncate(k\
    \ as usize);\n    arr", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    while k > 0 {\n        let mut max_index = i;\n     \
    \   for j in i + 1..arr.len() {\n            if arr[j] > arr[max_index] {\n  \
    \              max_index = j;\n            }\n        }\n        arr.swap(i, max_index);\n\
    \        i += 1;\n        k -= 1;\n    }\n    arr[..i].to_vec()", "    let mut\
    \ arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut left = 0;\n    let mut right = arr.len()\
    \ - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left,\
    \ right);\n        if pivot == k {\n            break;\n        } else if pivot\
    \ < k {\n            left = pivot + 1;\n        } else {\n            right =\
    \ pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut res = Vec::with_capacity(k);\n    let\
    \ mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n        while\
    \ j < arr.len() && arr[j] > arr[i] {\n            j += 1;\n        }\n       \
    \ if j - i >= k {\n            res.push(arr[i]);\n            k -= 1;\n      \
    \      if k == 0 {\n                break;\n            }\n        }\n       \
    \ i = j;\n    }\n    res", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut left = 0;\n    let mut right = arr.len()\
    \ - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left,\
    \ right);\n        if pivot == k {\n            break;\n        } else if pivot\
    \ < k {\n            left = pivot + 1;\n        } else {\n            right =\
    \ pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut result =\
    \ Vec::with_capacity(k as usize);\n    let mut arr = arr;\n    arr.sort();\n \
    \   for i in 0..k {\n        result.push(arr[(arr.len() - 1 - i as usize) as usize]);\n\
    \    }\n    result", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()", "    let\
    \ mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while k\
    \ > 0 {\n        let mut max_index = i;\n        for j in i + 1..arr.len() {\n\
    \            if arr[j] > arr[max_index] {\n                max_index = j;\n  \
    \          }\n        }\n        arr.swap(i, max_index);\n        i += 1;\n  \
    \      k -= 1;\n    }\n    arr[..k as usize].to_vec()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut result = Vec::new();\n    let mut i\
    \ = 0;\n    while i < arr.len() && k > 0 {\n        let mut j = i + 1;\n     \
    \   while j < arr.len() && arr[j] > arr[i] {\n            j += 1;\n        }\n\
    \        if j == arr.len() {\n            result.push(arr[i]);\n            k\
    \ -= 1;\n        } else {\n            arr.swap(i, j);\n        }\n        i +=\
    \ 1;\n    }\n    result", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut i = 0;\n    while k > 0 {\n        let\
    \ mut j = i;\n        while j < arr.len() - k + 1 {\n            if arr[j] > arr[i]\
    \ {\n                arr.swap(i, j);\n            }\n            j += 1;\n   \
    \     }\n        i += 1;\n        k -= 1;\n    }\n    arr[..i].to_vec()", "  \
    \  let mut arr = arr;\n    let mut k = k as usize;\n    let mut left = 0;\n  \
    \  let mut right = arr.len() - 1;\n    while left < right {\n        let pivot\
    \ = partition(&mut arr, left, right);\n        if pivot == k {\n            break;\n\
    \        } else if pivot < k {\n            left = pivot + 1;\n        } else\
    \ {\n            right = pivot - 1;\n        }\n    }\n    arr[..k].to_vec()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::with_capacity(k);\n\
    \    for _ in 0..k {\n        let mut max = arr[0];\n        let mut max_index\
    \ = 0;\n        for (i, &x) in arr.iter().enumerate() {\n            if x > max\
    \ {\n                max = x;\n                max_index = i;\n            }\n\
    \        }\n        result.push(max);\n        arr.remove(max_index);\n    }\n\
    \    result", "    let mut heap = BinaryHeap::new();\n    for i in 0..k {\n  \
    \      heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as isize\
    \ {\n        if arr[i as usize] > heap.peek().unwrap() {\n            heap.pop();\n\
    \            heap.push(arr[i as usize]);\n        }\n    }\n    let mut res =\
    \ vec![];\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n\
    \    }\n    res.reverse();\n    res", "    let mut arr = arr;\n    let mut k =\
    \ k as usize;\n    let mut result = Vec::new();\n    let mut i = 0;\n    while\
    \ k > 0 {\n        let mut max = i;\n        for j in i + 1..arr.len() {\n   \
    \         if arr[j] > arr[max] {\n                max = j;\n            }\n  \
    \      }\n        result.push(arr[max]);\n        arr.remove(max);\n        k\
    \ -= 1;\n    }\n    result", "    let mut res = vec![];\n    let mut arr = arr;\n\
    \    arr.sort();\n    for i in 0..k {\n        res.push(arr[arr.len() - 1 - i\
    \ as usize]);\n    }\n    res", "    let mut arr = arr;\n    arr.sort();\n   \
    \ arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let mut\
    \ arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut res = Vec::with_capacity(k);\n\
    \    for i in 0..k {\n        let mut max_index = i;\n        for j in i+1..arr.len()\
    \ {\n            if arr[j] > arr[max_index] {\n                max_index = j;\n\
    \            }\n        }\n        res.push(arr[max_index]);\n        arr.swap(i,\
    \ max_index);\n    }\n    res", "    let mut arr = arr;\n    let mut k = k as\
    \ usize;\n    let mut result = Vec::new();\n    let mut i = 0;\n    while k >\
    \ 0 {\n        let mut max = i;\n        for j in i + 1..arr.len() {\n       \
    \     if arr[j] > arr[max] {\n                max = j;\n            }\n      \
    \  }\n        result.push(arr[max]);\n        arr.remove(max);\n        k -= 1;\n\
    \    }\n    result", "    let mut arr = arr;\n    let mut k = k as usize;\n  \
    \  let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n       \
    \ let p = partition(&mut arr, i, j);\n        if p == k {\n            break;\n\
    \        } else if p < k {\n            i = p + 1;\n        } else {\n       \
    \     j = p - 1;\n            k = k - (p - i);\n        }\n    }\n    arr[..k].to_vec()",
  "    let mut res = Vec::new();\n    let mut arr = arr;\n    arr.sort();\n    for\
    \ i in 0..k {\n        res.push(arr[arr.len() - 1 - i as usize]);\n    }\n   \
    \ res", "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut left\
    \ = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n       \
    \ let pivot = partition(&mut arr, left, right);\n        if pivot < k {\n    \
    \        left = pivot + 1;\n        } else if pivot > k {\n            right =\
    \ pivot - 1;\n        } else {\n            break;\n        }\n    }\n    arr[..k].to_vec()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut i = 0;\n    while k > 0 {\n        let\
    \ mut max_i = i;\n        for j in i + 1..arr.len() {\n            if arr[j] >\
    \ arr[max_i] {\n                max_i = j;\n            }\n        }\n       \
    \ arr.swap(i, max_i);\n        i += 1;\n        k -= 1;\n    }\n    arr[..i].to_vec()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while\
    \ k > 0 {\n        let mut j = i;\n        for m in i + 1..arr.len() {\n     \
    \       if arr[m] > arr[j] {\n                j = m;\n            }\n        }\n\
    \        arr.swap(i, j);\n        i += 1;\n        k -= 1;\n    }\n    arr[..i].to_vec()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut i = 0;\n    while k > 0 {\n        let\
    \ mut max_i = i;\n        for j in i..arr.len() {\n            if arr[j] > arr[max_i]\
    \ {\n                max_i = j;\n            }\n        }\n        arr.swap(i,\
    \ max_i);\n        i += 1;\n        k -= 1;\n    }\n    arr[..i].to_vec()", " \
    \   let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    let\
    \ mut j = arr.len() - 1;\n    while i < j {\n        let p = partition(&mut arr,\
    \ i, j);\n        if p == k {\n            break;\n        } else if p < k {\n\
    \            i = p + 1;\n        } else {\n            j = p - 1;\n          \
    \  k = k - (p - i + 1);\n        }\n    }\n    arr[..k].to_vec()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::new();\n\
    \    if arr.len() < k {\n        return result;\n    }\n    arr.sort();\n    for\
    \ i in (arr.len() - k)..arr.len() {\n        result.push(arr[i]);\n    }\n   \
    \ result", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    while k > 0 {\n        let mut max_i = i;\n        for\
    \ j in i + 1..arr.len() {\n            if arr[j] > arr[max_i] {\n            \
    \    max_i = j;\n            }\n        }\n        arr.swap(i, max_i);\n     \
    \   i += 1;\n        k -= 1;\n    }\n    arr[..k as usize].to_vec()", "    let\
    \ mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::new();\n\
    \    for _ in 0..k {\n        let max = arr.iter().max().unwrap();\n        result.push(*max);\n\
    \        arr.remove_item(max);\n        k -= 1;\n    }\n    result", "    let\
    \ mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::new();\n\
    \    while k > 0 {\n        let mut max = arr[0];\n        let mut max_index =\
    \ 0;\n        for (i, &v) in arr.iter().enumerate() {\n            if v > max\
    \ {\n                max = v;\n                max_index = i;\n            }\n\
    \        }\n        result.push(max);\n        arr.remove(max_index);\n      \
    \  k -= 1;\n    }\n    result", "    let mut arr = arr;\n    arr.sort();\n   \
    \ arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let mut\
    \ result = Vec::with_capacity(k as usize);\n    let mut heap = BinaryHeap::new();\n\
    \    for i in arr {\n        heap.push(i);\n        if heap.len() > k as usize\
    \ {\n            heap.pop();\n        }\n    }\n    while let Some(i) = heap.pop()\
    \ {\n        result.push(i);\n    }\n    result.reverse();\n    result", "   \
    \ let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while\
    \ k > 0 {\n        let mut max_i = i;\n        for j in i + 1..arr.len() {\n \
    \           if arr[j] > arr[max_i] {\n                max_i = j;\n           \
    \ }\n        }\n        arr.swap(i, max_i);\n        i += 1;\n        k -= 1;\n\
    \    }\n    arr[..i].to_vec()", "    let mut arr = arr;\n    let mut k = k as\
    \ usize;\n    let mut result = Vec::new();\n    for _ in 0..k {\n        let max\
    \ = arr.iter().max().unwrap();\n        result.push(*max);\n        arr.remove_item(max);\n\
    \    }\n    result", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut left = 0;\n    let mut\
    \ right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut\
    \ arr, left, right);\n        if pivot == k {\n            break;\n        } else\
    \ if pivot < k {\n            left = pivot + 1;\n        } else {\n          \
    \  right = pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut left = 0;\n    let mut\
    \ right = arr.len() - 1;\n    while left < right {\n        let pivot = partition(&mut\
    \ arr, left, right);\n        if pivot == k {\n            break;\n        } else\
    \ if pivot < k {\n            left = pivot + 1;\n        } else {\n          \
    \  right = pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut\
    \ arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()", " \
    \   let mut result = vec![];\n    let mut arr = arr;\n    arr.sort();\n    for\
    \ i in 0..k {\n        result.push(arr[arr.len() - 1 - i as usize]);\n    }\n\
    \    result", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n \
    \   arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n   \
    \ arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut res = Vec::new();\n\
    \    arr.sort();\n    while k > 0 {\n        res.push(arr.pop().unwrap());\n \
    \       k -= 1;\n    }\n    res", "    let mut arr = arr;\n    arr.sort();\n \
    \   arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::with_capacity(k);\n\
    \    for _ in 0..k {\n        let max = arr.iter().max().unwrap();\n        result.push(*max);\n\
    \        arr.remove_item(max);\n    }\n    result", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut start = 0;\n    let mut end = arr.len()\
    \ - 1;\n    while start < end {\n        let pivot = partition(&mut arr, start,\
    \ end);\n        if pivot == k {\n            break;\n        } else if pivot\
    \ < k {\n            start = pivot + 1;\n        } else {\n            end = pivot\
    \ - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n\
    \    while i < j {\n        let p = partition(&mut arr, i, j);\n        if p ==\
    \ k {\n            break;\n        } else if p < k {\n            i = p + 1;\n\
    \        } else {\n            j = p - 1;\n            k = k - (p - i + 1);\n\
    \        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    let mut result = Vec::new();\n    for _ in 0..k {\n        let max\
    \ = arr.iter().max().unwrap();\n        result.push(*max);\n        arr.remove(arr.iter().position(|&x|\
    \ x == *max).unwrap());\n    }\n    result", "    let mut arr = arr;\n    let\
    \ mut k = k as usize;\n    let mut result = Vec::new();\n    while k > 0 {\n \
    \       let max = arr.iter().max().unwrap();\n        result.push(*max);\n   \
    \     arr.retain(|&x| x != *max);\n        k -= 1;\n    }\n    result", "    let\
    \ mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    while k > 0 {\n        let mut j = i;\n        while\
    \ j < arr.len() - k + 1 {\n            if arr[j] > arr[i] {\n                arr.swap(i,\
    \ j);\n            }\n            j += 1;\n        }\n        i += 1;\n      \
    \  k -= 1;\n    }\n    arr[..i].to_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    let mut j = arr.len()\
    \ - 1;\n    while i < j {\n        let pivot = partition(&mut arr, i, j);\n  \
    \      if pivot == k {\n            break;\n        } else if pivot < k {\n  \
    \          i = pivot + 1;\n            k -= pivot + 1;\n        } else {\n   \
    \         j = pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut\
    \ arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if result.len() == k {\n\
    \            break;\n        }\n        let mut j = i + 1;\n        while j <\
    \ arr.len() {\n            if arr[i] < arr[j] {\n                arr.swap(i, j);\n\
    \            }\n            j += 1;\n        }\n        result.push(arr[i]);\n\
    \        i += 1;\n    }\n    result", "    let mut arr = arr;\n    let mut k =\
    \ k as usize;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n   \
    \ while left < right {\n        let pivot = partition(&mut arr, left, right);\n\
    \        if pivot == k {\n            break;\n        } else if pivot < k {\n\
    \            left = pivot + 1;\n        } else {\n            right = pivot -\
    \ 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut res = Vec::new();\n\
    \    let mut arr = arr;\n    arr.sort();\n    for i in 0..k {\n        res.push(arr[arr.len()\
    \ - 1 - i as usize]);\n    }\n    res", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while k\
    \ > 0 {\n        let mut j = i;\n        while j < arr.len() - k + 1 {\n     \
    \       if arr[j] > arr[i] {\n                arr.swap(i, j);\n            }\n\
    \            j += 1;\n        }\n        i += 1;\n        k -= 1;\n    }\n   \
    \ arr[..i].to_vec()", "    let mut arr = arr;\n    let mut k = k as usize;\n \
    \   let mut i = 0;\n    while k > 0 {\n        let mut max_index = i;\n      \
    \  for j in i + 1..arr.len() {\n            if arr[j] > arr[max_index] {\n   \
    \             max_index = j;\n            }\n        }\n        arr.swap(i, max_index);\n\
    \        i += 1;\n        k -= 1;\n    }\n    arr[..i].to_vec()", "    let mut\
    \ arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut res = Vec::new();\n    let mut i = 0;\n\
    \    while i < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len()\
    \ && arr[j] > arr[i] {\n            j += 1;\n        }\n        if j - i >= k\
    \ {\n            res.push(arr[i]);\n            k -= 1;\n        }\n        i\
    \ = j;\n    }\n    res", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    while k > 0 {\n        let mut max_i = i;\n        for\
    \ j in i + 1..arr.len() {\n            if arr[j] > arr[max_i] {\n            \
    \    max_i = j;\n            }\n        }\n        arr.swap(i, max_i);\n     \
    \   i += 1;\n        k -= 1;\n    }\n    arr[..k as usize].to_vec()", "    let\
    \ mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::with_capacity(k);\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n \
    \       while j < arr.len() && arr[j] > arr[i] {\n            j += 1;\n      \
    \  }\n        if j < arr.len() {\n            arr.swap(i, j);\n        }\n   \
    \     if k > 0 {\n            result.push(arr[i]);\n            k -= 1;\n    \
    \    }\n        i += 1;\n    }\n    result", "    let mut arr = arr;\n    let\
    \ mut k = k as usize;\n    let mut start = 0;\n    let mut end = arr.len() - 1;\n\
    \    while start < end {\n        let pivot = partition(&mut arr, start, end);\n\
    \        if pivot == k {\n            break;\n        } else if pivot < k {\n\
    \            start = pivot + 1;\n        } else {\n            end = pivot - 1;\n\
    \        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    let mut\
    \ k = k as usize;\n    let mut res = Vec::new();\n    let mut i = 0;\n    while\
    \ k > 0 {\n        let mut max = i;\n        for j in i + 1..arr.len() {\n   \
    \         if arr[j] > arr[max] {\n                max = j;\n            }\n  \
    \      }\n        res.push(arr[max]);\n        arr.remove(max);\n        k -=\
    \ 1;\n    }\n    res", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    let\
    \ mut j = arr.len() - 1;\n    while i < j {\n        let pivot = partition(&mut\
    \ arr, i, j);\n        if pivot == k {\n            break;\n        } else if\
    \ pivot < k {\n            i = pivot + 1;\n            k -= pivot + 1;\n     \
    \   } else {\n            j = pivot - 1;\n        }\n    }\n    arr[..k].to_vec()",
  "    let mut result = Vec::new();\n    let mut arr = arr;\n    arr.sort();\n   \
    \ for i in 0..k {\n        result.push(arr[arr.len() - 1 - i as usize]);\n   \
    \ }\n    result", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut res = arr;\n    res.sort();\n    res.reverse();\n    res.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n     \
    \   let p = partition(&mut arr, i, j);\n        if p == k {\n            break;\n\
    \        } else if p < k {\n            i = p + 1;\n        } else {\n       \
    \     j = p - 1;\n            k = k - 1;\n        }\n    }\n    arr[..k].to_vec()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::new();\n\
    \    if arr.len() == 0 {\n        return result;\n    }\n    if arr.len() <= k\
    \ {\n        arr.sort();\n        return arr;\n    }\n    let mut left = 0;\n\
    \    let mut right = arr.len() - 1;\n    while left <= right {\n        let pivot\
    \ = partition(&mut arr, left, right);\n        if pivot == k {\n            break;\n\
    \        } else if pivot < k {\n            left = pivot + 1;\n            k -=\
    \ pivot + 1;\n        } else {\n            right = pivot - 1;\n        }\n  \
    \  }\n    for i in 0..k {\n        result.push(arr[i]);\n    }\n    result", " \
    \   let mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while\
    \ k > 0 {\n        let mut j = i;\n        for x in i + 1..arr.len() {\n     \
    \       if arr[x] > arr[j] {\n                j = x;\n            }\n        }\n\
    \        arr.swap(i, j);\n        i += 1;\n        k -= 1;\n    }\n    arr[..i].to_vec()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut result = Vec::new();\n    let mut i =\
    \ 0;\n    while i < arr.len() && k > 0 {\n        let mut j = i + 1;\n       \
    \ while j < arr.len() && arr[j] > arr[i] {\n            j += 1;\n        }\n \
    \       result.push(arr[i]);\n        arr.remove(i);\n        k -= 1;\n    }\n\
    \    result", "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut\
    \ left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n  \
    \      let pivot = partition(&mut arr, left, right);\n        if pivot == k {\n\
    \            break;\n        } else if pivot < k {\n            left = pivot +\
    \ 1;\n        } else {\n            right = pivot - 1;\n        }\n    }\n   \
    \ arr[..k].to_vec()", "    let mut arr = arr;\n    let mut k = k as usize;\n \
    \   let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n      \
    \  let pivot = partition(&mut arr, i, j);\n        if pivot == k {\n         \
    \   break;\n        } else if pivot < k {\n            i = pivot + 1;\n      \
    \  } else {\n            j = pivot - 1;\n            k = k - (pivot - i);\n  \
    \      }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n \
    \       while j < arr.len() {\n            if arr[i] < arr[j] {\n            \
    \    arr.swap(i, j);\n            }\n            j += 1;\n        }\n        if\
    \ k > 0 {\n            result.push(arr[i]);\n            k -= 1;\n        }\n\
    \        i += 1;\n    }\n    result", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()"]
stop_tokens:
- "\n}"
