name: HumanEval_87_get_row
language: rs
prompt: "/// You are given a 2 dimensional data, as a nested vectors,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the vector,\n\
  /// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1, 2, 3, 4, 5,\
  \ 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0, 0), (1,\
  \ 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// vec![]\n/// >>> get_row(vec![vec![],\
  \ vec![1], vec![1, 2, 3]], 3)\n/// vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>,\
  \ x: isize) -> Vec<(isize, isize)> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1,\
  \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0,\
  \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2,\
  \ 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4,\
  \ 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1),\
  \ (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3,\
  \ 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5,\
  \ 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1),\
  \ vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5,\
  \ 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1),\
  \ Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize,\
  \ isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]],\
  \ 3), vec![(2, 2)]);\n}\n"
completions: ["    let mut res: Vec<(isize, isize)> = Vec::new();\n    for (i, row)\
    \ in lst.iter().enumerate() {\n        for (j, &elem) in row.iter().enumerate()\
    \ {\n            if elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate()\
    \ {\n            if *col == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate()\
    \ {\n            if *col == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n   \
    \     if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n         \
    \   a.0.cmp(&b.0)\n        }\n    });\n    result", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, &elem) in row.iter().enumerate() {\n            if elem == x {\n  \
    \              res.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    res.sort_by(|a, b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    res", " \
    \   let mut result: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, &item) in row.iter().enumerate() {\n            if item ==\
    \ x {\n                result.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n    \
    \        b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n\
    \    });\n    result", "    let mut res: Vec<(isize, isize)> = vec![];\n    for\
    \ (i, row) in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &elem) in row.iter().enumerate()\
    \ {\n            if elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, e) in row.iter().enumerate()\
    \ {\n            if *e == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &elem) in row.iter().enumerate()\
    \ {\n            if elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &item) in row.iter().enumerate()\
    \ {\n            if item == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &elem) in row.iter().enumerate()\
    \ {\n            if elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &elem) in row.iter().enumerate()\
    \ {\n            if elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate()\
    \ {\n            if *col == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &item) in row.iter().enumerate()\
    \ {\n            if item == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n   \
    \     if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n         \
    \   a.0.cmp(&b.0)\n        }\n    });\n    result", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, &elem) in row.iter().enumerate() {\n            if elem == x {\n  \
    \              res.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    res.sort_by(|a, b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    res", " \
    \   let mut res: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, &elem) in row.iter().enumerate() {\n            if elem ==\
    \ x {\n                res.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    res.sort_by(|a, b| {\n        if a.0 == b.0 {\n         \
    \   b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n  \
    \  });\n    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n   \
    \ for (i, row) in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n   \
    \     if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n         \
    \   a.0.cmp(&b.0)\n        }\n    });\n    result", "    let mut result: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, item) in row.iter().enumerate() {\n            if *item == x {\n  \
    \              result.push((i as isize, j as isize));\n            }\n       \
    \ }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n           \
    \ b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n\
    \    result"]
stop_tokens:
- "\n}"
