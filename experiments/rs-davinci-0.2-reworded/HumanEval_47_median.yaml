name: HumanEval_47_median
language: rs
prompt: "/// Return median of elements in the vector l.\n/// >>> median(vec![3, 1,\
  \ 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn\
  \ median(l: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
  \ 1, 2, 4, 5]), 3);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
  \    assert_eq!(candidate(vec![5]), 5);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n\
  \    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7);\n}\n"
completions: ["    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len\
    \ % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n      \
    \  l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n\
    \ = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n   \
    \ } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n   \
    \ let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid -\
    \ 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut v = l.clone();\n\
    \    v.sort();\n    let len = v.len();\n    if len % 2 == 0 {\n        (v[len\
    \ / 2] + v[len / 2 - 1]) / 2\n    } else {\n        v[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 ==\
    \ 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }",
  "    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() %\
    \ 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n %\
    \ 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n   \
    \ if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n\
    \        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid =\
    \ l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n\
    \    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n  \
    \  let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2\
    \ - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n \
    \   l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n       \
    \ (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n     \
    \   (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() %\
    \ 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len\
    \ % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n      \
    \  l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid\
    \ = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid]) / 2\n\
    \    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n  \
    \  let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n      \
    \  (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n     \
    \   (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let middle = l.len() / 2;\n    if l.len()\
    \ % 2 == 0 {\n        (l[middle] + l[middle - 1]) / 2\n    } else {\n        l[middle]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n %\
    \ 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n   \
    \ if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n\
    \        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid =\
    \ l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n\
    \    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n  \
    \  let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len\
    \ / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n     \
    \   (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", " \
    \   let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if\
    \ n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n\
    \ / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n   \
    \ if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n     \
    \   l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len\
    \ = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n\
    \    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len\
    \ / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n     \
    \   (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", " \
    \   let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n\
    \        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n   \
    \ if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n\
    \        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid =\
    \ l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n\
    \    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n  \
    \  let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) /\
    \ 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len\
    \ / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n     \
    \   (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", " \
    \   let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len()\
    \ % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n %\
    \ 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if\
    \ n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n\
    \ / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n\
    \    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n\
    \        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n\
    \ = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n   \
    \ } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n   \
    \ let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len\
    \ / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 ==\
    \ 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }",
  "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n\
    \    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n\
    \        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len\
    \ = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n\
    \    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len\
    \ / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 ==\
    \ 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }",
  "    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() %\
    \ 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len\
    \ % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n      \
    \  l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len()\
    \ / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else\
    \ {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let mid =\
    \ l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n\
    \    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n  \
    \  let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) /\
    \ 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len\
    \ / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n     \
    \   (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", " \
    \   let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n\
    \        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n\
    \        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if\
    \ n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n\
    \ / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n \
    \   let mid = len / 2;\n    if len % 2 == 0 {\n        (l[mid] + l[mid - 1]) /\
    \ 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len\
    \ / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n     \
    \   (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", " \
    \   let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n   \
    \ if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n\
    \        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len\
    \ = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n\
    \    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] +\
    \ l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l =\
    \ l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n /\
    \ 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n     \
    \   (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() %\
    \ 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len\
    \ % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n      \
    \  l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len()\
    \ / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else\
    \ {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len()\
    \ / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else\
    \ {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let len =\
    \ l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n\
    \    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n      \
    \  (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n\
    \ / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n\
    \ / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n     \
    \   (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n\
    \        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if\
    \ n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n\
    \ / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n \
    \   if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n\
    \        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n\
    \ = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n   \
    \ } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n   \
    \ let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 -\
    \ 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n   \
    \ l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2]\
    \ + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n     \
    \   (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n   \
    \ if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n\
    \        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let n = l.len();\n    let mut l = l;\n \
    \   l.sort();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n  \
    \  } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n  \
    \  let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len\
    \ / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n \
    \       (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len\
    \ % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n      \
    \  l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len\
    \ = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n\
    \    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n      \
    \  (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n\
    \        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }", "  \
    \  let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() %\
    \ 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n %\
    \ 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if\
    \ n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n\
    \ / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n\
    \    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid]) / 2\n    } else {\n\
    \        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len()\
    \ / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid]) / 2\n    } else\
    \ {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len()\
    \ / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else\
    \ {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let len =\
    \ l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n\
    \    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        return (l[len / 2] + l[len\
    \ / 2 - 1]) / 2;\n    }\n    l[len / 2]", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] +\
    \ l[mid]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n   \
    \ l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2]\
    \ + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n\
    \ / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n\
    \ / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n\
    \        (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }", "  \
    \  let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() %\
    \ 2 == 0 {\n        (l[mid - 1] + l[mid]) / 2\n    } else {\n        l[mid]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if\
    \ l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else {\n      \
    \  l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len() /\
    \ 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else\
    \ {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len()\
    \ / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n    } else\
    \ {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let len =\
    \ l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n\
    \    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1])\
    \ / 2\n    } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n      \
    \  (l[mid] + l[mid - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n\
    \ / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n\
    \ / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n     \
    \   (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n\
    \        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n\
    \    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid]) / 2\n    } else {\n\
    \        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n\
    \ = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n   \
    \ } else {\n        l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n   \
    \ let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] +\
    \ l[mid]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n   \
    \ l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2]\
    \ + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n     \
    \   (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }",
  "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len /\
    \ 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n   \
    \ if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n\
    \        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n  \
    \      l[n / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) / 2\n    } else\
    \ {\n        l[len / 2]\n    }", "    let mut l = l;\n    l.sort();\n    let mid\
    \ = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) / 2\n\
    \    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n  \
    \  let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        l[mid]\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len /\
    \ 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let mut l = l;\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len\
    \ / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n    }", "    let\
    \ mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n \
    \       (l[len / 2] + l[len / 2 - 1]) / 2\n    } else {\n        l[len / 2]\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n %\
    \ 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        l[n /\
    \ 2]\n    }"]
stop_tokens:
- "\n}"
