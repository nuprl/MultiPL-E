name: HumanEval_99_closest_integer
language: rs
prompt: "/// Create a function that takes a value (string) representing a number\n\
  /// and returns the closest integer to it. If the number is equidistant\n/// from\
  \ two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(String::from(\"\
  10\"))\n/// 10\n/// >>> closest_integer(String::from(\"15.3\"))\n/// 15\n/// Note:\n\
  /// Rounding away from zero means that if the given number is equidistant\n/// from\
  \ two integers, the one you should return is the one that is the\n/// farthest from\
  \ zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"\
  -14.5\") should return -15.\nfn closest_integer(value: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = closest_integer;\n    assert_eq!(candidate(String::from(\"\
  10\")), 10);\n    assert_eq!(candidate(String::from(\"14.5\")), 15);\n    assert_eq!(candidate(String::from(\"\
  -15.5\")), -16);\n    assert_eq!(candidate(String::from(\"15.3\")), 15);\n    assert_eq!(candidate(String::from(\"\
  0\")), 0);\n}\n"
completions: ["    let num = value.parse::<f64>().unwrap();\n    if num.fract() <\
    \ 0.5 {\n        num.floor() as isize\n    } else {\n        num.ceil() as isize\n\
    \    }", "    let float_value = value.parse::<f64>().unwrap();\n    if float_value.fract()\
    \ < 0.5 {\n        float_value.floor() as isize\n    } else {\n        float_value.ceil()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    let value\
    \ = value.round();\n    value as isize", "    let value = value.parse::<f64>().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        (value + 1.0).round() as isize\n    }\
    \ else {\n        value.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value > 0.0 {\n        value.ceil() as isize\n    } else {\n        value.floor()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ >= 0.5 {\n        (value + 1.0).round() as isize\n    } else {\n        value.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value\
    \ < 0.0 {\n        return (value - 0.5).floor() as isize;\n    }\n    (value +\
    \ 0.5).floor() as isize", "    let value: f64 = value.parse().unwrap();\n    let\
    \ value_abs = value.abs();\n    let value_floor = value_abs.floor();\n    let\
    \ value_ceil = value_abs.ceil();\n    let value_round = value_abs.round();\n \
    \   if value_abs - value_floor < value_ceil - value_abs {\n        if value_abs\
    \ - value_floor < value_round - value_abs {\n            if value < 0.0 {\n  \
    \              -value_floor as isize\n            } else {\n                value_floor\
    \ as isize\n            }\n        } else {\n            if value < 0.0 {\n  \
    \              -value_round as isize\n            } else {\n                value_round\
    \ as isize\n            }\n        }\n    } else {\n        if value_ceil - value_abs\
    \ < value_round - value_abs {\n            if value < 0.0 {\n                -value_ceil\
    \ as isize\n            } else {\n                value_ceil as isize\n      \
    \      }\n        } else {\n            if value < 0.0 {\n                -value_round\
    \ as isize\n            } else {\n                value_round as isize\n     \
    \       }\n        }\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        (value + 1.0).round() as isize\n    }\
    \ else {\n        value.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let mut value: f64 = value.parse().unwrap();\n\
    \    if value < 0.0 {\n        value -= 0.5;\n    } else {\n        value += 0.5;\n\
    \    }\n    value as isize", "    let value: f64 = value.parse().unwrap();\n \
    \   if value.fract() >= 0.5 {\n        (value + 1.0).round() as isize\n    } else\
    \ {\n        value.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let value = if value >= 0.0 {\n        value + 0.5\n    } else {\n      \
    \  value - 0.5\n    };\n    value.trunc() as isize", "    let float_value = value.parse::<f64>().unwrap();\n\
    \    let int_value = float_value.round() as isize;\n    if float_value - int_value\
    \ as f64 >= 0.5 {\n        int_value + 1\n    } else {\n        int_value\n  \
    \  }", "    let num: f64 = value.parse().unwrap();\n    let num_abs = num.abs();\n\
    \    let num_floor = num_abs.floor();\n    let num_ceil = num_abs.ceil();\n  \
    \  let num_floor_diff = num_abs - num_floor;\n    let num_ceil_diff = num_ceil\
    \ - num_abs;\n    if num_floor_diff < num_ceil_diff {\n        num_floor as isize\
    \ * num.signum() as isize\n    } else {\n        num_ceil as isize * num.signum()\
    \ as isize\n    }", "    let num: f64 = value.parse().unwrap();\n    num.round()\
    \ as isize", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ < 0.5 {\n        value.floor() as isize\n    } else {\n        value.ceil()\
    \ as isize\n    }", "    let num = value.parse::<f64>().unwrap();\n    if num\
    \ > 0.0 {\n        num.ceil() as isize\n    } else {\n        num.floor() as isize\n\
    \    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract() <\
    \ 0.5 {\n        value.floor() as isize\n    } else {\n        value.ceil() as\
    \ isize\n    }", "    let num: f64 = value.parse().unwrap();\n    let num_int\
    \ = num.round() as isize;\n    if num - num_int as f64 == 0.5 {\n        if num_int\
    \ > 0 {\n            num_int + 1\n        } else {\n            num_int - 1\n\
    \        }\n    } else {\n        num_int\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let mut value = value.round();\n    if value.is_sign_negative() {\n     \
    \   value -= 1.0;\n    }\n    value as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value > 0.0 {\n        value.ceil() as isize\n    } else {\n        value.floor()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ >= 0.5 {\n        (value + 1.0).round() as isize\n    } else {\n        value.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ >= 0.5 {\n        (value + 1.0).round() as isize\n    } else {\n        value.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ < 0.5 {\n        value.floor() as isize\n    } else {\n        value.ceil()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ >= 0.5 {\n        value.ceil() as isize\n    } else {\n        value.floor()\
    \ as isize\n    }", "    let num: f64 = value.parse().unwrap();\n    let num_int\
    \ = num.round() as isize;\n    if num_int > num as isize {\n        num_int -\
    \ 1\n    } else {\n        num_int\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let mut result = value.round() as isize;\n    if value.fract() == 0.5 {\n\
    \        if value > 0.0 {\n            result += 1;\n        } else {\n      \
    \      result -= 1;\n        }\n    }\n    result", "    let float_value = value.parse::<f64>().unwrap();\n\
    \    let mut int_value = float_value.round() as isize;\n    if int_value == 0\
    \ {\n        int_value = 1;\n    }\n    int_value", "    let num: f64 = value.parse().unwrap();\n\
    \    num.round() as isize", "    let num: f64 = value.parse().unwrap();\n    let\
    \ num = num.round();\n    num as isize", "    let num = value.parse::<f64>().unwrap();\n\
    \    if num.fract() >= 0.5 {\n        return (num + 1.0).round() as isize;\n \
    \   }\n    num.round() as isize", "    let f = value.parse::<f64>().unwrap();\n\
    \    if f.fract() >= 0.5 {\n        (f + 1.0).round() as isize\n    } else {\n\
    \        f.round() as isize\n    }", "    let number: f64 = value.parse().unwrap();\n\
    \    let rounded_number = number.round();\n    if rounded_number > number {\n\
    \        rounded_number as isize - 1\n    } else {\n        rounded_number as\
    \ isize\n    }", "    let num = value.parse::<f64>().unwrap();\n    if num.fract()\
    \ < 0.5 {\n        num.floor() as isize\n    } else {\n        num.ceil() as isize\n\
    \    }", "    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 {\n\
    \        num.ceil() as isize\n    } else {\n        num.floor() as isize\n   \
    \ }", "    let value: f64 = value.parse().unwrap();\n    let value_rounded = value.round();\n\
    \    if value_rounded > value {\n        value_rounded as isize - 1\n    } else\
    \ {\n        value_rounded as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    let num_int = num.round() as isize;\n    if num_int > num as isize {\n  \
    \      num_int - 1\n    } else {\n        num_int\n    }", "    let value = value.parse::<f64>().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        (value + 1.0).round() as isize\n    }\
    \ else {\n        value.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let mut value = value.round();\n    if value > 0.0 {\n        value += 0.5;\n\
    \    } else {\n        value -= 0.5;\n    }\n    value as isize", "    let value:\
    \ f64 = value.parse().unwrap();\n    if value.fract() >= 0.5 {\n        value.ceil()\
    \ as isize\n    } else {\n        value.floor() as isize\n    }", "    let value:\
    \ f64 = value.parse().unwrap();\n    let value = if value < 0.0 { value - 0.5\
    \ } else { value + 0.5 };\n    value.round() as isize", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() < 0.5 {\n        num.floor() as isize\n    } else {\n    \
    \    num.ceil() as isize\n    }", "    let value = value.parse::<f64>().unwrap();\n\
    \    let mut closest = value.round() as isize;\n    if closest < value as isize\
    \ {\n        closest += 1;\n    }\n    closest", "    let value: f64 = value.parse().unwrap();\n\
    \    let mut result = value.round() as isize;\n    if value.fract() == 0.5 {\n\
    \        if result.is_positive() {\n            result += 1;\n        } else {\n\
    \            result -= 1;\n        }\n    }\n    result", "    let num: f64 =\
    \ value.parse().unwrap();\n    let num_int = num.round() as isize;\n    if num_int\
    \ > num as isize {\n        num_int - 1\n    } else {\n        num_int\n    }",
  "    let value = value.parse::<f64>().unwrap();\n    let mut result = value.round()\
    \ as isize;\n    if value.fract() == 0.5 {\n        if result.is_positive() {\n\
    \            result += 1;\n        } else {\n            result -= 1;\n      \
    \  }\n    }\n    result", "    let value: f64 = value.parse().unwrap();\n    let\
    \ mut result = value.round() as isize;\n    if result < value as isize {\n   \
    \     result += 1;\n    }\n    result", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() < 0.5 {\n        num.floor() as isize\n    } else {\n    \
    \    num.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    value.round() as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    let value = value.round();\n    value as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() >= 0.5 {\n        return (num + 1.0).round() as isize;\n \
    \   }\n    num.round() as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    let closest_int = value.round();\n    closest_int as isize", "    let mut\
    \ value: f64 = value.parse().unwrap();\n    if value.fract() >= 0.5 {\n      \
    \  value.ceil() as isize\n    } else {\n        value.floor() as isize\n    }",
  "    let float_value = value.parse::<f64>().unwrap();\n    if float_value > 0.0\
    \ {\n        return float_value.ceil() as isize;\n    }\n    float_value.floor()\
    \ as isize", "    let num: f64 = value.parse().unwrap();\n    let num_int = num.round()\
    \ as isize;\n    if num_int > num as isize {\n        num_int - 1\n    } else\
    \ {\n        num_int\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let value = if value.fract() >= 0.5 {\n        value.ceil()\n    } else {\n\
    \        value.floor()\n    };\n    value as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    if value < 0.0 {\n        return (value - 0.5).floor() as isize;\n    }\n\
    \    (value + 0.5).floor() as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let num = value.parse::<f64>().unwrap();\n\
    \    if num.fract() < 0.5 {\n        num.floor() as isize\n    } else {\n    \
    \    num.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let mut value = value.parse::<f64>().unwrap();\n\
    \    if value < 0.0 {\n        value -= 0.5;\n    } else {\n        value += 0.5;\n\
    \    }\n    value.trunc() as isize", "    let num: f64 = value.parse().unwrap();\n\
    \    let num_int = num.round() as isize;\n    if num.fract() == 0.5 {\n      \
    \  if num_int > 0 {\n            num_int + 1\n        } else {\n            num_int\
    \ - 1\n        }\n    } else {\n        num_int\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() < 0.5 {\n        num.floor() as isize\n    } else {\n    \
    \    num.ceil() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() < 0.5 {\n        num.floor() as isize\n    } else {\n    \
    \    num.ceil() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() >= 0.5 {\n        (num + 1.0).round() as isize\n    } else\
    \ {\n        num.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        (value + 1.0).round() as isize\n    }\
    \ else {\n        value.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let value_int = value.round() as isize;\n    if value - value_int as f64\
    \ == 0.5 {\n        if value_int > 0 {\n            value_int + 1\n        } else\
    \ {\n            value_int - 1\n        }\n    } else {\n        value_int\n \
    \   }", "    let value: f64 = value.parse().unwrap();\n    if value.fract() >=\
    \ 0.5 {\n        (value + 1.0).round() as isize\n    } else {\n        value.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value\
    \ - value.floor() < 0.5 {\n        value.floor() as isize\n    } else {\n    \
    \    value.ceil() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    let mut num_int = num.round() as isize;\n    if num_int < num as isize {\n\
    \        num_int += 1;\n    }\n    num_int", "    let num: f64 = value.parse().unwrap();\n\
    \    let num_abs = num.abs();\n    let num_floor = num_abs.floor();\n    let num_ceil\
    \ = num_abs.ceil();\n    if num_floor == num_ceil {\n        return num_floor\
    \ as isize;\n    }\n    if num_abs - num_floor < num_ceil - num_abs {\n      \
    \  return num_floor as isize;\n    }\n    return num_ceil as isize;", "    let\
    \ num: f64 = value.parse().unwrap();\n    if num.fract() >= 0.5 {\n        (num\
    \ + 1.0).round() as isize\n    } else {\n        num.round() as isize\n    }",
  "    let num: f64 = value.parse().unwrap();\n    let num_int = num.round() as isize;\n\
    \    if num_int > num as isize {\n        num_int - 1\n    } else {\n        num_int\n\
    \    }", "    let value: f64 = value.parse().unwrap();\n    if value < 0.0 {\n\
    \        return value.ceil() as isize;\n    }\n    value.floor() as isize", " \
    \   let value: f64 = value.parse().unwrap();\n    if value.fract() >= 0.5 {\n\
    \        value.ceil() as isize\n    } else {\n        value.floor() as isize\n\
    \    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract() >=\
    \ 0.5 {\n        (value + 1.0).round() as isize\n    } else {\n        value.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    let mut\
    \ result = value.round() as isize;\n    if result < value as isize {\n       \
    \ result += 1;\n    }\n    result", "    let num = value.parse::<f64>().unwrap();\n\
    \    if num.fract() < 0.5 {\n        num.floor() as isize\n    } else {\n    \
    \    num.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let value = if value.fract() >= 0.5 {\n        value.ceil()\n    } else {\n\
    \        value.floor()\n    };\n    value as isize", "    let value = value.parse::<f64>().unwrap();\n\
    \    if value < 0.0 {\n        return (value - 0.5).floor() as isize;\n    }\n\
    \    (value + 0.5).floor() as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    num.round() as isize", "    let value: f64 = value.parse().unwrap();\n  \
    \  if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n  \
    \      value.ceil() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() < 0.5 {\n        return num.floor() as isize;\n    }\n   \
    \ num.ceil() as isize", "    let num = value.parse::<f64>().unwrap();\n    let\
    \ num_int = num.round() as isize;\n    if num_int >= 0 {\n        num_int\n  \
    \  } else {\n        num_int - 1\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let value = value.parse::<f64>().unwrap();\n\
    \    let value = if value >= 0.0 {\n        value.ceil()\n    } else {\n     \
    \   value.floor()\n    };\n    value as isize", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() >= 0.5 {\n        (num + 1.0).round() as isize\n    } else\
    \ {\n        num.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let value_abs = value.abs();\n    let value_floor = value_abs.floor();\n\
    \    let value_ceil = value_abs.ceil();\n    if value_abs - value_floor < value_ceil\
    \ - value_abs {\n        value_floor as isize * value.signum() as isize\n    }\
    \ else {\n        value_ceil as isize * value.signum() as isize\n    }", "   \
    \ let value: f64 = value.parse().unwrap();\n    let value = value.round();\n \
    \   value as isize", "    let value: f64 = value.parse().unwrap();\n    let value\
    \ = if value < 0.0 {\n        value - 0.5\n    } else {\n        value + 0.5\n\
    \    };\n    value.round() as isize", "    let mut num: f64 = value.parse().unwrap();\n\
    \    if num < 0.0 {\n        num -= 0.5;\n    } else {\n        num += 0.5;\n\
    \    }\n    num as isize", "    let value: f64 = value.parse().unwrap();\n   \
    \ if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n   \
    \     value.floor() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let mut value = value.round();\n    if value < 0.0 {\n        value -= 1.0;\n\
    \    }\n    value as isize", "    let value: f64 = value.parse().unwrap();\n \
    \   if value.fract() >= 0.5 {\n        (value + 1.0).round() as isize\n    } else\
    \ {\n        value.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let value_rounded = value.round();\n    if value_rounded > value {\n    \
    \    (value_rounded - 1.0) as isize\n    } else {\n        value_rounded as isize\n\
    \    }", "    let value: f64 = value.parse().unwrap();\n    if value > 0.0 {\n\
    \        value.ceil() as isize\n    } else {\n        value.floor() as isize\n\
    \    }", "    let value = value.parse::<f64>().unwrap();\n    if value.fract()\
    \ < 0.5 {\n        value.floor() as isize\n    } else {\n        value.ceil()\
    \ as isize\n    }", "    let num = value.parse::<f64>().unwrap();\n    if num.fract()\
    \ < 0.5 {\n        num.floor() as isize\n    } else {\n        num.ceil() as isize\n\
    \    }", "    let num = value.parse::<f64>().unwrap();\n    if num.fract() < 0.5\
    \ {\n        num.floor() as isize\n    } else {\n        num.ceil() as isize\n\
    \    }", "    let num: f64 = value.parse().unwrap();\n    let num_int = num.trunc();\n\
    \    let num_dec = num - num_int;\n    if num_dec >= 0.5 {\n        (num_int +\
    \ 1.0) as isize\n    } else {\n        num_int as isize\n    }", "    let value:\
    \ f64 = value.parse().unwrap();\n    if value.fract() >= 0.5 {\n        value.ceil()\
    \ as isize\n    } else {\n        value.floor() as isize\n    }", "    let value:\
    \ f64 = value.parse().unwrap();\n    let value = if value.fract() >= 0.5 {\n \
    \       value.ceil()\n    } else {\n        value.floor()\n    };\n    value as\
    \ isize", "    let value: f64 = value.parse().unwrap();\n    let value_rounded\
    \ = value.round();\n    if value_rounded > value {\n        value_rounded as isize\
    \ - 1\n    } else {\n        value_rounded as isize\n    }", "    let num: f64\
    \ = value.parse().unwrap();\n    if num.fract() < 0.5 {\n        num.floor() as\
    \ isize\n    } else {\n        num.ceil() as isize\n    }", "    let value: f64\
    \ = value.parse().unwrap();\n    let closest_integer: isize = value.round() as\
    \ isize;\n    closest_integer", '    value.parse::<f64>().unwrap().round() as
    isize', "    let value: f64 = value.parse().unwrap();\n    if value.fract() >=\
    \ 0.5 {\n        (value + 1.0).round() as isize\n    } else {\n        value.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    value.round()\
    \ as isize", "    let num: f64 = value.parse().unwrap();\n    let num_int = num.round()\
    \ as isize;\n    if num_int > num as isize {\n        num_int - 1\n    } else\
    \ {\n        num_int\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let num = value.parse::<f64>().unwrap();\n\
    \    if num.fract() >= 0.5 {\n        (num + 1.0).round() as isize\n    } else\
    \ {\n        num.round() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    num.round() as isize", "    let value: f64 = value.parse().unwrap();\n  \
    \  if value.fract() >= 0.5 {\n        (value + 1.0).round() as isize\n    } else\
    \ {\n        value.round() as isize\n    }", "    let mut value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value += 1.0;\n    }\n    value.round()\
    \ as isize", "    let value = value.parse::<f64>().unwrap();\n    if value > 0.0\
    \ {\n        value.ceil() as isize\n    } else {\n        value.floor() as isize\n\
    \    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract() >=\
    \ 0.5 {\n        (value + 1.0).round() as isize\n    } else {\n        value.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    let value_abs\
    \ = value.abs();\n    let value_abs_floor = value_abs.floor();\n    let value_abs_ceil\
    \ = value_abs.ceil();\n    if value_abs - value_abs_floor < value_abs_ceil - value_abs\
    \ {\n        value_abs_floor as isize * value.signum() as isize\n    } else {\n\
    \        value_abs_ceil as isize * value.signum() as isize\n    }", "    let value:\
    \ f64 = value.parse().unwrap();\n    let value_abs = value.abs();\n    let value_abs_ceil\
    \ = value_abs.ceil();\n    let value_abs_floor = value_abs.floor();\n    if value_abs_ceil\
    \ - value_abs < value_abs - value_abs_floor {\n        value_abs_ceil as isize\
    \ * value.signum() as isize\n    } else {\n        value_abs_floor as isize *\
    \ value.signum() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    num.round() as isize", "    let value: f64 = value.parse().unwrap();\n  \
    \  let mut value = value.round();\n    if value > 0.0 {\n        value += 0.5;\n\
    \    } else {\n        value -= 0.5;\n    }\n    value as isize", "    let mut\
    \ num = value.parse::<f64>().unwrap();\n    if num.fract() == 0.5 {\n        num\
    \ += 0.5;\n    }\n    num.round() as isize", "    let num: f64 = value.parse().unwrap();\n\
    \    let num_abs = num.abs();\n    let num_int = num_abs.floor() as isize;\n \
    \   let num_dec = num_abs - num_int as f64;\n    if num_dec >= 0.5 {\n       \
    \ num_int + 1\n    } else {\n        num_int\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    let num_abs = num.abs();\n    let num_abs_floor = num_abs.floor();\n    let\
    \ num_abs_ceil = num_abs.ceil();\n    if num_abs_floor == num_abs_ceil {\n   \
    \     return num.round() as isize;\n    }\n    if num_abs - num_abs_floor < num_abs_ceil\
    \ - num_abs {\n        return num_abs_floor as isize;\n    }\n    return num_abs_ceil\
    \ as isize;", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ >= 0.5 {\n        (value + 1.0).round() as isize\n    } else {\n        value.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ < 0.5 {\n        value.floor() as isize\n    } else {\n        value.ceil()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value\
    \ - value.floor() < 0.5 {\n        value.floor() as isize\n    } else {\n    \
    \    value.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let value_rounded = value.round();\n    if value_rounded > value {\n    \
    \    value_rounded as isize - 1\n    } else {\n        value_rounded as isize\n\
    \    }", "    let num: f64 = value.parse().unwrap();\n    num.round() as isize",
  "    let value: f64 = value.parse().unwrap();\n    if value.fract() >= 0.5 {\n \
    \       value.ceil() as isize\n    } else {\n        value.floor() as isize\n\
    \    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract() >=\
    \ 0.5 {\n        value.ceil() as isize\n    } else {\n        value.floor() as\
    \ isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value >=\
    \ 0.0 {\n        value.ceil() as isize\n    } else {\n        value.floor() as\
    \ isize\n    }", "    let num: f64 = value.parse().unwrap();\n    let num_int\
    \ = num.round() as isize;\n    if num_int > num as isize {\n        num_int -\
    \ 1\n    } else {\n        num_int\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    let num_abs = num.abs();\n    let num_floor = num_abs.floor();\n    let num_ceil\
    \ = num_abs.ceil();\n    let num_floor_diff = num_abs - num_floor;\n    let num_ceil_diff\
    \ = num_ceil - num_abs;\n    if num_floor_diff == num_ceil_diff {\n        if\
    \ num < 0.0 {\n            -num_ceil as isize\n        } else {\n            num_ceil\
    \ as isize\n        }\n    } else if num_floor_diff < num_ceil_diff {\n      \
    \  num_floor as isize\n    } else {\n        num_ceil as isize\n    }", "    let\
    \ value: f64 = value.parse().unwrap();\n    if value.fract() < 0.5 {\n       \
    \ value.floor() as isize\n    } else {\n        value.ceil() as isize\n    }",
  "    let value: f64 = value.parse().unwrap();\n    let mut value = value.round();\n\
    \    if value.is_sign_negative() {\n        value -= 1.0;\n    }\n    value as\
    \ isize", "    let num = value.parse::<f64>().unwrap();\n    if num.fract() >=\
    \ 0.5 {\n        (num + 1.0).round() as isize\n    } else {\n        num.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    let mut\
    \ value = value.round();\n    if value < 0.0 {\n        value -= 1.0;\n    }\n\
    \    value as isize", "    let num: f64 = value.parse().unwrap();\n    num.round()\
    \ as isize", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ >= 0.5 {\n        value.ceil() as isize\n    } else {\n        value.floor()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ == 0.5 {\n        if value > 0.0 {\n            value.ceil() as isize\n    \
    \    } else {\n            value.floor() as isize\n        }\n    } else {\n \
    \       value.round() as isize\n    }", "    let f: f64 = value.parse().unwrap();\n\
    \    let i: isize = f.round() as isize;\n    i", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() >= 0.5 {\n        (num + 1.0).round() as isize\n    } else\
    \ {\n        num.round() as isize\n    }", "    let value = value.parse::<f64>().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        (value + 1.0).round() as isize\n    }\
    \ else {\n        value.round() as isize\n    }", "    let num: f64 = value.parse().unwrap();\n\
    \    if num.fract() >= 0.5 {\n        (num + 1.0).round() as isize\n    } else\
    \ {\n        num.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let value_int = value.round() as isize;\n    if value_int > value as isize\
    \ {\n        value_int - 1\n    } else {\n        value_int\n    }", "    let\
    \ num: f64 = value.parse().unwrap();\n    if num.fract() >= 0.5 {\n        return\
    \ (num + 1.0).round() as isize;\n    }\n    num.round() as isize", "    let num:\
    \ f64 = value.parse().unwrap();\n    let num_ceil = num.ceil();\n    let num_floor\
    \ = num.floor();\n    if num_ceil - num == num - num_floor {\n        if num >=\
    \ 0.0 {\n            num_ceil as isize\n        } else {\n            num_floor\
    \ as isize\n        }\n    } else if num_ceil - num > num - num_floor {\n    \
    \    num_floor as isize\n    } else {\n        num_ceil as isize\n    }", "  \
    \  let value: f64 = value.parse().unwrap();\n    if value.fract() >= 0.5 {\n \
    \       (value + 1.0).round() as isize\n    } else {\n        value.round() as\
    \ isize\n    }", "    let value: f64 = value.parse().unwrap();\n    let value\
    \ = value.round();\n    value as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let num = value.parse::<f64>().unwrap();\n\
    \    if num.fract() >= 0.5 {\n        (num + 1.0).round() as isize\n    } else\
    \ {\n        num.round() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let mut result = value.round() as isize;\n    if value.fract() == 0.5 {\n\
    \        result = if value.is_sign_positive() {\n            result + 1\n    \
    \    } else {\n            result - 1\n        }\n    }\n    result", "    let\
    \ num = value.parse::<f64>().unwrap();\n    if num.fract() < 0.5 {\n        num.floor()\
    \ as isize\n    } else {\n        num.ceil() as isize\n    }", "    let value:\
    \ f64 = value.parse().unwrap();\n    let value = value.round();\n    value as\
    \ isize", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ >= 0.5 {\n        (value + 1.0).round() as isize\n    } else {\n        value.round()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ < 0.5 {\n        value.floor() as isize\n    } else {\n        value.ceil()\
    \ as isize\n    }", "    let value = value.parse::<f64>().unwrap();\n    if value\
    \ > 0.0 {\n        return value.ceil() as isize;\n    }\n    value.floor() as\
    \ isize", "    let num = value.parse::<f64>().unwrap();\n    if num.fract() <\
    \ 0.5 {\n        return num.floor() as isize;\n    }\n    num.ceil() as isize",
  "    let mut value: f64 = value.parse().unwrap();\n    if value.fract() >= 0.5 {\n\
    \        value += 1.0;\n    }\n    value.floor() as isize", "    let value: f64\
    \ = value.parse().unwrap();\n    if value.fract() < 0.5 {\n        value.floor()\
    \ as isize\n    } else {\n        value.ceil() as isize\n    }", "    let num:\
    \ f64 = value.parse().unwrap();\n    let num_int = num.round() as isize;\n   \
    \ let num_int_abs = num_int.abs();\n    let num_abs = num.abs();\n    if num_abs\
    \ - num_int_abs < 0.5 {\n        num_int\n    } else {\n        num_int + num_int\
    \ / num_int_abs\n    }", "    let num = value.parse::<f64>().unwrap();\n    if\
    \ num > 0.0 {\n        num.ceil() as isize\n    } else {\n        num.floor()\
    \ as isize\n    }", "    let num: f64 = value.parse().unwrap();\n    if num.fract()\
    \ < 0.5 {\n        num.floor() as isize\n    } else {\n        num.ceil() as isize\n\
    \    }", "    let value: f64 = value.parse().unwrap();\n    let value = value.round();\n\
    \    value as isize", "    let mut value: f64 = value.parse().unwrap();\n    if\
    \ value < 0.0 {\n        value -= 0.5;\n    } else {\n        value += 0.5;\n\
    \    }\n    value as isize", "    let num = value.parse::<f64>().unwrap();\n \
    \   if num.fract() >= 0.5 {\n        return (num + 1.0).round() as isize;\n  \
    \  }\n    num.round() as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let value = value.parse::<f64>().unwrap();\n\
    \    if value.fract() < 0.5 {\n        value.floor() as isize\n    } else {\n\
    \        value.ceil() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let mut closest_int = value.round() as isize;\n    if closest_int == 0 {\n\
    \        closest_int = 1;\n    }\n    if value.abs() - value.round().abs() ==\
    \ 0.5 {\n        closest_int *= -1;\n    }\n    closest_int", "    let value:\
    \ f64 = value.parse().unwrap();\n    let value = value.round();\n    value as\
    \ isize", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ < 0.5 {\n        value.floor() as isize\n    } else {\n        value.ceil()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    if value.fract()\
    \ < 0.5 {\n        value.floor() as isize\n    } else {\n        value.ceil()\
    \ as isize\n    }", "    let value: f64 = value.parse().unwrap();\n    let mut\
    \ result = value.round() as isize;\n    if value.fract() == 0.5 {\n        if\
    \ value > 0.0 {\n            result += 1;\n        } else {\n            result\
    \ -= 1;\n        }\n    }\n    result", "    let value: f64 = value.parse().unwrap();\n\
    \    let rounded = value.round();\n    if rounded > value {\n        rounded as\
    \ isize - 1\n    } else {\n        rounded as isize\n    }", "    let value: f64\
    \ = value.parse().unwrap();\n    if value.fract() < 0.5 {\n        value.floor()\
    \ as isize\n    } else {\n        value.ceil() as isize\n    }", "    let num:\
    \ f64 = value.parse().unwrap();\n    if num.fract() >= 0.5 {\n        (num + 1.0).round()\
    \ as isize\n    } else {\n        num.round() as isize\n    }", "    let num:\
    \ f64 = value.parse().unwrap();\n    let num_int = num.round() as isize;\n   \
    \ if num_int > num as isize {\n        num_int - 1\n    } else {\n        num_int\n\
    \    }", "    let num: f64 = value.parse().unwrap();\n    if num.fract() < 0.5\
    \ {\n        num.floor() as isize\n    } else {\n        num.ceil() as isize\n\
    \    }", "    let value: f64 = value.parse().unwrap();\n    let value_abs = value.abs();\n\
    \    let value_abs_floor = value_abs.floor();\n    let value_abs_ceil = value_abs.ceil();\n\
    \    let value_abs_floor_diff = value_abs - value_abs_floor;\n    let value_abs_ceil_diff\
    \ = value_abs_ceil - value_abs;\n    if value_abs_floor_diff < value_abs_ceil_diff\
    \ {\n        value_abs_floor as isize * value.signum() as isize\n    } else {\n\
    \        value_abs_ceil as isize * value.signum() as isize\n    }", "    let num:\
    \ f64 = value.parse().unwrap();\n    let num_int = num.round() as isize;\n   \
    \ if num - num_int as f64 > 0.5 {\n        num_int + 1\n    } else {\n       \
    \ num_int\n    }", "    let num: f64 = value.parse().unwrap();\n    if num.fract()\
    \ >= 0.5 {\n        (num + 1.0).round() as isize\n    } else {\n        num.round()\
    \ as isize\n    }", "    let num: f64 = value.parse().unwrap();\n    num.round()\
    \ as isize", "    let num = value.parse::<f64>().unwrap();\n    if num.fract()\
    \ < 0.5 {\n        num.floor() as isize\n    } else {\n        num.ceil() as isize\n\
    \    }", "    let num: f64 = value.parse().unwrap();\n    let num_int = num.round()\
    \ as isize;\n    if num - num_int as f64 >= 0.5 {\n        num_int + 1\n    }\
    \ else {\n        num_int\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    let value = value.round();\n    value as isize", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        value.ceil() as isize\n    } else {\n\
    \        value.floor() as isize\n    }", "    let value: f64 = value.parse().unwrap();\n\
    \    if value.fract() >= 0.5 {\n        (value + 1.0).round() as isize\n    }\
    \ else {\n        value.round() as isize\n    }", "    let float_value = value.parse::<f64>().unwrap();\n\
    \    if float_value > 0.0 {\n        float_value.ceil() as isize\n    } else {\n\
    \        float_value.floor() as isize\n    }"]
stop_tokens:
- "\n}"
