name: HumanEval_136_largest_smallest_integers
language: rs
prompt: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a vector.\n/// If there is no negative or positive integers, return them as\
  \ None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3, 5, 7])\n\
  /// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None, None)\n///\
  \ >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
  \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
  \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
  \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
  \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
  \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
  \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
  \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
  \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6,\
  \ 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]), (Some(-3),\
  \ Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]), (Some(-3),\
  \ Some(1)));\n}\n"
completions: ["    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut max_neg = None;\n \
    \   let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n        \
    \    if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg =\
    \ Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", '    unimplemented!()', "    let mut\
    \ largest_negative = None;\n    let mut smallest_positive = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            if largest_negative.is_none() || i >\
    \ largest_negative.unwrap() {\n                largest_negative = Some(i);\n \
    \           }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative: Option<isize>\
    \ = None;\n    let mut smallest_positive: Option<isize> = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            if largest_negative.is_none() || i >\
    \ largest_negative.unwrap() {\n                largest_negative = Some(i);\n \
    \           }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  '    unimplemented!()', "    let mut largest_neg = None;\n    let mut smallest_pos\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_neg.is_none()\
    \ || i > largest_neg.unwrap() {\n                largest_neg = Some(i);\n    \
    \        }\n        } else if i > 0 {\n            if smallest_pos.is_none() ||\
    \ i < smallest_pos.unwrap() {\n                smallest_pos = Some(i);\n     \
    \       }\n        }\n    }\n    (largest_neg, smallest_pos)", "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for num in lst {\n     \
    \   if num > 0 {\n            if smallest_positive.is_none() || num < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(num);\n            }\n        }\
    \ else if num < 0 {\n            if largest_negative.is_none() || num > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(num);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut max = None;\n    let mut min = None;\n    for\
    \ i in lst {\n        if i > 0 {\n            if min.is_none() || i < min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        } else if i < 0 {\n\
    \            if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut max_neg = None;\n    let mut min_pos = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if max_neg.is_none() || i\
    \ > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n  \
    \      } else if i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap()\
    \ {\n                min_pos = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", "    let mut min = None;\n    let mut max = None;\n   \
    \ for i in lst {\n        if i > 0 {\n            if min.is_none() || i < min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        } else if i < 0 {\n\
    \            if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i > 0 {\n           \
    \ if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', " \
    \   let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", "    let mut largest_negative: Option<isize>\
    \ = None;\n    let mut smallest_positive: Option<isize> = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            if largest_negative.is_none() || i >\
    \ largest_negative.unwrap() {\n                largest_negative = Some(i);\n \
    \           }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest = None;\n    let mut smallest = None;\n\
    \    for i in lst {\n        if i > 0 {\n            if let Some(smallest_value)\
    \ = smallest {\n                if i < smallest_value {\n                    smallest\
    \ = Some(i);\n                }\n            } else {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if let Some(largest_value)\
    \ = largest {\n                if i > largest_value {\n                    largest\
    \ = Some(i);\n                }\n            } else {\n                largest\
    \ = Some(i);\n            }\n        }\n    }\n    (largest, smallest)", '    unimplemented!()',
  '    unimplemented!()', "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative: Option<isize>\
    \ = None;\n    let mut smallest_positive: Option<isize> = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            if largest_negative.is_none() || i >\
    \ largest_negative.unwrap() {\n                largest_negative = Some(i);\n \
    \           }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', "    let\
    \ mut max_neg: Option<isize> = None;\n    let mut min_pos: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if max_neg.is_none() || i\
    \ > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n  \
    \      } else if i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap()\
    \ {\n                min_pos = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", "    let mut min_pos = None;\n    let mut max_neg = None;\n\
    \    for i in lst {\n        if i > 0 {\n            if min_pos.is_none() || i\
    \ < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n  \
    \      } else if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", '    unimplemented!()', "    let mut min = None;\n    let\
    \ mut max = None;\n    for i in lst {\n        if i > 0 {\n            if min.is_none()\
    \ || i < min.unwrap() {\n                min = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if max.is_none() || i > max.unwrap() {\n  \
    \              max = Some(i);\n            }\n        }\n    }\n    (max, min)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", "    let mut largest_negative = None;\n\
    \    let mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n\
    \            if largest_negative.is_none() || i > largest_negative.unwrap() {\n\
    \                largest_negative = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!();', '    unimplemented!()',
  "    let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", '    unimplemented!()', "    let\
    \ mut max_neg: Option<isize> = None;\n    let mut min_pos: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if max_neg.is_none() || i\
    \ > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n  \
    \      } else if i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap()\
    \ {\n                min_pos = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", "    let mut largest = None;\n    let mut smallest = None;\n\
    \    for i in lst {\n        if i > 0 {\n            if smallest == None || i\
    \ < smallest.unwrap() {\n                smallest = Some(i);\n            }\n\
    \        } else if i < 0 {\n            if largest == None || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        }\n    }\n   \
    \ (largest, smallest)", "    let mut max_neg = None;\n    let mut min_pos = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if max_neg.is_none() || i\
    \ > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n  \
    \      } else if i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap()\
    \ {\n                min_pos = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", '    unimplemented!()', "    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", '    unimplemented!()', '    unimplemented!()',
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", "    let mut largest_neg = None;\n    let mut smallest_pos\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_neg.is_none()\
    \ || i > largest_neg.unwrap() {\n                largest_neg = Some(i);\n    \
    \        }\n        } else if i > 0 {\n            if smallest_pos.is_none() ||\
    \ i < smallest_pos.unwrap() {\n                smallest_pos = Some(i);\n     \
    \       }\n        }\n    }\n    (largest_neg, smallest_pos)", '    unimplemented!()',
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", "    let mut largest = None;\n    let mut smallest\
    \ = None;\n    for i in lst {\n        if i > 0 {\n            if smallest ==\
    \ None || i < smallest.unwrap() {\n                smallest = Some(i);\n     \
    \       }\n        } else if i < 0 {\n            if largest == None || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        }\n    }\n   \
    \ (largest, smallest)", "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest_negative: Option<isize> = None;\n \
    \   let mut smallest_positive: Option<isize> = None;\n    for i in lst {\n   \
    \     if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', " \
    \   let mut largest_negative = None;\n    let mut smallest_positive = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", "    let mut min = None;\n    let\
    \ mut max = None;\n    for i in lst {\n        if i > 0 {\n            if let\
    \ Some(m) = min {\n                if i < m {\n                    min = Some(i);\n\
    \                }\n            } else {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if let Some(m) = max {\n \
    \               if i > m {\n                    max = Some(i);\n             \
    \   }\n            } else {\n                max = Some(i);\n            }\n \
    \       }\n    }\n    (max, min)", "    let mut min = None;\n    let mut max =\
    \ None;\n    for i in lst {\n        if i > 0 {\n            if min.is_none()\
    \ || i < min.unwrap() {\n                min = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if max.is_none() || i > max.unwrap() {\n  \
    \              max = Some(i);\n            }\n        }\n    }\n    (max, min)",
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  '    unimplemented!()', '    unimplemented!();', "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_neg: Option<isize> = None;\n    let mut smallest_pos: Option<isize>\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_neg.is_none()\
    \ || i > largest_neg.unwrap() {\n                largest_neg = Some(i);\n    \
    \        }\n        } else if i > 0 {\n            if smallest_pos.is_none() ||\
    \ i < smallest_pos.unwrap() {\n                smallest_pos = Some(i);\n     \
    \       }\n        }\n    }\n    (largest_neg, smallest_pos)", '    unimplemented!()',
  "    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if smallest == None || i < smallest.unwrap()\
    \ {\n                smallest = Some(i);\n            }\n        } else if i <\
    \ 0 {\n            if largest == None || i > largest.unwrap() {\n            \
    \    largest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)",
  "    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if smallest == None || i < smallest.unwrap()\
    \ {\n                smallest = Some(i);\n            }\n        } else if i <\
    \ 0 {\n            if largest == None || i > largest.unwrap() {\n            \
    \    largest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)",
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', "    let\
    \ mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n     \
    \   if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap() {\n \
    \               max_neg = Some(i);\n            }\n        } else if i > 0 {\n\
    \            if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)", "    let\
    \ mut neg = None;\n    let mut pos = None;\n    for i in lst {\n        if i <\
    \ 0 {\n            neg = match neg {\n                None => Some(i),\n     \
    \           Some(n) => Some(if i > n { i } else { n }),\n            };\n    \
    \    } else if i > 0 {\n            pos = match pos {\n                None =>\
    \ Some(i),\n                Some(p) => Some(if i < p { i } else { p }),\n    \
    \        };\n        }\n    }\n    (neg, pos)", '    unimplemented!()', '    unimplemented!()',
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  '    unimplemented!()', '    unimplemented!()', "    let mut min_pos = None;\n \
    \   let mut max_neg = None;\n    for i in lst {\n        if i > 0 {\n        \
    \    if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos =\
    \ Some(i);\n            }\n        } else if i < 0 {\n            if max_neg.is_none()\
    \ || i > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", "    let mut largest = None;\n   \
    \ let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n         \
    \   if let Some(s) = smallest {\n                if i < s {\n                \
    \    smallest = Some(i);\n                }\n            } else {\n          \
    \      smallest = Some(i);\n            }\n        } else if i < 0 {\n       \
    \     if let Some(l) = largest {\n                if i > l {\n               \
    \     largest = Some(i);\n                }\n            } else {\n          \
    \      largest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)",
  "    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if largest.is_none() || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if smallest.is_none() || i < smallest.unwrap() {\n        \
    \        smallest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut min_pos = None;\n    let mut max_neg = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if let Some(x) = min_pos {\n                if\
    \ i < x {\n                    min_pos = Some(i);\n                }\n       \
    \     } else {\n                min_pos = Some(i);\n            }\n        } else\
    \ if i < 0 {\n            if let Some(x) = max_neg {\n                if i > x\
    \ {\n                    max_neg = Some(i);\n                }\n            }\
    \ else {\n                max_neg = Some(i);\n            }\n        }\n    }\n\
    \    (max_neg, min_pos)", "    let mut max_neg = None;\n    let mut min_pos =\
    \ None;\n    for i in lst {\n        if i < 0 {\n            if max_neg.is_none()\
    \ || i > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n\
    \        } else if i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap()\
    \ {\n                min_pos = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", "    let mut max_neg = None;\n    let mut min_pos = None;\n\
    \    for i in lst {\n        if i > 0 {\n            if min_pos.is_none() || i\
    \ < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n  \
    \      } else if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", "    let mut largest_negative: Option<isize> = None;\n\
    \    let mut smallest_positive: Option<isize> = None;\n    for i in lst {\n  \
    \      if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", "    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", "    let mut largest_negative = None;\n\
    \    let mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n\
    \            if largest_negative.is_none() || i > largest_negative.unwrap() {\n\
    \                largest_negative = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest_neg = None;\n    let mut smallest_pos\
    \ = None;\n    for num in lst {\n        if num < 0 {\n            if largest_neg.is_none()\
    \ || num > largest_neg.unwrap() {\n                largest_neg = Some(num);\n\
    \            }\n        } else if num > 0 {\n            if smallest_pos.is_none()\
    \ || num < smallest_pos.unwrap() {\n                smallest_pos = Some(num);\n\
    \            }\n        }\n    }\n    (largest_neg, smallest_pos)", '    unimplemented!()',
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut min = None;\n    let mut max = None;\n    for\
    \ i in lst {\n        if i > 0 {\n            if min.is_none() || i < min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        } else if i < 0 {\n\
    \            if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest = None;\n \
    \   let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", "    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)", '    unimplemented!()',
  "    let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            match\
    \ largest_negative {\n                None => largest_negative = Some(i),\n  \
    \              Some(n) => {\n                    if i > n {\n                \
    \        largest_negative = Some(i);\n                    }\n                }\n\
    \            }\n        } else if i > 0 {\n            match smallest_positive\
    \ {\n                None => smallest_positive = Some(i),\n                Some(n)\
    \ => {\n                    if i < n {\n                        smallest_positive\
    \ = Some(i);\n                    }\n                }\n            }\n      \
    \  }\n    }\n    (largest_negative, smallest_positive)", "    let mut max_neg\
    \ = None;\n    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n\
    \            if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", '    unimplemented!()', "    let mut\
    \ largest_negative = None;\n    let mut smallest_positive = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            if largest_negative.is_none() || i >\
    \ largest_negative.unwrap() {\n                largest_negative = Some(i);\n \
    \           }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", "    let mut max_neg: Option<isize>\
    \ = None;\n    let mut min_pos: Option<isize> = None;\n    for i in lst {\n  \
    \      if i < 0 {\n            match max_neg {\n                None => max_neg\
    \ = Some(i),\n                Some(x) => if i > x { max_neg = Some(i) },\n   \
    \         }\n        } else if i > 0 {\n            match min_pos {\n        \
    \        None => min_pos = Some(i),\n                Some(x) => if i < x { min_pos\
    \ = Some(i) },\n            }\n        }\n    }\n    (max_neg, min_pos)", "  \
    \  let mut neg = None;\n    let mut pos = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            neg = match neg {\n                None => Some(i),\n \
    \               Some(x) => Some(if i > x { i } else { x }),\n            };\n\
    \        } else if i > 0 {\n            pos = match pos {\n                None\
    \ => Some(i),\n                Some(x) => Some(if i < x { i } else { x }),\n \
    \           };\n        }\n    }\n    (neg, pos)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i < 0 {\n           \
    \ if let Some(x) = max {\n                if i > x {\n                    max\
    \ = Some(i);\n                }\n            } else {\n                max = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if let Some(x) = min {\n\
    \                if i < x {\n                    min = Some(i);\n            \
    \    }\n            } else {\n                min = Some(i);\n            }\n\
    \        }\n    }\n    (max, min)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', "    let mut largest = None;\n \
    \   let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i > 0 {\n           \
    \ min = match min {\n                None => Some(i),\n                Some(x)\
    \ => Some(std::cmp::min(x, i)),\n            };\n        } else if i < 0 {\n \
    \           max = match max {\n                None => Some(i),\n            \
    \    Some(x) => Some(std::cmp::max(x, i)),\n            };\n        }\n    }\n\
    \    (max, min)", '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', "    let mut max_neg = None;\n \
    \   let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n        \
    \    if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg =\
    \ Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", "    let mut largest_negative = None;\n\
    \    let mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n\
    \            if largest_negative.is_none() || i > largest_negative.unwrap() {\n\
    \                largest_negative = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut smallest = None;\n\
    \    let mut largest = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     smallest = match smallest {\n                None => Some(i),\n        \
    \        Some(x) => Some(std::cmp::min(x, i)),\n            };\n        } else\
    \ if i < 0 {\n            largest = match largest {\n                None => Some(i),\n\
    \                Some(x) => Some(std::cmp::max(x, i)),\n            };\n     \
    \   }\n    }\n    (largest, smallest)", '    unimplemented!()', '    unimplemented!()',
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            max_neg = Some(i.max(max_neg.unwrap_or(i)));\n\
    \        } else if i > 0 {\n            min_pos = Some(i.min(min_pos.unwrap_or(i)));\n\
    \        }\n    }\n    (max_neg, min_pos)", '    unimplemented!()', '    unimplemented!()',
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest = None;\n    let mut smallest = None;\n\
    \    for i in lst {\n        if i > 0 {\n            if let Some(x) = smallest\
    \ {\n                if i < x {\n                    smallest = Some(i);\n   \
    \             }\n            } else {\n                smallest = Some(i);\n \
    \           }\n        } else if i < 0 {\n            if let Some(x) = largest\
    \ {\n                if i > x {\n                    largest = Some(i);\n    \
    \            }\n            } else {\n                largest = Some(i);\n   \
    \         }\n        }\n    }\n    (largest, smallest)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest = None;\n    let mut smallest = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest.is_none() || largest.unwrap()\
    \ < i {\n                largest = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest.is_none() || smallest.unwrap() > i {\n    \
    \            smallest = Some(i);\n            }\n        }\n    }\n    (largest,\
    \ smallest)", '    unimplemented!()', "    let mut largest_negative: Option<isize>\
    \ = None;\n    let mut smallest_positive: Option<isize> = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            match largest_negative {\n          \
    \      None => largest_negative = Some(i),\n                Some(x) => {\n   \
    \                 if i > x {\n                        largest_negative = Some(i);\n\
    \                    }\n                }\n            }\n        } else if i\
    \ > 0 {\n            match smallest_positive {\n                None => smallest_positive\
    \ = Some(i),\n                Some(x) => {\n                    if i < x {\n \
    \                       smallest_positive = Some(i);\n                    }\n\
    \                }\n            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative: Option<isize>\
    \ = None;\n    let mut smallest_positive: Option<isize> = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            if largest_negative.is_none() || i >\
    \ largest_negative.unwrap() {\n                largest_negative = Some(i);\n \
    \           }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", '    unimplemented!()', "    let\
    \ mut min = None;\n    let mut max = None;\n    for i in lst {\n        if i >\
    \ 0 {\n            min = match min {\n                None => Some(i),\n     \
    \           Some(x) => Some(std::cmp::min(x, i)),\n            };\n        } else\
    \ if i < 0 {\n            max = match max {\n                None => Some(i),\n\
    \                Some(x) => Some(std::cmp::max(x, i)),\n            };\n     \
    \   }\n    }\n    (max, min)", '    unimplemented!()', "    let mut max_neg =\
    \ None;\n    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n\
    \            max_neg = match max_neg {\n                None => Some(i),\n   \
    \             Some(x) => Some(if i > x { i } else { x }),\n            };\n  \
    \      } else if i > 0 {\n            min_pos = match min_pos {\n            \
    \    None => Some(i),\n                Some(x) => Some(if i < x { i } else { x\
    \ }),\n            };\n        }\n    }\n    (max_neg, min_pos)", "    let mut\
    \ largest_negative = None;\n    let mut smallest_positive = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            if largest_negative.is_none() || i >\
    \ largest_negative.unwrap() {\n                largest_negative = Some(i);\n \
    \           }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_neg: Option<isize> = None;\n    let mut smallest_pos: Option<isize>\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_neg.is_none()\
    \ || i > largest_neg.unwrap() {\n                largest_neg = Some(i);\n    \
    \        }\n        } else if i > 0 {\n            if smallest_pos.is_none() ||\
    \ i < smallest_pos.unwrap() {\n                smallest_pos = Some(i);\n     \
    \       }\n        }\n    }\n    (largest_neg, smallest_pos)", '    unimplemented!()',
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut smallest = None;\n\
    \    let mut largest = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if smallest == None {\n                smallest = Some(i);\n           \
    \ } else if i < smallest.unwrap() {\n                smallest = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if largest == None {\n   \
    \             largest = Some(i);\n            } else if i > largest.unwrap() {\n\
    \                largest = Some(i);\n            }\n        }\n    }\n    (largest,\
    \ smallest)", "    let mut min = None;\n    let mut max = None;\n    for i in\
    \ lst {\n        if i > 0 {\n            if min.is_none() || i < min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        } else if i < 0 {\n\
    \            if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", '    unimplemented!()', "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i > 0 {\n           \
    \ if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", '    unimplemented!()', "    let mut largest_negative = None;\n    let\
    \ mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n    \
    \        if largest_negative.is_none() || largest_negative.unwrap() < i {\n  \
    \              largest_negative = Some(i);\n            }\n        } else if i\
    \ > 0 {\n            if smallest_positive.is_none() || smallest_positive.unwrap()\
    \ > i {\n                smallest_positive = Some(i);\n            }\n       \
    \ }\n    }\n    (largest_negative, smallest_positive)", "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', " \
    \   let mut largest_negative = None;\n    let mut smallest_positive = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)"]
stop_tokens:
- "\n}"
