name: HumanEval_151_double_the_difference
language: rs
prompt: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
  /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
  /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
  \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n\
  /// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst:\
  \ Vec<f64>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
  \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
  \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n  \
  \  assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
  \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
  \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
completions: ["    let mut sum: isize = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum * 2", '    unimplemented!()',
  "    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract()\
    \ == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum += i.powi(2)\
    \ as isize;\n            }\n        }\n    }\n    return sum * 2;", "    let mut\
    \ sum = 0;\n    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n   \
    \         if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n  \
    \          }\n        }\n    }\n    sum * 2", "    let mut sum = 0;\n    for i\
    \ in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n          \
    \  sum += i as isize;\n        }\n    }\n    sum * 2", "    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2", "    let mut sum = 0;\n    for\
    \ i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n        \
    \    sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2", '    unimplemented!()',
  "    let mut sum = 0;\n    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0\
    \ {\n            sum += (i * i) as isize;\n        }\n    }\n    sum * 2", " \
    \   let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract()\
    \ == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum += i.powi(2)\
    \ as isize;\n            }\n        }\n    }\n    sum * 2", "    let mut sum =\
    \ 0;\n    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n         \
    \   if i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n \
    \       }\n    }\n    sum * 2", "    let mut sum = 0;\n    for i in lst {\n  \
    \      if i.is_sign_positive() && i.fract() == 0.0 {\n            if i % 2.0 ==\
    \ 1.0 {\n                sum += i as isize;\n            }\n        }\n    }\n\
    \    sum * 2", "    let mut sum = 0;\n    for i in lst {\n        if i % 2.0 ==\
    \ 1.0 && i > 0.0 {\n            sum += i.powi(2) as isize;\n        }\n    }\n\
    \    sum * 2", "    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.is_integer() {\n            sum += (i as isize) * (i as isize);\n     \
    \   }\n    }\n    sum * 2", "    let mut sum = 0;\n    for i in lst {\n      \
    \  if i.is_sign_positive() && i.fract() == 0.0 {\n            if i % 2.0 == 1.0\
    \ {\n                sum += i.powi(2) as isize;\n            }\n        }\n  \
    \  }\n    sum * 2", "    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize) * (i as isize);\n   \
    \     }\n    }\n    sum * 2", "    let mut sum = 0;\n    for i in lst {\n    \
    \    if i.is_sign_positive() && i.fract() == 0.0 {\n            sum += (i as isize)\
    \ * (i as isize);\n        }\n    }\n    sum * 2", '    unimplemented!()', " \
    \   let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract()\
    \ == 0.0 {\n            sum += i as isize;\n        }\n    }\n    sum * sum",
  "    let mut sum = 0;\n    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0\
    \ {\n            sum += i.powi(2) as isize;\n        }\n    }\n    sum * 2"]
stop_tokens:
- "\n}"
