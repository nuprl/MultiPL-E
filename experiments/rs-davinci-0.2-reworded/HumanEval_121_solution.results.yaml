name: HumanEval_121_solution
language: rs
results:
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp24j3_2l4.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpdiebim5w.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpz6e9u56u.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x % 2).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `12`', /tmp/tmpw52yaeku.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp9orsyst_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpqu_v3txl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpx9k1d238.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp3gziinad.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp52sh912a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpnsv8v99y.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp5vrbbkhx.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpcy7la_ab.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp0biizsk9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp_aax2o5g.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpzeru03qs.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2a40dl4b.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpsz9u0bgh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpc0e3v38o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp916lltsq.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmps3dqz43e.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpzbrxag2g.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp31d04vxp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpg3rfderp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpruqzax9y.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpmbi4wmq3.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpasaazx1j.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpwqio19x8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpwh98f50a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6lw6i5xg.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpld4_w2pi.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpnnx94tz5.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjlho6fmk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpqqer0jp7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpmuz8lz1w.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpc90i6c2w.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpe9ivtbo2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp27x8dmou.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpj2e59im2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp6g10cozi.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpii05x7sl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpr8lx_w24.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpyzrwbwww.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmps688akn7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpr4xd2mn6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpv7ue4vyq.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpl5wpu165.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp24i6qbhr.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp26ucih4o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpeqn546re.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp9oiqjanp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpn89zxi69.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpdlapfoq2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpbw19dj0y.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpxq588579.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmphoq2eenf.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpk4cw3mbc.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmptu_cqb73.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpt_th253s.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpnijk6wq_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp5bnmqii6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpkosy5div.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpu_28fbpe.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpcjz75wjo.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp9zppgu64.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmprldczcv8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp7ua7zqv9.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpt1rbh4it.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpjukj0_qz.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmppjdsz7fa.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmprugu22ol.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp84b80iqd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpxkjv3du9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpogoo83r2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpr9pj67_d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpdc5tbx1n.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp2nvjm4hd.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp85t9cfyb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp3mwy7bbo.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmph_8i1iye.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpq9bgawf5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpavrwer93.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp3b4x5dog.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpuoe0o914.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp5y6ujgf8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp_s_jy4y2.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp1jutpw_g.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmprkd_csvc.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp8qkexi0j.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpdq0474yp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpf31rmcus.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpxetv8lgl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpoeschmcl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp0y8y8eqc.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmprjess3tn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpyq0fld1q.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp0ul8c2e4.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpmy4qoxhi.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp7bez2ih_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp1znom8mm.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpprab1fj4.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpwzblqhli.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpu1po8mpg.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpxnsshms1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpmoaf9oo0.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpvpk_5g_m.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp4cs5310i.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp5262zqxz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpcq2buhx4.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpsy4t28zw.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp7vo1fgo5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmps8jxfdqn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpbd3aktr5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpfq1w2l6n.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpshwpvqa6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpccb9oekj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpfpi381xa.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp012o_n_7.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpdh9sqfoy.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp0gionizd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpfnwb7h1n.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
