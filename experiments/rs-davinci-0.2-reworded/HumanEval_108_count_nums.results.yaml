name: HumanEval_108_count_nums
language: rs
results:
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpq3pegfe4.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i < 0 {\n            if i.abs() % 10 > 0 {\n                count += 1;\n\
    \            }\n        } else {\n            if i % 10 > 0 {\n              \
    \  count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp12yu_yxe.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpz4owem2z.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() % 10 + i.abs() / 10 % 10 + i.abs() / 100 % 10 > 0 {\n           \
    \ count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmplvzeuuyr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() < 10 {\n            if i != 0 {\n                count += 1;\n  \
    \          }\n        } else {\n            let mut sum = 0;\n            let\
    \ mut num = i.abs();\n            while num > 0 {\n                sum += num\
    \ % 10;\n                num /= 10;\n            }\n            if sum > 0 {\n\
    \                count += 1;\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpxkfqnm34.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp6q9q_ykj.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpl9zdwcl_.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x % 10 + (x / 10).abs()).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5_m8s5x1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmps787b3ui.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpvn46qcg0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x % 10 + (x / 10).abs()).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqhz8vyi5.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() < 10 {\n            if i != 0 {\n                count += 1;\n  \
    \          }\n        } else {\n            let mut sum = 0;\n            let\
    \ mut j = i.abs();\n            while j > 0 {\n                sum += j % 10;\n\
    \                j /= 10;\n            }\n            if sum > 0 {\n         \
    \       count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp1y5z8o08.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut x = i;\n        if x < 0 {\n            x\
    \ = -x;\n        }\n        while x > 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmperhgqpq7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_ijvhs7_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpb2xsef2j.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4tozx0v9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp3dimt98k.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpsni43ym1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() ==\
    \ x % 10 + x / 10).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpwf531h__.rs:12:55\n\
    \   |\n12 |     arr.iter().filter(|x| x.abs() > 9 || x.abs() == x % 10 + x / 10).count()\
    \ as isize\n   |                                                     - ^ -- {integer}\n\
    \   |                                                     |\n   |            \
    \                                         &&isize\n   |\nhelp: `%` can be used\
    \ on `isize`, you can dereference `x`\n   |\n12 |     arr.iter().filter(|x| x.abs()\
    \ > 9 || x.abs() == *x % 10 + x / 10).count() as isize\n   |                 \
    \                                    +\n\nerror[E0369]: cannot divide `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmpwf531h__.rs:12:64\n   |\n12 |     arr.iter().filter(|x|\
    \ x.abs() > 9 || x.abs() == x % 10 + x / 10).count() as isize\n   |          \
    \                                                    - ^ -- {integer}\n   |  \
    \                                                            |\n   |         \
    \                                                     &&isize\n   |\nhelp: `/`\
    \ can be used on `isize`, you can dereference `x`\n   |\n12 |     arr.iter().filter(|x|\
    \ x.abs() > 9 || x.abs() == x % 10 + *x / 10).count() as isize\n   |         \
    \                                                     +\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp461n9kpc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp8alyu6gp.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut x = i;\n        if x < 0 {\n            x\
    \ = -x;\n        }\n        while x > 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpomwdlbe_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut n = i;\n        if n < 0 {\n            n\
    \ = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmplsltchmf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpafpfiee8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() ==\
    \ x % 10 + (x / 10).abs()).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp1y4w3q1t.rs:12:55\n\
    \   |\n12 |     arr.iter().filter(|x| x.abs() > 9 || x.abs() == x % 10 + (x /\
    \ 10).abs()).count() as isize\n   |                                          \
    \           - ^ -- {integer}\n   |                                           \
    \          |\n   |                                                     &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n12 | \
    \    arr.iter().filter(|x| x.abs() > 9 || x.abs() == *x % 10 + (x / 10).abs()).count()\
    \ as isize\n   |                                                     +\n\nerror[E0369]:\
    \ cannot divide `&&isize` by `{integer}`\n  --> /tmp/tmp1y4w3q1t.rs:12:65\n  \
    \ |\n12 |     arr.iter().filter(|x| x.abs() > 9 || x.abs() == x % 10 + (x / 10).abs()).count()\
    \ as isize\n   |                                                             \
    \  - ^ -- {integer}\n   |                                                    \
    \           |\n   |                                                          \
    \     &&isize\n   |\nhelp: `/` can be used on `isize`, you can dereference `x`\n\
    \   |\n12 |     arr.iter().filter(|x| x.abs() > 9 || x.abs() == x % 10 + (*x /\
    \ 10).abs()).count() as isize\n   |                                          \
    \                     +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i < 0 {\n            if i.abs() % 10 > 0 {\n                count += 1;\n\
    \            }\n        } else {\n            if i % 10 > 0 {\n              \
    \  count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp897by_lg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| sum_digits(x.abs()) > 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmp1r3dhzrk.rs:12:27\n\
    \   |\n12 |     arr.iter().filter(|x| sum_digits(x.abs()) > 0).count() as isize\n\
    \   |                           ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp34w8vpgh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp3qh8mbse.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsnq6ils0.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i < 0 {\n            if i.abs() % 10 > 0 {\n                count += 1;\n\
    \            }\n        } else {\n            if i % 10 > 0 {\n              \
    \  count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpwqjamtl7.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6m6md_zd.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpo5mg2c2k.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpzu7vtrtj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ 0).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpswctfddx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpf9dt54yt.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpacos_xgp.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_xql80kq.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvb4sa269.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp34hyxicf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() % 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp5gxwhxer.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpt2ml6vt1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpe55h39sn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbusaalsq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp3oucowy6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpn_f2zsr6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp8m7zlwyo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm1n54dwk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() < 10 {\n            if i.abs() > 0 {\n                count += 1;\n\
    \            }\n        } else {\n            let mut sum = 0;\n            let\
    \ mut j = i.abs();\n            while j > 0 {\n                sum += j % 10;\n\
    \                j /= 10;\n            }\n            if sum > 0 {\n         \
    \       count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpded7ng8x.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp9k4xz6uf.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp2xg32cys.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpq4e5r9s4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpiact52u4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() % 10 > 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmprp96qrpb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpp5ablfzo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpkyh26xnd.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmppplfpii5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpoj4w4hd_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdhyaht1b.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6mssi1yv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpd_r3gm0e.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp9lmcdz5b.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| sum_digits(x) > 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmpwamosx08.rs:12:27\n\
    \   |\n12 |     arr.iter().filter(|x| sum_digits(x) > 0).count() as isize\n  \
    \ |                           ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpc01licjn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ 0).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprzzawp_z.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmppx3svl8p.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvqslqyp2.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpnxrghbk1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpyfrxjxgt.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp164zzfp0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp2fjzgqpu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpjxrieku8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() % 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmmc8iyu7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut num = num;\n        if num < 0 {\n     \
    \       num = -num;\n        }\n        while num > 0 {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n           \
    \ count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpr2uk3c07.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpo77p6h4p.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmproyvzmd6.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() <\
    \ 1).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphjjfv7ju.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_p684zno.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpslao0bw2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp2jvq6ku9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpoqpjk2wl.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp2i539x8e.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut num = num;\n        if num < 0 {\n     \
    \       num = -num;\n        }\n        while num > 0 {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n           \
    \ count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpuu2112sb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut x = i;\n        while x != 0 {\n         \
    \   sum += x % 10;\n            x /= 10;\n        }\n        if sum > 0 {\n  \
    \          count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpjyw3itf0.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ 0).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp18nnmozi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpu8zyo6bk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpk0ps8gaf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmplxerciri.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzt62ep8z.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmplnjiymkh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() ==\
    \ x % 10 + x / 10).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp67o41a5q.rs:12:55\n\
    \   |\n12 |     arr.iter().filter(|x| x.abs() > 9 || x.abs() == x % 10 + x / 10).count()\
    \ as isize\n   |                                                     - ^ -- {integer}\n\
    \   |                                                     |\n   |            \
    \                                         &&isize\n   |\nhelp: `%` can be used\
    \ on `isize`, you can dereference `x`\n   |\n12 |     arr.iter().filter(|x| x.abs()\
    \ > 9 || x.abs() == *x % 10 + x / 10).count() as isize\n   |                 \
    \                                    +\n\nerror[E0369]: cannot divide `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmp67o41a5q.rs:12:64\n   |\n12 |     arr.iter().filter(|x|\
    \ x.abs() > 9 || x.abs() == x % 10 + x / 10).count() as isize\n   |          \
    \                                                    - ^ -- {integer}\n   |  \
    \                                                            |\n   |         \
    \                                                     &&isize\n   |\nhelp: `/`\
    \ can be used on `isize`, you can dereference `x`\n   |\n12 |     arr.iter().filter(|x|\
    \ x.abs() > 9 || x.abs() == x % 10 + *x / 10).count() as isize\n   |         \
    \                                                     +\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpx9imfay7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpccwerv8o.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpxtg4c96k.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnjetyn5d.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp0c_nuq0g.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbfcv_u6m.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4mr1lj97.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut num = num;\n        if num < 0 {\n     \
    \       num = -num;\n        }\n        while num > 0 {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n           \
    \ count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpvmhko78x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpdbwhw_cs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpug1w6ua2.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvj8lgba4.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() < 10 {\n            if i.abs() > 0 {\n                count += 1;\n\
    \            }\n        } else {\n            let mut sum = 0;\n            let\
    \ mut num = i.abs();\n            while num > 0 {\n                sum += num\
    \ % 10;\n                num /= 10;\n            }\n            if sum > 0 {\n\
    \                count += 1;\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpgjzwd9tv.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() > 9 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpu6u56x69.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1gyie6o9.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpa2w1fpp2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpb589pssl.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp5_jfb7cw.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpaguyce6n.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpjb2g23w2.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpe0yj1pjy.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpgkuorhgr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpptyrhgfc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x % 10 + x / 10).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppfh1bc9p.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmperpk7scx.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x % 10 + x / 10).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcj17kajb.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo7mdrwbw.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i < 0 {\n            if i.abs() % 10 != 0 {\n                count += 1;\n\
    \            }\n        } else {\n            if i % 10 != 0 {\n             \
    \   count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpdvkuti89.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp7kb5mj6i.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmprm3ksttg.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpsupk_j6d.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpd3ence9j.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpwla_8poc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp9_0g75pt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpr_sos550.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpct60m8bf.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4roiotvc.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpxgywhkgk.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpu8kju5dy.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() ==\
    \ x % 10 + (x / 10).abs()).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpj8cua_1h.rs:12:55\n\
    \   |\n12 |     arr.iter().filter(|x| x.abs() > 9 || x.abs() == x % 10 + (x /\
    \ 10).abs()).count() as isize\n   |                                          \
    \           - ^ -- {integer}\n   |                                           \
    \          |\n   |                                                     &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n12 | \
    \    arr.iter().filter(|x| x.abs() > 9 || x.abs() == *x % 10 + (x / 10).abs()).count()\
    \ as isize\n   |                                                     +\n\nerror[E0369]:\
    \ cannot divide `&&isize` by `{integer}`\n  --> /tmp/tmpj8cua_1h.rs:12:65\n  \
    \ |\n12 |     arr.iter().filter(|x| x.abs() > 9 || x.abs() == x % 10 + (x / 10).abs()).count()\
    \ as isize\n   |                                                             \
    \  - ^ -- {integer}\n   |                                                    \
    \           |\n   |                                                          \
    \     &&isize\n   |\nhelp: `/` can be used on `isize`, you can dereference `x`\n\
    \   |\n12 |     arr.iter().filter(|x| x.abs() > 9 || x.abs() == x % 10 + (*x /\
    \ 10).abs()).count() as isize\n   |                                          \
    \                     +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() / 10 + x.abs() %\
    \ 10 > 0).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpd1pv8yf1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp3p_edfzy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6o0p6hiz.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpogq20e2x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpmderjuqt.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i < 0 {\n            let mut num = i;\n            let mut sum = 0;\n   \
    \         while num != 0 {\n                sum += num % 10;\n               \
    \ num /= 10;\n            }\n            if sum > 0 {\n                count +=\
    \ 1;\n            }\n        } else {\n            let mut num = i;\n        \
    \    let mut sum = 0;\n            while num != 0 {\n                sum += num\
    \ % 10;\n                num /= 10;\n            }\n            if sum > 0 {\n\
    \                count += 1;\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpuyi0i0lq.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() / 10 + x.abs() %\
    \ 10 > 0).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpau2tkgl7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpr2ooatao.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpxifoleb4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp83n5dl2a.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpxrn8u9q8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpugb5dxgb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpa5p2a5bo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() ==\
    \ 0).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpycd5rhm1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp2bzfyskq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmcu1f152.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp5fnieskq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmptkbp4g2k.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmphjzzukxg.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmph6kkrdgf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp3xy8_3id.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpl6smskeo.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbplp_gyv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut n = num;\n        if n < 0 {\n         \
    \   n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpfkh9ygu6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp751e2jib.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i < 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp9pxh4jrm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp49820m5i.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp8pvga3yb.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpqq3kxg53.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpc48kud1b.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmphj_gs34g.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_ccri5l3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmph48l6hc6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() / 10 + x.abs() %\
    \ 10 > 0).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpxkc2qxix.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num != 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_23vq745.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpf6577kt_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp7bsustky.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() < 10 {\n            if i != 0 {\n                count += 1;\n  \
    \          }\n        } else {\n            let mut sum = 0;\n            let\
    \ mut j = i.abs();\n            while j > 0 {\n                sum += j % 10;\n\
    \                j /= 10;\n            }\n            if sum > 0 {\n         \
    \       count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp1hut6_7y.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpz2gbrbgs.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmi1o7a_o.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnlsjx40f.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i < 0 {\n            if i.abs() % 10 > 0 {\n                count += 1;\n\
    \            }\n        } else {\n            if i % 10 > 0 {\n              \
    \  count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpfv2e2z7q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp8mwv0tgo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpkmkbixkp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpxll0hlgm.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpiap_ne_t.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmprfebhacu.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut j = i;\n        if j < 0 {\n            j\
    \ = -j;\n        }\n        while j > 0 {\n            sum += j % 10;\n      \
    \      j /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp8unhz488.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() % 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmhj14pyf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpb_ba7svp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp8spq49q8.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpxmnz096s.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmputlpy7vg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp32g9evvs.rs:12:54\n   |\n\
    12 |     arr.iter().filter(|&x| x.abs() > 9 || x.abs() == x).count() as isize\n\
    \   |                                                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \   arr.iter().filter(|&x| x.abs() > 9 || x.abs() == *x).count() as isize\n  \
    \ |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpzx9v86dh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4skhvkcd.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp1bctykw6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        while num != 0 {\n     \
    \       sum += num % 10;\n            num /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpgyvnes05.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplkcx6utu.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_vix53fi.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   let mut sum = 0;\n        let mut num = num;\n        if num < 0 {\n     \
    \       num = -num;\n        }\n        while num > 0 {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n           \
    \ count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpjsjtaoyk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpowf4zj4q.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for n in arr {\n       \
    \ let mut sum = 0;\n        let mut n = n;\n        if n < 0 {\n            n\
    \ = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpsw83w92q.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpwozttnea.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv5ms8qyj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ if i.abs() < 10 {\n            if i != 0 {\n                count += 1;\n  \
    \          }\n        } else {\n            let mut sum = 0;\n            let\
    \ mut num = i.abs();\n            while num > 0 {\n                sum += num\
    \ % 10;\n                num /= 10;\n            }\n            if sum > 0 {\n\
    \                count += 1;\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp5tucborn.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() ==\
    \ x % 10 + x / 10).count() as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0si3joyf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp5737ku0e.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in arr {\n       \
    \ let mut sum = 0;\n        let mut num = i;\n        if num < 0 {\n         \
    \   num = -num;\n        }\n        while num > 0 {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpa_hh_59m.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function count_nums which takes a vector of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2_9jpo7d.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
