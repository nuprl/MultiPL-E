name: HumanEval_97_multiply
language: rs
results:
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpv0v0s3_9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  let a = a % 10;\n    let b = b % 10;\n    a * b\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp5jet7rnd.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmplt8ywrr0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpqolago32.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp79hn1e65.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf_zzzl08.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpqx5hr9l5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp6_8ywn85.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpj8rqpg5r.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpgqed4k76.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpvr61tuu0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp6jilhpbi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpo3sxdfd8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpwg6sjvmf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp7z351uw5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpyzbn5rgn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpx0n6oywz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1cks0dz7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp98_oax_e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpuev6epn4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp26bmvd7d.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1gkkrrof.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpfhb2qerf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp38ticcy3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  let a = a % 10;\n    let b = b % 10;\n    a * b\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp9yvzef66.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpz5gfxgqv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpjeyrxmsw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpfvt2m7i3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmphwvn1t9b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpky45bdaw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let (a, b) = (a.abs(), b.abs());\n    (a %\
    \ 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpy10u_25o.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp8ebef5m_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpjowynled.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmppvoeqzyf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpcmkuz8ib.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpnovmve8j.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpyie_6kvp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpndi24tn1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpct1e8t_a.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpy_3lge9p.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpgxgezfpg.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpwl_rqrl5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpxe5bscc6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmppkzzc_w3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpgfo_v6a1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpqi1zxvv8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmps76zwl_y.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpfgbaxgvt.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp4gxv5dem.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp09cx1cxn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpmdpw5xy2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpb2anci32.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpr_rehavh.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmptcbok38h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpi85j2v9p.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp5tx0twud.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp5oshqi0w.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  let a = a % 10;\n    let b = b % 10;\n    a * b\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmph92ca8eg.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpwza7uri2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmppuo3b472.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpwk4b86du.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpgsr0jdj2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpl4csh2j1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp3nv1pxc4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp3xlamxr5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpac2wg320.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmprdh11tex.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp231iry2e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp95nkpycv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpwzas019o.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let (a, b) = (a.abs(), b.abs());\n    (a %\
    \ 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmptxhfmn6n.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmprd411wnh.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpsfg1sdp8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpjgfzp3dn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmphe4cr9e2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp6uyzewha.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpyx9eem2g.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp8ldb86ov.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpeuga8ybe.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpok78g71_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
