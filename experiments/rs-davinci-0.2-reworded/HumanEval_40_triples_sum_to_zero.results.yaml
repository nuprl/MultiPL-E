name: HumanEval_40_triples_sum_to_zero
language: rs
results:
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: Implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbzkcwufh.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzlzqg_bd.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    while i < l.len() - 2 {\n        let mut j = i + 1;\n        let mut k =\
    \ l.len() - 1;\n        while j < k {\n            let sum = l[i] + l[j] + l[k];\n\
    \            if sum == 0 {\n                return true;\n            } else if\
    \ sum < 0 {\n                j += 1;\n            } else {\n                k\
    \ -= 1;\n            }\n        }\n        i += 1;\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpplnyz147.rs:18:15\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpilsah_8r.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9y45dfgi.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: Implement me!\n    false\n}\n\nfn main()\
    \ {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpka7u_x99.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjvreuy0h.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmbb28yuw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in (i + 1)..l.len()\
    \ {\n            for k in (j + 1)..l.len() {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4zdudqjx.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 3 {\n        return false;\n    }\n\
    \    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    while i < l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjsogpfnh.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let a = l[i];\n        let mut j = i + 1;\n        let mut k\
    \ = l.len() - 1;\n        while j < k {\n            let b = l[j];\n         \
    \   let c = l[k];\n            if a + b + c == 0 {\n                return true;\n\
    \            } else if a + b + c < 0 {\n                j += 1;\n            }\
    \ else {\n                k -= 1;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpljaymtrf.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    while i < l.len() - 2 {\n        let mut j = i + 1;\n        let mut k =\
    \ l.len() - 1;\n        while j < k {\n            let sum = l[i] + l[j] + l[k];\n\
    \            if sum == 0 {\n                return true;\n            } else if\
    \ sum < 0 {\n                j += 1;\n            } else {\n                k\
    \ -= 1;\n            }\n        }\n        i += 1;\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpsr49dru4.rs:18:15\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpljb94ztb.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdmu7kjah.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkg74s83i.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppm0pfvoy.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpqpuoyo9w.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0gvajao2.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpns9tjdwf.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut left = i + 1;\n        let mut right = l.len() - 1;\n   \
    \     while left < right {\n            let sum = l[i] + l[left] + l[right];\n\
    \            if sum == 0 {\n                return true;\n            } else if\
    \ sum < 0 {\n                left += 1;\n            } else {\n              \
    \  right -= 1;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3,\
    \ 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpsjfpaa6r.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 3 {\n        return false;\n    }\n\
    \    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 2 {\n        let\
    \ mut j = i + 1;\n        let mut k = l.len() - 1;\n        while j < k {\n  \
    \          let sum = l[i] + l[j] + l[k];\n            if sum == 0 {\n        \
    \        return true;\n            } else if sum < 0 {\n                j += 1;\n\
    \            } else {\n                k -= 1;\n            }\n        }\n   \
    \ }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp_v13y_lp.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = 1;\n    let mut k = l.len() - 1;\n    while i < j && j < k {\n\
    \        let sum = l[i] + l[j] + l[k];\n        if sum == 0 {\n            return\
    \ true;\n        } else if sum < 0 {\n            j += 1;\n        } else {\n\
    \            k -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpgj9sh57h.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let a = l[i];\n        let mut j = i + 1;\n        let mut k = l.len()\
    \ - 1;\n        while j < k {\n            let b = l[j];\n            let c =\
    \ l[k];\n            if a + b + c == 0 {\n                return true;\n     \
    \       } else if a + b + c < 0 {\n                j += 1;\n            } else\
    \ {\n                k -= 1;\n            }\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for (i, x) in l.iter().enumerate() {\n        for\
    \ (j, y) in l.iter().enumerate() {\n            for (k, z) in l.iter().enumerate()\
    \ {\n                if i != j && i != k && j != k && x + y + z == 0 {\n     \
    \               return true;\n                }\n            }\n        }\n  \
    \  }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp21o6hsn5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 3 {\n        return false;\n    }\n\
    \    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for\
    \ k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n      \
    \              return true;\n                }\n            }\n        }\n   \
    \ }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO\n    false\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp56im2imv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0kd84_pn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplds5bacw.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqk5kxv4p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: Implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdzk8zgat.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = 1;\n    let mut k = l.len() - 1;\n    while i < j && j < k {\n\
    \        let sum = l[i] + l[j] + l[k];\n        if sum == 0 {\n            return\
    \ true;\n        } else if sum < 0 {\n            j += 1;\n        } else {\n\
    \            k -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpwamdvf3h.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoouv3o5j.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpesuonl7o.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmwil2v9b.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3lz4q7i4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 3 {\n        return false;\n    }\n\
    \    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 2 {\n        let\
    \ mut j = i + 1;\n        let mut k = l.len() - 1;\n        while j < k {\n  \
    \          let sum = l[i] + l[j] + l[k];\n            if sum == 0 {\n        \
    \        return true;\n            } else if sum < 0 {\n                j += 1;\n\
    \            } else {\n                k -= 1;\n            }\n        }\n   \
    \ }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpj1wosflv.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    while i < l.len() - 2 {\n        let mut j = i + 1;\n        let mut k =\
    \ l.len() - 1;\n        while j < k {\n            let sum = l[i] + l[j] + l[k];\n\
    \            if sum == 0 {\n                return true;\n            } else if\
    \ sum < 0 {\n                j += 1;\n            } else {\n                k\
    \ -= 1;\n            }\n        }\n        i += 1;\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpyzmynh4b.rs:18:15\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    while i < l.len() - 2 {\n        let mut j = i + 1;\n        let mut k =\
    \ l.len() - 1;\n        while j < k {\n            let sum = l[i] + l[j] + l[k];\n\
    \            if sum == 0 {\n                return true;\n            } else if\
    \ sum < 0 {\n                j += 1;\n            } else {\n                k\
    \ -= 1;\n            }\n        }\n        i += 1;\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpw2fiyp5n.rs:18:15\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuo4c2jsj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpx5g6eifp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe734yh8s.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmplp0010fi.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: Implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdh_q70xd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 3 {\n        return false;\n    }\n\n\
    \    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for\
    \ k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n      \
    \              return true;\n                }\n            }\n        }\n   \
    \ }\n\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpi5n3m2wu.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut left = i + 1;\n        let mut right = l.len() - 1;\n   \
    \     while left < right {\n            let sum = l[i] + l[left] + l[right];\n\
    \            if sum == 0 {\n                return true;\n            } else if\
    \ sum < 0 {\n                left += 1;\n            } else {\n              \
    \  right -= 1;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3,\
    \ 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ - 2 {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n      \
    \  while j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum\
    \ == 0 {\n                return true;\n            } else if sum < 0 {\n    \
    \            j += 1;\n            } else {\n                k -= 1;\n        \
    \    }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp49b5fz66.rs:17:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6onbw4yt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: Implement me!\n    false\n}\n\nfn main()\
    \ {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpswuudme3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0wh34g3i.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function.\n    false\n}\n\
    \nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5athhnq5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9jysml7k.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    while i < l.len() - 2 {\n        let mut j = i + 1;\n        let mut k =\
    \ l.len() - 1;\n        while j < k {\n            let sum = l[i] + l[j] + l[k];\n\
    \            if sum == 0 {\n                return true;\n            } else if\
    \ sum < 0 {\n                j += 1;\n            } else {\n                k\
    \ -= 1;\n            }\n        }\n        i += 1;\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpfs1o0yti.rs:18:15\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmu3dqu84.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa60akb3i.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptkprjidv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6zmska6z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkma4lyca.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_462wesh.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    while i < l.len() - 2 {\n        let mut j = i + 1;\n        let mut k =\
    \ l.len() - 1;\n        while j < k {\n            let sum = l[i] + l[j] + l[k];\n\
    \            if sum == 0 {\n                return true;\n            } else if\
    \ sum < 0 {\n                j += 1;\n            } else {\n                k\
    \ -= 1;\n            }\n        }\n        i += 1;\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp_a9wqech.rs:18:15\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while\
    \ j < k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0\
    \ {\n                return true;\n            } else if sum < 0 {\n         \
    \       j += 1;\n            } else {\n                k -= 1;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = 1;\n    let mut k = l.len() - 1;\n    while i < j && j < k {\n\
    \        let sum = l[i] + l[j] + l[k];\n        if sum == 0 {\n            return\
    \ true;\n        } else if sum < 0 {\n            j += 1;\n        } else {\n\
    \            k -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2l2fqzau.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in (i + 1)..l.len()\
    \ {\n            for k in (j + 1)..l.len() {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are three distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
