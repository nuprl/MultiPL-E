language: rs
name: HumanEval_139_special_factorial
results:
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpz4rufbdv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= i * factorial(i - 1);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpifzo8v_9.rs:12:23\n\
    \   |\n12 |         result *= i * factorial(i - 1);\n   |                    \
    \   ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpz4rufbdv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: Implement the function here\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpc3ybyuth.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpz4rufbdv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorial = 1;\n    for i in 1..n + 1 {\n   \
    \     factorial *= i;\n    }\n    factorial\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpj7a3hrzz.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpz4rufbdv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= i;\n        result *= i-1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmpnf0y_3nc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpmdc38y9s.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n\n    let mut\
    \ result = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n\n    for i\
    \ in 1..n {\n        result *= i;\n    }\n\n    result\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `288`', /tmp/tmp35torq07.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: Implement the function here\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpc3ybyuth.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorial = 1;\n    for i in 1..n + 1 {\n   \
    \     factorial *= i;\n    }\n    factorial\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpj7a3hrzz.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpz4rufbdv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n\n    let mut\
    \ result = 1;\n    for i in 1..n + 1 {\n        result *= factorial(i);\n    }\n\
    \n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpyprlfk2o.rs:16:19\n\
    \   |\n16 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpmdc38y9s.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpmdc38y9s.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpgfr8s6fm.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorial = 1;\n    for i in 1..n + 1 {\n   \
    \     factorial *= i;\n    }\n    factorial\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpj7a3hrzz.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpgfr8s6fm.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpmdc38y9s.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= i * factorial(i - 1);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpifzo8v_9.rs:12:23\n\
    \   |\n12 |         result *= i * factorial(i - 1);\n   |                    \
    \   ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: Implement the function here\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpc3ybyuth.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpmdc38y9s.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n + 1 {\n        result *= factorial(i);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp_pd1hz3t.rs:15:19\n\
    \   |\n15 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: Implement special_factorial\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnqtw4ww3.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorial = 1;\n    for i in 1..n+1 {\n     \
    \   factorial *= i;\n    }\n    factorial\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpqs6tq7_4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpgfr8s6fm.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpz4rufbdv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpmdc38y9s.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpz4rufbdv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpmdc38y9s.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpz4rufbdv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp05p8t6ev.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= i;\n        result *= factorial(i-1);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp5yjsya_v.rs:13:19\n\
    \   |\n13 |         result *= factorial(i-1);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n + 1 {\n        result *= factorial(i);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp_pd1hz3t.rs:15:19\n\
    \   |\n15 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9wakaxci.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= i * factorial(i - 1);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpifzo8v_9.rs:12:23\n\
    \   |\n12 |         result *= i * factorial(i - 1);\n   |                    \
    \   ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n + 1 {\n        result *= factorial(i);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmph_5sfevy.rs:15:19\n\
    \   |\n15 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjkfdn9xt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprct107vp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3l1yilhk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxmx9r57s.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpmdc38y9s.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
