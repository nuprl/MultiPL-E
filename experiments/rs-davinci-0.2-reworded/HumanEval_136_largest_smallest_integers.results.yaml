name: HumanEval_136_largest_smallest_integers
language: rs
results:
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_qfr52ci.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfsh47az9.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmparaji7_v.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx_jjnvqf.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0oahja06.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp63yxcnze.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_neg = None;\n\
    \    let mut smallest_pos = None;\n    for i in lst {\n        if i < 0 {\n  \
    \          if largest_neg.is_none() || i > largest_neg.unwrap() {\n          \
    \      largest_neg = Some(i);\n            }\n        } else if i > 0 {\n    \
    \        if smallest_pos.is_none() || i < smallest_pos.unwrap() {\n          \
    \      smallest_pos = Some(i);\n            }\n        }\n    }\n    (largest_neg,\
    \ smallest_pos)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for num in lst {\n     \
    \   if num > 0 {\n            if smallest_positive.is_none() || num < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(num);\n            }\n        }\
    \ else if num < 0 {\n            if largest_negative.is_none() || num > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(num);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8ilws2op.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max = None;\n \
    \   let mut min = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7na39p4h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwp1pfjjz.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdngjixph.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpapx862w7.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyb8f0jbx.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if let Some(smallest_value) = smallest {\n                if i < smallest_value\
    \ {\n                    smallest = Some(i);\n                }\n            }\
    \ else {\n                smallest = Some(i);\n            }\n        } else if\
    \ i < 0 {\n            if let Some(largest_value) = largest {\n              \
    \  if i > largest_value {\n                    largest = Some(i);\n          \
    \      }\n            } else {\n                largest = Some(i);\n         \
    \   }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_jbpmpw8.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzwwc02_p.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqvsuo9qx.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpeg5lqboh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphpyu0gfv.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcty0klre.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5v11r1h5.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg: Option<isize>\
    \ = None;\n    let mut min_pos: Option<isize> = None;\n    for i in lst {\n  \
    \      if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap() {\n\
    \                max_neg = Some(i);\n            }\n        } else if i > 0 {\n\
    \            if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)\n}\n\nfn\
    \ main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min_pos = None;\n\
    \    let mut max_neg = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if max_neg.is_none()\
    \ || i > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpaf7wdw37.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpy71ky5hy.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpznbk_fhx.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpn7cxalng.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg: Option<isize>\
    \ = None;\n    let mut min_pos: Option<isize> = None;\n    for i in lst {\n  \
    \      if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap() {\n\
    \                max_neg = Some(i);\n            }\n        } else if i > 0 {\n\
    \            if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)\n}\n\nfn\
    \ main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let\
    \ candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4,\
    \ 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5,\
    \ 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]),\
    \ (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
    \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
    \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None,\
    \ None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3p7n04ny.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyg46ct18.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxokcmwm6.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_neg = None;\n\
    \    let mut smallest_pos = None;\n    for i in lst {\n        if i < 0 {\n  \
    \          if largest_neg.is_none() || i > largest_neg.unwrap() {\n          \
    \      largest_neg = Some(i);\n            }\n        } else if i > 0 {\n    \
    \        if smallest_pos.is_none() || i < smallest_pos.unwrap() {\n          \
    \      smallest_pos = Some(i);\n            }\n        }\n    }\n    (largest_neg,\
    \ smallest_pos)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6a4m2m54.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let\
    \ candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4,\
    \ 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5,\
    \ 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]),\
    \ (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
    \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
    \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None,\
    \ None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpeufl3i41.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplfdu2goo.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsi2c_33b.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ let Some(m) = min {\n                if i < m {\n                    min = Some(i);\n\
    \                }\n            } else {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if let Some(m) = max {\n \
    \               if i > m {\n                    max = Some(i);\n             \
    \   }\n            } else {\n                max = Some(i);\n            }\n \
    \       }\n    }\n    (max, min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp22gck9t4.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpw9u_4m3o.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsyor502z.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_neg: Option<isize>\
    \ = None;\n    let mut smallest_pos: Option<isize> = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if largest_neg.is_none() || i > largest_neg.unwrap()\
    \ {\n                largest_neg = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest_pos.is_none() || i < smallest_pos.unwrap()\
    \ {\n                smallest_pos = Some(i);\n            }\n        }\n    }\n\
    \    (largest_neg, smallest_pos)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpni1okiwh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let\
    \ candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4,\
    \ 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5,\
    \ 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]),\
    \ (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
    \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
    \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None,\
    \ None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let\
    \ candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4,\
    \ 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5,\
    \ 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]),\
    \ (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
    \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
    \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None,\
    \ None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfcpbfkvs.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp155tzdsa.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphnoz8zkv.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut neg = None;\n \
    \   let mut pos = None;\n    for i in lst {\n        if i < 0 {\n            neg\
    \ = match neg {\n                None => Some(i),\n                Some(n) =>\
    \ Some(if i > n { i } else { n }),\n            };\n        } else if i > 0 {\n\
    \            pos = match pos {\n                None => Some(i),\n           \
    \     Some(p) => Some(if i < p { i } else { p }),\n            };\n        }\n\
    \    }\n    (neg, pos)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6greogpv.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphyugpy4d.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpeuvlepwd.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfjo23nqv.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min_pos = None;\n\
    \    let mut max_neg = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if max_neg.is_none()\
    \ || i > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if let Some(s) = smallest {\n                if i < s {\n             \
    \       smallest = Some(i);\n                }\n            } else {\n       \
    \         smallest = Some(i);\n            }\n        } else if i < 0 {\n    \
    \        if let Some(l) = largest {\n                if i > l {\n            \
    \        largest = Some(i);\n                }\n            } else {\n       \
    \         largest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp76dearnr.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpkpnspop0.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min_pos = None;\n\
    \    let mut max_neg = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if let Some(x) = min_pos {\n                if i < x {\n               \
    \     min_pos = Some(i);\n                }\n            } else {\n          \
    \      min_pos = Some(i);\n            }\n        } else if i < 0 {\n        \
    \    if let Some(x) = max_neg {\n                if i > x {\n                \
    \    max_neg = Some(i);\n                }\n            } else {\n           \
    \     max_neg = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if max_neg.is_none()\
    \ || i > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2ibhewf9.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp99wfl364.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvo9pucgg.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_neg = None;\n\
    \    let mut smallest_pos = None;\n    for num in lst {\n        if num < 0 {\n\
    \            if largest_neg.is_none() || num > largest_neg.unwrap() {\n      \
    \          largest_neg = Some(num);\n            }\n        } else if num > 0\
    \ {\n            if smallest_pos.is_none() || num < smallest_pos.unwrap() {\n\
    \                smallest_pos = Some(num);\n            }\n        }\n    }\n\
    \    (largest_neg, smallest_pos)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1uq70yjk.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp61k5475y.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpflx97d4t.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwld3qtbb.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfn3u9ozd.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzt0qub5t.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2u2e7hmz.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let\
    \ candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4,\
    \ 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5,\
    \ 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]),\
    \ (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
    \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
    \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None,\
    \ None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpi8n0xhkz.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            match largest_negative {\n\
    \                None => largest_negative = Some(i),\n                Some(n)\
    \ => {\n                    if i > n {\n                        largest_negative\
    \ = Some(i);\n                    }\n                }\n            }\n      \
    \  } else if i > 0 {\n            match smallest_positive {\n                None\
    \ => smallest_positive = Some(i),\n                Some(n) => {\n            \
    \        if i < n {\n                        smallest_positive = Some(i);\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate =\
    \ largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzh5y3ypf.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg: Option<isize>\
    \ = None;\n    let mut min_pos: Option<isize> = None;\n    for i in lst {\n  \
    \      if i < 0 {\n            match max_neg {\n                None => max_neg\
    \ = Some(i),\n                Some(x) => if i > x { max_neg = Some(i) },\n   \
    \         }\n        } else if i > 0 {\n            match min_pos {\n        \
    \        None => min_pos = Some(i),\n                Some(x) => if i < x { min_pos\
    \ = Some(i) },\n            }\n        }\n    }\n    (max_neg, min_pos)\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut neg = None;\n \
    \   let mut pos = None;\n    for i in lst {\n        if i < 0 {\n            neg\
    \ = match neg {\n                None => Some(i),\n                Some(x) =>\
    \ Some(if i > x { i } else { x }),\n            };\n        } else if i > 0 {\n\
    \            pos = match pos {\n                None => Some(i),\n           \
    \     Some(x) => Some(if i < x { i } else { x }),\n            };\n        }\n\
    \    }\n    (neg, pos)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ let Some(x) = max {\n                if i > x {\n                    max = Some(i);\n\
    \                }\n            } else {\n                max = Some(i);\n   \
    \         }\n        } else if i > 0 {\n            if let Some(x) = min {\n \
    \               if i < x {\n                    min = Some(i);\n             \
    \   }\n            } else {\n                min = Some(i);\n            }\n \
    \       }\n    }\n    (max, min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpass79var.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpytzfj7jc.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpogawyzwv.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1n3iq1j7.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let\
    \ candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4,\
    \ 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5,\
    \ 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]),\
    \ (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
    \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
    \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None,\
    \ None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            min\
    \ = match min {\n                None => Some(i),\n                Some(x) =>\
    \ Some(std::cmp::min(x, i)),\n            };\n        } else if i < 0 {\n    \
    \        max = match max {\n                None => Some(i),\n               \
    \ Some(x) => Some(std::cmp::max(x, i)),\n            };\n        }\n    }\n  \
    \  (max, min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4l0nrch3.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpe35yxhva.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxiz29_4w.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9263yzsl.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6bk5myh6.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut smallest = None;\n\
    \    let mut largest = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     smallest = match smallest {\n                None => Some(i),\n        \
    \        Some(x) => Some(std::cmp::min(x, i)),\n            };\n        } else\
    \ if i < 0 {\n            largest = match largest {\n                None => Some(i),\n\
    \                Some(x) => Some(std::cmp::max(x, i)),\n            };\n     \
    \   }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwkx9npt4.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpn8531d1l.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     max_neg = Some(i.max(max_neg.unwrap_or(i)));\n        } else if i > 0 {\n\
    \            min_pos = Some(i.min(min_pos.unwrap_or(i)));\n        }\n    }\n\
    \    (max_neg, min_pos)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpb4vh3sqv.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprnv2hyvr.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_rvynop2.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if let Some(x) = smallest {\n                if i < x {\n             \
    \       smallest = Some(i);\n                }\n            } else {\n       \
    \         smallest = Some(i);\n            }\n        } else if i < 0 {\n    \
    \        if let Some(x) = largest {\n                if i > x {\n            \
    \        largest = Some(i);\n                }\n            } else {\n       \
    \         largest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpoxxnun4f.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || largest.unwrap() < i {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || smallest.unwrap() > i {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpkdat4r3s.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            match largest_negative {\n\
    \                None => largest_negative = Some(i),\n                Some(x)\
    \ => {\n                    if i > x {\n                        largest_negative\
    \ = Some(i);\n                    }\n                }\n            }\n      \
    \  } else if i > 0 {\n            match smallest_positive {\n                None\
    \ => smallest_positive = Some(i),\n                Some(x) => {\n            \
    \        if i < x {\n                        smallest_positive = Some(i);\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate =\
    \ largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpojqtvnsp.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprg4_igqd.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpf4kf5q4z.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            min\
    \ = match min {\n                None => Some(i),\n                Some(x) =>\
    \ Some(std::cmp::min(x, i)),\n            };\n        } else if i < 0 {\n    \
    \        max = match max {\n                None => Some(i),\n               \
    \ Some(x) => Some(std::cmp::max(x, i)),\n            };\n        }\n    }\n  \
    \  (max, min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpum5bwzjc.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     max_neg = match max_neg {\n                None => Some(i),\n          \
    \      Some(x) => Some(if i > x { i } else { x }),\n            };\n        }\
    \ else if i > 0 {\n            min_pos = match min_pos {\n                None\
    \ => Some(i),\n                Some(x) => Some(if i < x { i } else { x }),\n \
    \           };\n        }\n    }\n    (max_neg, min_pos)\n}\n\nfn main() {\n \
    \   let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_neg: Option<isize>\
    \ = None;\n    let mut smallest_pos: Option<isize> = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if largest_neg.is_none() || i > largest_neg.unwrap()\
    \ {\n                largest_neg = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest_pos.is_none() || i < smallest_pos.unwrap()\
    \ {\n                smallest_pos = Some(i);\n            }\n        }\n    }\n\
    \    (largest_neg, smallest_pos)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp125r8bsr.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfc92wpq8.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqg4moh1c.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut smallest = None;\n\
    \    let mut largest = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if smallest == None {\n                smallest = Some(i);\n           \
    \ } else if i < smallest.unwrap() {\n                smallest = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if largest == None {\n   \
    \             largest = Some(i);\n            } else if i > largest.unwrap() {\n\
    \                largest = Some(i);\n            }\n        }\n    }\n    (largest,\
    \ smallest)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n\
    \    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)\n\
    }\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprare_29e.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)\n}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n   \
    \ assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2,\
    \ 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3,\
    \ 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8,\
    \ 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2fk5xjes.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || largest_negative.unwrap()\
    \ < i {\n                largest_negative = Some(i);\n            }\n        }\
    \ else if i > 0 {\n            if smallest_positive.is_none() || smallest_positive.unwrap()\
    \ > i {\n                smallest_positive = Some(i);\n            }\n       \
    \ }\n    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let\
    \ candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4,\
    \ 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5,\
    \ 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]),\
    \ (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
    \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
    \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None,\
    \ None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
    \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
    \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7,\
    \ -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2,\
    \ 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp02sx5j3h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
    \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
    \ in a vector.\n/// If there is no negative or positive integers, return them\
    \ as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3,\
    \ 5, 7])\n/// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None,\
    \ None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
    \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)\n}\n\nfn main() {\n    let candidate\
    \ = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]),\
    \ (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None,\
    \ Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2),\
    \ Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7),\
    \ Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9),\
    \ Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
    \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
    \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5,\
    \ -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]),\
    \ (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]),\
    \ (Some(-3), Some(1)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
