name: HumanEval_155_even_odd_count
language: rs
results:
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpniw9yix9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmph7opfhtl.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpsqzq57wh.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp3c3163pd.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpi07hkhfc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxyx_1gx0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7173sgm0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpfgcz7qt1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprsvlzvtu.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp8uft0m6y.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmptx523mk1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp527stb9e.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp78o1n_xo.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    if n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        let digit\
    \ = n % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else\
    \ {\n            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp84vp_jxj.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphmu792sc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpiw1ysv41.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp2tk_7p4_.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpwsk864ky.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpv_udnocu.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpz8quvk3f.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpnb0ldoid.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjpkmi3r_.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpv765rfw6.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp82epjqlm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmplwscq1u_.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpc_uzq5am.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpdva88wa6.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6qaxuood.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprec4vb2f.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9mo172af.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp8im3qril.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmplyrgpmvb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9926bj99.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp66i_x2st.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpzhcug9bl.rs:11:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjibnvs6e.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpm2lqgdm4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphsm7l3x7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpcdlf5mwo.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpg7ce1ewb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpc41oo11q.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut num = num;\n    let mut even = 0;\n    let mut odd = 0;\n\
    \    while num != 0 {\n        if num % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpp09ygfql.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpy8p_nvp5.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpdwsydn9u.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpcer8y6vq.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp2mbo6kuf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp386c9nvu.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxrtona49.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpztiocr1b.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpi36k380f.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpcm2c07dz.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxbhighyb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmparbtrk7_.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpyseufubu.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpoq_851d0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp3cp52eae.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpekgt0_9w.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkkjyae9j.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqsaezpn7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjgtxzxd4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9fdb3hfe.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpk2fixh3e.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxzeku1sf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn60esqv7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppc1803rh.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpijtf9lho.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqduayhfn.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjeor0yi7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp05dlnagl.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp5z903vj0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp73_tdqaq.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpoigg6bgc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpipvxk1t7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpswjlah4o.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpbay59_01.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpnngpr4pc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp17aym5h3.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpoyuixxko.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphoe5zlt8.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn4rlev_4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9xo_dggm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpt0cr963m.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpgns2emvs.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprp_yoql4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7wmz759h.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjch0yszc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpan2wvksa.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmptmlumi6n.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_muhg6h1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpuyc8ticm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpoe_u9u9a.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9623j2ju.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpbsv11ibp.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxwgnratd.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpbt28tsj7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpk93d6yn3.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpg6pm9l_6.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphuh7i78n.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4xh5iggb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpaknvba6a.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpbcriutqj.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmps8a3gjbr.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkjrywox4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpvc4wk7uw.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpsvlmzk90.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpcb7g6wnp.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqdz_tjag.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4i6cy1hs.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkvvggbnz.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp19e0tfj3.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7us9t7wt.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpzoh67xlz.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmps1jrq46n.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9ehiz634.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpy51nn6w4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4eq1n341.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6vxiqi77.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprt0_u99e.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpsx9zzxpo.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpecuc3wco.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn8sa1avc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp93rdusyo.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp36m3nckm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp24ea3rac.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpuoszmiug.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxvc9l4e6.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp3qfd4eky.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp307p8dsb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpik1lulfx.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpo34dy3_f.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp96r2c2dr.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_fsy1orr.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxja1z24u.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7qx0b3c6.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpuf1atph7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmponilcdlf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpenej_uhk.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpp5q_n3no.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp44fl4w09.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp2puobs3e.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkqmev81s.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphiwtso06.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp5bplb89n.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjg8zp6uh.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpie23j0jy.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpikb7blhq.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpmgji78z8.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9ejr1pxj.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpu5_ix1l1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpz8ms5nio.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpwi4r9vl4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpwtj15_qj.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprx21mv71.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6azu_3ma.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpij1yr2f4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpacp98xoo.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_961jjqw.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp3x60pci6.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpm1qujn3n.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn8oq47tw.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9f1va8is.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpiq5hzc7e.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpnaxqtzxj.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp88fzqtpz.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjscn711k.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    while num != 0 {\n        let digit = num % 10;\n        if\
    \ digit % 2 == 0 {\n            even_count += 1;\n        } else {\n         \
    \   odd_count += 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppoqq1f7g.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpw37icly0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpmz8_jroq.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqf3p14ir.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpfdcetvg5.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpufs5ity_.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkm1pct93.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpt1yiimsz.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp5vqnnzf2.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpl1tqn42g.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxdqzkmf7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6ncour8x.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_t16_9gf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp2w2pbsk0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpdx15ubc9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpabd7o92b.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpyeiboss0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmptls24q3a.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpg0bocd15.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmps2_lyu_7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpu7l0p98i.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp67y3opu9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpzcea56ro.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpvr269qio.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6gx0x5mm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpvh4i5c4p.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpokf_hgt8.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpq3siswep.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpf22gznz2.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    while num != 0 {\n        let digit = num % 10;\n        if\
    \ digit % 2 == 0 {\n            even_count += 1;\n        } else {\n         \
    \   odd_count += 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_617ff2v.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp08qwq4p4.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpz3fiozmq.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpwbyuiuei.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmplut6xojg.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpx17r1u00.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
