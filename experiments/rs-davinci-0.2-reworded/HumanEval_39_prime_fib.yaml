name: HumanEval_39_prime_fib
language: rs
prompt: "/// prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n/// >>> prime_fib(1)\n/// 2\n/// >>> prime_fib(2)\n/// 3\n/// >>> prime_fib(3)\n\
  /// 5\n/// >>> prime_fib(4)\n/// 13\n/// >>> prime_fib(5)\n/// 89\nfn prime_fib(n:\
  \ isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = prime_fib;\n    assert_eq!(candidate(1),\
  \ 2);\n    assert_eq!(candidate(2), 3);\n    assert_eq!(candidate(3), 5);\n    assert_eq!(candidate(4),\
  \ 13);\n    assert_eq!(candidate(5), 89);\n    assert_eq!(candidate(6), 233);\n\
  \    assert_eq!(candidate(7), 1597);\n    assert_eq!(candidate(8), 28657);\n   \
  \ assert_eq!(candidate(9), 514229);\n    assert_eq!(candidate(10), 433494437);\n\
  }\n"
completions: ["    let mut fib = Fibonacci::new();\n    let mut count = 0;\n    loop\
    \ {\n        let x = fib.next().unwrap();\n        if is_prime(x) {\n        \
    \    count += 1;\n            if count == n {\n                return x;\n   \
    \         }\n        }\n    }", "    let mut fib_nums = vec![2, 3];\n    let mut\
    \ i = 2;\n    while i < n {\n        let next_fib = fib_nums[i - 1] + fib_nums[i\
    \ - 2];\n        if is_prime(next_fib) {\n            fib_nums.push(next_fib);\n\
    \            i += 1;\n        }\n    }\n    fib_nums[n - 1]", "    let mut fib\
    \ = vec![2, 3];\n    let mut i = 2;\n    while i < n {\n        let next = fib[i\
    \ - 1] + fib[i - 2];\n        if is_prime(next) {\n            fib.push(next);\n\
    \            i += 1;\n        }\n    }\n    fib[n - 1]", "    let mut fib = vec![2,\
    \ 3];\n    let mut i = 2;\n    while i < n {\n        fib.push(fib[i - 1] + fib[i\
    \ - 2]);\n        i += 1;\n    }\n    fib.into_iter().filter(|&x| is_prime(x)).nth(n\
    \ as usize - 1).unwrap()", "    let mut fib = vec![2, 3];\n    let mut i = 2;\n\
    \    while i < n {\n        let next = fib[i - 1] + fib[i - 2];\n        if is_prime(next)\
    \ {\n            fib.push(next);\n            i += 1;\n        }\n    }\n    fib[n\
    \ - 1]", "    let mut fib_nums = vec![2, 3];\n    let mut i = 2;\n    while i\
    \ < n {\n        let next_fib = fib_nums[i - 1] + fib_nums[i - 2];\n        if\
    \ is_prime(next_fib) {\n            fib_nums.push(next_fib);\n            i +=\
    \ 1;\n        }\n    }\n    fib_nums[n - 1]", "    let mut fib = vec![2, 3];\n\
    \    let mut i = 2;\n    while i < n {\n        let next = fib[i - 1] + fib[i\
    \ - 2];\n        if is_prime(next) {\n            fib.push(next);\n          \
    \  i += 1;\n        }\n    }\n    fib[n - 1]", "    let mut fib_numbers = vec![2,\
    \ 3];\n    let mut i = 2;\n    while i < n {\n        let next_fib = fib_numbers[i\
    \ - 1] + fib_numbers[i - 2];\n        if is_prime(next_fib) {\n            fib_numbers.push(next_fib);\n\
    \            i += 1;\n        }\n    }\n    fib_numbers[n - 1]", "    let mut\
    \ fib_nums = vec![2, 3];\n    let mut i = 2;\n    while i < n {\n        let next_fib\
    \ = fib_nums[i - 1] + fib_nums[i - 2];\n        if is_prime(next_fib) {\n    \
    \        fib_nums.push(next_fib);\n            i += 1;\n        }\n    }\n   \
    \ fib_nums[n - 1]", "    let mut fib = fibonacci();\n    let mut prime = prime();\n\
    \    let mut i = 0;\n    let mut f = 0;\n    let mut p = 0;\n    while i < n {\n\
    \        f = fib.next().unwrap();\n        p = prime.next().unwrap();\n      \
    \  if f == p {\n            i += 1;\n        }\n    }\n    f", "    let mut fib\
    \ = Fib::new();\n    let mut i = 0;\n    while i < n {\n        let f = fib.next().unwrap();\n\
    \        if is_prime(f) {\n            i += 1;\n        }\n    }\n    fib.next().unwrap()",
  "    let mut i = 1;\n    let mut fib = 1;\n    let mut fib_prev = 1;\n    let mut\
    \ fib_next = 1;\n    while i < n {\n        fib_next = fib + fib_prev;\n     \
    \   fib_prev = fib;\n        fib = fib_next;\n        if is_prime(fib) {\n   \
    \         i += 1;\n        }\n    }\n    fib", "    let mut fib = Fibonacci::new();\n\
    \    let mut i = 0;\n    let mut f = 0;\n    while i < n {\n        f = fib.next().unwrap();\n\
    \        if is_prime(f) {\n            i += 1;\n        }\n    }\n    f", "  \
    \  let mut fib = Fibonacci::new();\n    let mut i = 0;\n    let mut result = 0;\n\
    \    while i < n {\n        let num = fib.next().unwrap();\n        if is_prime(num)\
    \ {\n            result = num;\n            i += 1;\n        }\n    }\n    result",
  "    let mut fib_nums = vec![2, 3];\n    let mut i = 2;\n    while i < n {\n   \
    \     let next_fib = fib_nums[i - 1] + fib_nums[i - 2];\n        if is_prime(next_fib)\
    \ {\n            fib_nums.push(next_fib);\n            i += 1;\n        }\n  \
    \  }\n    fib_nums[n - 1]", "    let mut fib = Fibonacci::new();\n    let mut\
    \ i = 0;\n    loop {\n        let f = fib.next().unwrap();\n        if is_prime(f)\
    \ {\n            i += 1;\n            if i == n {\n                return f;\n\
    \            }\n        }\n    }", "    let mut fib = vec![2, 3];\n    let mut\
    \ i = 2;\n    while i < n {\n        let next = fib[i - 1] + fib[i - 2];\n   \
    \     if is_prime(next) {\n            fib.push(next);\n            i += 1;\n\
    \        }\n    }\n    fib[n - 1]", "    let mut fib = fibonacci();\n    let mut\
    \ prime = prime();\n    let mut i = 0;\n    loop {\n        let f = fib.next().unwrap();\n\
    \        let p = prime.next().unwrap();\n        if f == p {\n            i +=\
    \ 1;\n            if i == n {\n                return f;\n            }\n    \
    \    }\n    }", "    let mut fib = vec![2, 3];\n    let mut i = 2;\n    while\
    \ i < n {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i += 1;\n    }\n\
    \    fib.into_iter().filter(|&x| is_prime(x)).nth(n as usize - 1).unwrap()", " \
    \   let mut fib = fibonacci();\n    let mut prime = prime();\n    let mut i =\
    \ 1;\n    let mut f = fib.next().unwrap();\n    let mut p = prime.next().unwrap();\n\
    \    while i < n {\n        if f == p {\n            i += 1;\n        }\n    \
    \    if f < p {\n            f = fib.next().unwrap();\n        } else {\n    \
    \        p = prime.next().unwrap();\n        }\n    }\n    f"]
stop_tokens:
- "\n}"
