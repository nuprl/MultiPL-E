name: HumanEval_131_digits
language: rs
results:
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut prod = 1;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp70if1703.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpndkmb013.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_19pgd10.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm6fubw27.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp04zl1acf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2xz_59l2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_829kgla.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpa4_1zfsg.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphcg4nzt3.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut prod = 1;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpiqd_ebkv.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpe8m4ourq.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjc05vwq6.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut prod = 1;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4i9yo0yq.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3gs8wv9p.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwuzbwgul.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgp0kdstc.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuhdckh5e.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut prod = 1;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3310es89.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmnd3b6st.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvaowytde.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpk7ttfdef.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphj9vdxdq.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2rj5y0ah.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpplodxke6.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp309qhn_t.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_wpjv97d.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmu0zujry.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpin31sk24.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 1;\n    let mut n = n;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj5ayp3v1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut res = 1;\n    while n > 0 {\n  \
    \      let digit = n % 10;\n        if digit % 2 == 1 {\n            res *= digit;\n\
    \        }\n        n /= 10;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpez8l_i56.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpepkf28y0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpch4k31nx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbi86kss8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpb1re_6b7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxl4rsa66.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqlq56xz1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_n2321kd.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpufrv95ft.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyk9igbka.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6rn_9zyr.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 1;\n    let mut n = n;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0cv6f7v6.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprajcyk74.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpawlseg_v.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqzxo973z.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmph52hss27.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprtmv4gwf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqnu8iyfq.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj51jkh_v.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpteq8j74n.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdvw07n2q.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgzwfqq_d.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwtdx6rr1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp94j9utyl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwb6ybm2u.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpl6kjo80c.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjwtqvte_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpiyywbk_b.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkx1cab3i.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpz82g_dfu.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp53_sls96.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9ssy0r5u.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptuhftqzo.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    let mut n = n;\n\
    \    let mut product = 1;\n    while n > 0 {\n        let digit = n % 10;\n  \
    \      if digit % 2 == 1 {\n            product *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9_wely75.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5_eo5ucs.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg96er8zk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkv3ionm5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_8r_hyqi.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8hbze55a.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzzwg3pq7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 1;\n    let mut n = n;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpudw1_32g.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpda7txvfm.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_bvrxj27.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmrvsa39x.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjnhn8od1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpco38a9j1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnmh1fzgu.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpz3jzax0d.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdh8adhxk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0v8925a5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpon0eefih.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjrgi8k9f.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq77s9h7u.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqh801fmw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpufj7_npd.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp77iwyys9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfqerlm28.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm3lbhl3l.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8z92o957.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvsy8_0nv.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpc15vsho7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsknsexhn.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqtpe9j8t.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0c7z5v2d.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7ivow3kl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmz54ce_w.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbmkd7eng.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvhtgx48k.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1d8v2wsf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpslr0ks9b.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcwzebq6s.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpucqokosb.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_pkgzwx9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgj24vnc5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0ig_jyv_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy6l8m48l.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnhep1n0c.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm8dtkzs4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqjp0d6tr.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1bfq8ptj.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut prod = 1;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjr8a5rz.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpl_xlx3fn.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpoxdt13fs.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0guy3pb4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5emmpki2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcw1594uq.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7kef4mr8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut num = n;\n    while num >\
    \ 0 {\n        let digit = num % 10;\n        if digit % 2 == 1 {\n          \
    \  product *= digit;\n        }\n        num /= 10;\n    }\n    product\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfucn6y2r.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdj50jkwf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnjdg6zko.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp88aeoet9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6y3hf8wx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8saihi_n.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprr578sgh.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpiye2outd.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpr5tprd4s.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpn344nybn.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy6quqd4d.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3hu5igpp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyk7pddop.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwxurdnhk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsziku87v.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9vyj8lz_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm4y_8jnq.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwuweu8wl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmorc3owp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptolwbeog.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmj72t2d1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpr3i6vpfl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkkkiuo_c.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let d = n % 10;\n        if d % 2 == 1 {\n            result *= d;\n\
    \        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpygg426d1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpz_bonbtv.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp85di9v1o.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpntx511mm.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfelufnm2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_li7aq7y.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy1xjmscs.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 1;\n    let mut m = n;\n    while m > 0 {\n \
    \       let d = m % 10;\n        if d % 2 == 1 {\n            prod *= d;\n   \
    \     }\n        m /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpln9g7uyw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi1uxujxz.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm4pq4qqi.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj0v9_s87.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpaekex0tm.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9cvh2avv.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpve_u9fw0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut prod = 1;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3kvn0rb5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1jny6i9g.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9zzmjnh8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp44rymkzt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp88g2lnee.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpql3qw6vx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpobal85wx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpn5efg2sq.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 1;\n    let mut n = n;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 1 {\n            prod *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdx0kve1u.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi239bx72.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq2hilfay.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphdnayw3b.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4qalrauk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpohelm8yb.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbfubvf5l.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpr3wyq6mt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpulb3w_h3.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkmnajyin.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuz9bu9g6.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeva1yb7e.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6xvrgnzu.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeg26qq4v.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmply7khcja.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_nj8ebhs.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7f7qr6ul.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3g9f5pfg.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_699ayv1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpe2ifrfsd.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpubhzbqlt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6np16vs9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9lm0h9wi.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpygoyap23.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp34qu9ir7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyo1fmzal.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzz3dr6e1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0pdzp5fy.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuzq3x8xx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpag_kpgzj.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbo56mfl0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyk22_mv3.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0g8ku08z.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpx_lyb_d5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj7x6foa2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2ulqr31o.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpb0d_45vp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgkdx8js9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmps5y92ksr.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
