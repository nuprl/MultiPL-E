name: HumanEval_133_sum_squares
language: rs
prompt: "/// You are given a vector of numbers.\n/// You need to return the sum of\
  \ squared numbers in the given vector,\n/// round each element in the vector to\
  \ the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0, 3.0])\n\
  /// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0, 3.0, 5.0,\
  \ 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
  \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
  \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
  \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n \
  \   assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
  \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n\
  \    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
  \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
  \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
completions: ['    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as
    isize).pow(2)).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x *
    x).sum()', '    lst.iter().map(|x| (*x as isize).pow(2)).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|&x| (x.ceil() as isize).pow(2)).sum()', "    let mut sum =\
    \ 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n\
    \    sum", '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    unimplemented!()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|&x|
    (x.ceil() as isize).pow(2)).sum()', "    let mut sum = 0;\n    for i in lst {\n\
    \        sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x|
    (x.ceil() as isize).pow(2)).sum()', '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    unimplemented!()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', "    let mut sum\
    \ = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n\
    \    sum", '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()', '    unimplemented!()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  "    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n\
    \    }\n    sum", "    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', "    let mut sum\
    \ = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n\
    \    sum", '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', " \
    \   let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n\
    \    }\n    sum", '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()',
  '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', "    let mut sum = 0;\n    for i in lst {\n    \
    \    sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    unimplemented!();', '    unimplemented!()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', "    let mut sum = 0;\n    for i in\
    \ lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    unimplemented!()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', "    let mut sum = 0;\n    for i in lst {\n    \
    \    sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', "    let mut sum: isize = 0;\n    for\
    \ i in lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as
    isize).pow(2)).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x *
    x).sum()', "    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', "    let mut sum\
    \ = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n\
    \    sum", "    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum", "    let mut sum = 0;\n    for i in lst\
    \ {\n        sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    unimplemented!()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', "    let mut sum = 0;\n    for i in lst {\n    \
    \    sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', "    let mut sum = 0;\n    for i in\
    \ lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    unimplemented!()',
  '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as
    isize).pow(2)).sum()', '    unimplemented!()', '    lst.iter().map(|x| x.ceil()
    as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as
    isize).pow(2)).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x *
    x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', " \
    \   let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n\
    \    }\n    sum", '    unimplemented!()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    unimplemented!()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()', " \
    \   let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n\
    \    }\n    sum", '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    unimplemented!();',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    unimplemented!()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', "    let mut sum = 0;\n    for i in lst {\n    \
    \    sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    unimplemented!()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    unimplemented!();', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', "    let mut sum\
    \ = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n\
    \    sum", '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', "    let mut sum = 0;\n    for i in\
    \ lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n\
    \    }\n    sum", '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()',
  '    unimplemented!()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as
    isize).pow(2)).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x *
    x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', "    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n\
    \    }\n    sum", '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()', '    lst.iter().map(|x|
    (x.ceil() as isize).pow(2)).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    unimplemented!()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()', "    let mut sum = 0;\n    for i in lst {\n    \
    \    sum += (i.ceil() as isize).pow(2);\n    }\n    sum", '    lst.iter().map(|x|
    (x.ceil() as isize).pow(2)).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    (x.ceil() as isize).pow(2)).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x|
    x * x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  "    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n\
    \    }\n    sum", '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| (x.ceil() as
    isize).pow(2)).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x *
    x).sum()', '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x|
    x.ceil() as isize).map(|x| x * x).sum()', '    lst.iter().map(|x| x.ceil() as
    isize).map(|x| x * x).sum()']
stop_tokens:
- "\n}"
