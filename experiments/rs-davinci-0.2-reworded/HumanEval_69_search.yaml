name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty vector of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the vector.\n/// If no such a value exist, return -1.\n\
  /// Examples:\n/// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\n\
  fn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5,\
  \ 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n   \
  \ assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8,\
  \ 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n   \
  \ assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1,\
  \ 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3,\
  \ 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8,\
  \ 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1,\
  \ 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]),\
  \ -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),\
  \ 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n\
  \    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n\
  }\n"
completions: ["    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        if freq.contains_key(&i)\
    \ {\n            *freq.get_mut(&i).unwrap() += 1;\n        } else {\n        \
    \    freq.insert(i, 1);\n        }\n    }\n    let mut max = -1;\n    for (k,\
    \ v) in freq {\n        if k <= v && k > max {\n            max = k;\n       \
    \ }\n    }\n    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = 0;\n    for (k, v) in freq.iter() {\n      \
    \  if *k <= *v && *k > max {\n            max = *k;\n        }\n    }\n    if\
    \ max == 0 {\n        -1\n    } else {\n        max\n    }", "    let mut freq\
    \ = HashMap::new();\n    let mut max = 0;\n    for i in lst {\n        if i >\
    \ max {\n            max = i;\n        }\n        if let Some(x) = freq.get_mut(&i)\
    \ {\n            *x += 1;\n        } else {\n            freq.insert(i, 1);\n\
    \        }\n    }\n    for i in 1..=max {\n        if let Some(x) = freq.get(&i)\
    \ {\n            if *x >= i {\n                return i;\n            }\n    \
    \    }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if v >= k && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <= v &&\
    \ k > max {\n            max = k;\n        }\n    }\n    max", "    let mut freq:\
    \ HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq.iter() {\n \
    \       if *key > *val && *key > max {\n            max = *key;\n        }\n \
    \   }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n   \
    \     let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n \
    \   let mut max = -1;\n    for (key, val) in freq {\n        if key <= val &&\
    \ key > max {\n            max = key;\n        }\n    }\n    max", "    let mut\
    \ max = -1;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for\
    \ i in lst {\n        let counter = map.entry(i).or_insert(0);\n        *counter\
    \ += 1;\n    }\n    for (key, val) in map {\n        if key >= val && key > max\
    \ {\n            max = key;\n            count = val;\n        }\n    }\n    if\
    \ count >= max {\n        max\n    } else {\n        -1\n    }", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n  \
    \  let mut max = -1;\n    for (key, val) in freq {\n        if key <= val && key\
    \ > max {\n            max = key;\n        }\n    }\n    max", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        let c = freq.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n  \
    \      if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k > v && k > max {\n            max = k;\n        }\n    }\n \
    \   max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for\
    \ i in lst {\n        let count = freq.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut count: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n   \
    \     let c = count.entry(i).or_insert(0);\n        *c += 1;\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in count {\n        if k <= v && k > max {\n     \
    \       max = k;\n        }\n    }\n    max"]
stop_tokens:
- "\n}"
