name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty vector of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the vector.\n/// If no such a value exist, return -1.\n\
  /// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1, 2, 2, 3, 3,\
  \ 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\nfn search(lst:\
  \ Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5,\
  \ 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n   \
  \ assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8,\
  \ 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n   \
  \ assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1,\
  \ 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3,\
  \ 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8,\
  \ 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1,\
  \ 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]),\
  \ -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),\
  \ 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n\
  \    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n\
  }\n"
completions: ["    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > res {\n            res = k;\n        }\n    }\n    res",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut d = HashMap::new();\n    for i in lst {\n        *d.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in d {\n        if k <=\
    \ v && k > res {\n            res = k;\n        }\n    }\n    res", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if v\
    \ >= k && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n   \
    \     }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if v >= k && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut counts = HashMap::new();\n    for i\
    \ in lst {\n        let count = counts.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in counts.iter()\
    \ {\n        if *key <= *val && *key > max {\n            max = *key;\n      \
    \  }\n    }\n    max", "    let mut count = HashMap::new();\n    for i in lst\
    \ {\n        *count.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (key, val) in count {\n        if key <= val && key > max {\n       \
    \     max = key;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if v\
    \ >= k && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut counts = HashMap::new();\n    for i in lst {\n\
    \        let count = counts.entry(i).or_insert(0);\n        *count += 1;\n   \
    \ }\n    let mut max = -1;\n    for (k, v) in counts {\n        if k <= v && k\
    \ > max {\n            max = k;\n        }\n    }\n    max", "    let mut counts\
    \ = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for\
    \ i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (key, val) in freq {\n        if key <= val && key > max {\n\
    \            max = key;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in counts.iter()\
    \ {\n        if *key <= *val && *key > max {\n            max = *key;\n      \
    \  }\n    }\n    max", "    let mut counts = HashMap::new();\n    for i in lst\
    \ {\n        let count = counts.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if k <= v &&\
    \ k > max {\n            max = k;\n        }\n    }\n    max", "    let mut m\
    \ = HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0) += 1;\n\
    \    }\n    let mut res = -1;\n    for (k, v) in m {\n        if k <= v && k >\
    \ res {\n            res = k;\n        }\n    }\n    res", "    let mut count\
    \ = HashMap::new();\n    for i in lst {\n        *count.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    for i in (1..).rev() {\n        if let Some(count)\
    \ = counts.get(&i) {\n            if *count >= i {\n                return i;\n\
    \            }\n        }\n    }\n    -1", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut m = HashMap::new();\n\
    \    for i in lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut\
    \ v = m.iter().filter(|&(k, v)| k <= v).collect::<Vec<_>>();\n    v.sort_by(|a,\
    \ b| b.0.cmp(a.0));\n    if v.len() > 0 {\n        *v[0].0\n    } else {\n   \
    \     -1\n    }", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n   \
    \     }\n    }\n    res", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n \
    \   }\n    let mut max = -1;\n    for (key, value) in freq {\n        if key <=\
    \ value && key > max {\n            max = key;\n        }\n    }\n    max", " \
    \   let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for &x in &lst {\n        *counts.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (&x, &y) in &counts {\n       \
    \ if x > y {\n            continue;\n        }\n        if x > max {\n       \
    \     max = x;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut result = -1;\n    for (key, value) in counts\
    \ {\n        if key <= value && key > result {\n            result = key;\n  \
    \      }\n    }\n    result", "    let mut counts = HashMap::new();\n    for i\
    \ in lst {\n        let count = counts.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counts {\n    \
    \    if key <= value && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        let\
    \ count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (key, val) in freq {\n        if key <= val && key > max\
    \ {\n            max = key;\n        }\n    }\n    max", "    let mut counts =\
    \ HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    for (i, count) in counts {\n        if i <=\
    \ count {\n            return i;\n        }\n    }\n    -1", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n   \
    \     }\n    }\n    max", "    let mut counts = HashMap::new();\n    for i in\
    \ lst {\n        let count = counts.entry(i).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    let mut result = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > result {\n            result = k;\n        }\n    }\n    result",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut m = HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in m {\n        if k <=\
    \ v && k > res {\n            res = k;\n        }\n    }\n    res", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut counts = HashMap::new();\n    for i in lst {\n       \
    \ let count = counts.entry(i).or_insert(0);\n        *count += 1;\n    }\n   \
    \ let mut max = -1;\n    for (k, v) in counts {\n        if k <= v && k > max\
    \ {\n            max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if v >= k && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut count = HashMap::new();\n    for i in lst {\n        let c = count.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count.iter()\
    \ {\n        if *k <= *v && *k > max {\n            max = *k;\n        }\n   \
    \ }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n     \
    \   let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n   \
    \ let mut max = -1;\n    for (key, val) in freq {\n        if key <= val && key\
    \ > max {\n            max = key;\n        }\n    }\n    max", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (k, v) in freq\
    \ {\n        if k <= v && k > result {\n            result = k;\n        }\n \
    \   }\n    result", "    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut counts = HashMap::new();\n    for n\
    \ in lst {\n        let count = counts.entry(n).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (n, count) in counts {\n      \
    \  if n <= count && n > max {\n            max = n;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if\
    \ key <= val && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max\
    \ {\n            max = k;\n        }\n    }\n    max", "    let mut cnt = HashMap::new();\n\
    \    for i in lst {\n        let entry = cnt.entry(i).or_insert(0);\n        *entry\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in cnt {\n        if k <=\
    \ v && k > res {\n            res = k;\n        }\n    }\n    res", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..).rev() {\n        if let Some(count) = counts.get(&i)\
    \ {\n            if *count >= i {\n                return i;\n            }\n\
    \        }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut m = HashMap::new();\n    for i in lst\
    \ {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n  \
    \  for (k, v) in m {\n        if k <= v && k > max {\n            max = k;\n \
    \       }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if v >= k && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut result = -1;\n    for (k, v) in freq {\n  \
    \      if k <= v && k > result {\n            result = k;\n        }\n    }\n\
    \    result", "    let mut counts = HashMap::new();\n    for &num in &lst {\n\
    \        *counts.entry(num).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (&num, &count) in &counts {\n        if num > max && count >= num {\n\
    \            max = num;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    let counter = freq.entry(i).or_insert(0);\n        *counter += 1;\n    }\n\
    \    let mut max = -1;\n    for (key, val) in freq {\n        if key <= val &&\
    \ key > max {\n            max = key;\n        }\n    }\n    max", "    let mut\
    \ counts = HashMap::new();\n    for n in lst {\n        let count = counts.entry(n).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (n, count) in counts\
    \ {\n        if n <= count && n > max {\n            max = n;\n        }\n   \
    \ }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n     \
    \   *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for (k,\
    \ v) in freq {\n        if k <= v && k > res {\n            res = k;\n       \
    \ }\n    }\n    res", "    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (k, v) in freq {\n        if v >= k && k > max\
    \ {\n            max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if key <=\
    \ val && key > max {\n            max = key;\n        }\n    }\n    max", "  \
    \  let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (key, value) in\
    \ counts {\n        if key <= value && key > result {\n            result = key;\n\
    \        }\n    }\n    result", "    let mut freq = HashMap::new();\n    for i\
    \ in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n          \
    \  max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k > v {\n            continue;\n\
    \        }\n        if k > max {\n            max = k;\n        }\n    }\n   \
    \ max", "    let mut counter = HashMap::new();\n    for i in lst {\n        let\
    \ count = counter.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in counter {\n        if k <= v && k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut cnt = HashMap::new();\n    for i in lst {\n        *cnt.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in cnt {\n        if k <=\
    \ v && k > res {\n            res = k;\n        }\n    }\n    res", "    let mut\
    \ freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut m = HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in m {\n        if key\
    \ <= val && key > max {\n            max = key;\n        }\n    }\n    max", " \
    \   let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if v >= k && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut counts = HashMap::new();\n    for i in lst {\n\
    \        let count = counts.entry(i).or_insert(0);\n        *count += 1;\n   \
    \ }\n    let mut result = -1;\n    for (key, val) in counts {\n        if key\
    \ <= val && key > result {\n            result = key;\n        }\n    }\n    result",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        *freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n   \
    \     }\n    }\n    max", "    let mut count = HashMap::new();\n    for i in lst\
    \ {\n        let c = count.entry(i).or_insert(0);\n        *c += 1;\n    }\n \
    \   let mut max = -1;\n    for (k, v) in count.iter() {\n        if *k <= *v &&\
    \ *k > max {\n            max = *k;\n        }\n    }\n    max", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for n in lst {\n        *freq.entry(n).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n  \
    \  let mut res = -1;\n    for (k, v) in freq {\n        if k <= v && k > res {\n\
    \            res = k;\n        }\n    }\n    res", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k > v {\n            continue;\n\
    \        }\n        if k > max {\n            max = k;\n        }\n    }\n   \
    \ max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if v\
    \ >= k && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut m = HashMap::new();\n    for i in lst {\n        let count = m.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m {\n \
    \       if k > v {\n            continue;\n        }\n        if k > max {\n \
    \           max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut count = HashMap::new();\n    for i in lst {\n        let c = count.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count.iter()\
    \ {\n        if *k > *v && *k > max {\n            max = *k;\n        }\n    }\n\
    \    max", "    let mut counts = HashMap::new();\n    for i in lst {\n       \
    \ let count = counts.entry(i).or_insert(0);\n        *count += 1;\n    }\n   \
    \ let mut max = -1;\n    for (key, value) in counts {\n        if value >= key\
    \ && key > max {\n            max = key;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for i in 1..lst.len() as isize + 1\
    \ {\n        if freq.contains_key(&i) && *freq.get(&i).unwrap() >= i {\n     \
    \       max = i;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut count = HashMap::new();\n    for i in lst {\n        let c = count.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count.iter()\
    \ {\n        if *k <= *v && *k > max {\n            max = *k;\n        }\n   \
    \ }\n    max", "    let mut counts = HashMap::new();\n    for i in lst {\n   \
    \     let count = counts.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut result = -1;\n    for (i, count) in counts {\n        if i <= count\
    \ && i > result {\n            result = i;\n        }\n    }\n    result", " \
    \   let mut count = HashMap::new();\n    for i in lst {\n        let c = count.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    let c = freq.entry(i).or_insert(0);\n        *c += 1;\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n      \
    \      max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..).rev() {\n        if freq.get(&i).unwrap_or(&0)\
    \ >= &i {\n            return i;\n        }\n    }\n    -1", "    let mut freq\
    \ = HashMap::new();\n    for n in lst {\n        *freq.entry(n).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for n in lst {\n        *counts.entry(n).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..lst.len() as isize + 1).rev() {\n        if counts.get(&i).unwrap_or(&0)\
    \ >= &i {\n            return i;\n        }\n    }\n    -1", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut counts = HashMap::new();\n    for i in lst {\n\
    \        let count = counts.entry(i).or_insert(0);\n        *count += 1;\n   \
    \ }\n    let mut result = -1;\n    for (k, v) in counts {\n        if k <= v &&\
    \ k > result {\n            result = k;\n        }\n    }\n    result", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut lst = lst;\n    lst.sort();\n    let mut i = 0;\n    let mut j = 1;\n  \
    \  let mut res = -1;\n    while j < lst.len() {\n        if lst[i] == lst[j] {\n\
    \            j += 1;\n        } else {\n            if lst[i] * j as isize >=\
    \ lst[i] {\n                res = lst[i];\n            }\n            i = j;\n\
    \            j += 1;\n        }\n    }\n    if lst[i] * j as isize >= lst[i] {\n\
    \        res = lst[i];\n    }\n    res", "    let mut freq = HashMap::new();\n\
    \    for n in lst {\n        *freq.entry(n).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut res = -1;\n    for (k, v) in freq {\n        if k <= v && k > res {\n  \
    \          res = k;\n        }\n    }\n    res", "    let mut counts = HashMap::new();\n\
    \    for num in lst {\n        let count = counts.entry(num).or_insert(0);\n \
    \       *count += 1;\n    }\n    let mut max = -1;\n    for (num, count) in counts\
    \ {\n        if num <= count && num > max {\n            max = num;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max\
    \ {\n            max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > res {\n            res = k;\n        }\n    }\n    res",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut result = -1;\n    for (k, v) in counts {\n       \
    \ if k <= v && k > result {\n            result = k;\n        }\n    }\n    result",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut max = -1;\n    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n        if i > max && freq[&i] >=\
    \ i {\n            max = i;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for &i in &lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in &freq {\n        if *k > v && *k > max {\n\
    \            max = *k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut count = HashMap::new();\n    for i in lst {\n        let c = count.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count.iter()\
    \ {\n        if *k <= *v {\n            max = *k;\n        }\n    }\n    max",
  "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max\
    \ {\n            max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in counts {\n        if k <= v && k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counts\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for x in lst {\n  \
    \      *freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (x, f) in freq {\n        if f >= x && x > max {\n            max = x;\n   \
    \     }\n    }\n    max", "    let mut lst = lst;\n    lst.sort();\n    let mut\
    \ max = -1;\n    let mut count = 0;\n    let mut prev = 0;\n    for i in lst {\n\
    \        if i == prev {\n            count += 1;\n        } else {\n         \
    \   if count >= prev && prev > max {\n                max = prev;\n          \
    \  }\n            count = 1;\n            prev = i;\n        }\n    }\n    if\
    \ count >= prev && prev > max {\n        max = prev;\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for &x in &lst {\n        *counts.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (&x, &y) in &counts {\n       \
    \ if x > y {\n            continue;\n        }\n        if x > max {\n       \
    \     max = x;\n        }\n    }\n    max", "    let mut count = HashMap::new();\n\
    \    for i in lst {\n        *count.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in count {\n        if k <= v && k > max {\n \
    \           max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for &x in &lst {\n        *counts.entry(x).or_insert(0) += 1;\n    }\n  \
    \  let mut max = -1;\n    for (k, v) in counts {\n        if k <= v && k > max\
    \ {\n            max = k;\n        }\n    }\n    max", "    let mut max = -1;\n\
    \    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in lst {\n\
    \        *map.entry(i).or_insert(0) += 1;\n    }\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        \
    \    count = value;\n        }\n    }\n    if count >= max {\n        max\n  \
    \  } else {\n        -1\n    }", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if v >= k && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for num in lst {\n        let count =\
    \ counts.entry(num).or_insert(0);\n        *count += 1;\n    }\n    for (num,\
    \ count) in counts {\n        if num <= count {\n            return num;\n   \
    \     }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (key, val) in freq {\n        if key <= val && key > max {\n        \
    \    max = key;\n        }\n    }\n    max", "    let mut count = HashMap::new();\n\
    \    for i in lst {\n        let c = count.entry(i).or_insert(0);\n        *c\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count.iter() {\n    \
    \    if *k <= *v && *k > max {\n            max = *k;\n        }\n    }\n    max",
  "    let mut count = HashMap::new();\n    for i in lst {\n        *count.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..lst.len() as isize + 1).rev() {\n        if let\
    \ Some(v) = count.get(&i) {\n            if *v >= i {\n                return\
    \ i;\n            }\n        }\n    }\n    -1", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n   \
    \     }\n    }\n    res", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut counts = HashMap::new();\n    for n\
    \ in lst {\n        let count = counts.entry(n).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (n, count) in counts {\n      \
    \  if n <= count && n > max {\n            max = n;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for\
    \ i in lst {\n        let count = freq.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut count = HashMap::new();\n    for i in lst {\n        *count.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in count {\n     \
    \   if key <= value && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut counts = HashMap::new();\n    for &i in &lst {\n     \
    \   *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (&i, &c) in &counts {\n        if i > 0 && c >= i && i > max {\n           \
    \ max = i;\n        }\n    }\n    max", "    let mut m = HashMap::new();\n   \
    \ for i in lst {\n        let count = m.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    for (k, v) in m {\n        if k <= v {\n            return\
    \ k;\n        }\n    }\n    -1", "    let mut counts = HashMap::new();\n    for\
    \ i in lst {\n        let count = counts.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut result = -1;\n    for (key, val) in counts {\n   \
    \     if val >= key && key > result {\n            result = key;\n        }\n\
    \    }\n    result", "    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut m = HashMap::new();\n    for i in lst\
    \ {\n        let c = m.entry(i).or_insert(0);\n        *c += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in m {\n        if v >= k && k > max {\n     \
    \       max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (key, val) in freq {\n        if key <= val &&\
    \ key > max {\n            max = key;\n        }\n    }\n    max", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_val = -1;\n    for (key, val) in\
    \ counts.iter() {\n        if *key <= *val && *key > max_val {\n            max_val\
    \ = *key;\n        }\n    }\n    max_val", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if v >= k && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut res = -1;\n    for (k, v) in freq {\n        if k <= v && k > res {\n  \
    \          res = k;\n        }\n    }\n    res", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut res = -1;\n    for (key, val) in freq {\n        if key <= val && key >\
    \ res {\n            res = key;\n        }\n    }\n    res", "    let mut counts\
    \ = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..).rev() {\n        if let Some(c) = counts.get(&i)\
    \ {\n            if c >= &i {\n                return i;\n            }\n    \
    \    }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        *freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n \
    \       if key <= val && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        let\
    \ count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (key, value) in freq {\n        if key <= value && key >\
    \ max {\n            max = key;\n        }\n    }\n    max", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max"]
stop_tokens:
- "\n}"
