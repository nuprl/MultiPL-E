name: HumanEval_160_do_algebra
language: rs
results:
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmps2pk1wzx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpieqx5u4k.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6pot9ns5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmwbu4m8m.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp68hssrjj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpoowv13cd.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unsupported operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphvkji7cj.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpscazdpvl.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp12s5tihh.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result += op2,\n            \"-\" => result -= op2,\n            \"*\"\
    \ => result *= op2,\n            \"//\" => result /= op2,\n            \"**\"\
    \ => result = result.pow(op2 as u32),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphd0vssia.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3pdg2ohd.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmph988sx23.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5nfzsfpq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5249840h.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1rdzquto.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpg2pyb039.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpunt963b8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpim4lhqim.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpp8vts2ha.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0azy1o0c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7ffm7jg_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpr7e6ip0c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpox4j8wtz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6k7h8hcv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprv4j_t7v.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprumzqbzq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqw02ijze.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_hy377cb.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvkc1mytd.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6ds_tru0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvgqmxm15.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqv2_mgt7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpises5n72.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let op1 = operand[i];\n        let op2 = operand[i +\
    \ 1];\n        match op.as_str() {\n            \"+\" => result = op1 + op2,\n\
    \            \"-\" => result = op1 - op2,\n            \"*\" => result = op1 *\
    \ op2,\n            \"//\" => result = op1 / op2,\n            \"**\" => result\
    \ = op1.pow(op2 as u32),\n            _ => panic!(\"Unknown operator: {}\", op),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpupjthcuh.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpd_6x5ib8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdldy9o__.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpaayn9xke.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpyngx869s.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgfuunwu7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let op1 = operand[i];\n        let op2 = operand[i +\
    \ 1];\n        match op.as_str() {\n            \"+\" => result = op1 + op2,\n\
    \            \"-\" => result = op1 - op2,\n            \"*\" => result = op1 *\
    \ op2,\n            \"//\" => result = op1 / op2,\n            \"**\" => result\
    \ = op1.pow(op2 as u32),\n            _ => panic!(\"Unknown operator\"),\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpvxlwb1y9.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpb1k2acxa.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpflaar4yh.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpkcf5og65.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let opd = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += opd,\n            \"-\" => result -= opd,\n\
    \            \"*\" => result *= opd,\n            \"//\" => result /= opd,\n \
    \           \"**\" => result = result.pow(opd as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpim1n75tp.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5oxf6fks.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4rsi4_3c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp74whztk_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmplpqr0rz5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpyo7kkluv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcu91x7_e.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfkubfapg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0su9wtjm.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphxh42mr9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpoguzird4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6murftep.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9ca6irc_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwd1e8acc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3fsu64qo.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwni3ebam.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpraccnwus.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsgomcf80.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6vnj3upn.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpw5qsyz56.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgzxnnlwz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcnjuruq4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6fvbcff6.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpttymmlm4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5_kfsrw5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5hpr6ka4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let op1 = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += op1,\n            \"-\" => result -= op1,\n\
    \            \"*\" => result *= op1,\n            \"//\" => result /= op1,\n \
    \           \"**\" => result = result.pow(op1 as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsxj5m16s.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvxpasjuy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpg32p83cw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpxlxq2_9u.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp71fllx6_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzjv611zd.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7uy_hyik.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmvzbf83e.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmps2obwkb6.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzai5hd9s.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpuuspzu8_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgeoz4fr5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6tdzdbvl.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op1 = operand[i];\n        let op2 = operand[i + 1];\n        match\
    \ op.as_str() {\n            \"+\" => result = op1 + op2,\n            \"-\" =>\
    \ result = op1 - op2,\n            \"*\" => result = op1 * op2,\n            \"\
    //\" => result = op1 / op2,\n            \"**\" => result = op1.pow(op2 as u32),\n\
    \            _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpkoaf0cxc.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpq_iu6nxd.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7u9lll03.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcekrf3co.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmy8x_gdz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result += op2,\n            \"-\" => result -= op2,\n            \"*\"\
    \ => result *= op2,\n            \"//\" => result /= op2,\n            \"**\"\
    \ => result = result.pow(op2 as u32),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpxpkhohc3.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprvvu49lz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpp40iomjz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgjx40zs5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpt65vnzqx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwfbg6xne.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsxsk46c5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfsmfysf4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4ffhtsmy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op_result = match op.as_str() {\n            \"+\" => result + operand[i\
    \ + 1],\n            \"-\" => result - operand[i + 1],\n            \"*\" => result\
    \ * operand[i + 1],\n            \"//\" => result / operand[i + 1],\n        \
    \    \"**\" => result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        };\n        result = op_result;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpf_9l1oen.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwmey1_z5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpt2zj4mf7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvaxv2_to.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp2u91q3jp.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3k5j299i.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpq791cvfr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpe04izvu7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptr6g66pu.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ operator[i].as_str();\n        match op {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpy0efef30.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ operator[i].as_str();\n        let operand = operand[i + 1];\n        match\
    \ op {\n            \"+\" => result += operand,\n            \"-\" => result -=\
    \ operand,\n            \"*\" => result *= operand,\n            \"//\" => result\
    \ /= operand,\n            \"**\" => result = result.pow(operand as u32),\n  \
    \          _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfcg5khmw.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpumljjiyw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6p0ur4xi.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpxjnollz3.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmph2jp4s76.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmpl08isf.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7agctxqr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprxs7ufy6.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvk810qkz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfp3ef5hs.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5jtg8qnt.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp8gmj81b1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0bcai2ks.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpf2k6jf3t.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvwsqmn3i.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0g1s_fo7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_yffwxhx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmped1p2_tw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpy6tr9c7t.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzo97pri8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdxvar3es.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphoteluqe.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp832q5tjf.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4x0kjsj6.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsaq5qi68.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpii4mef7p.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3jmf5ttg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpt07bxfhm.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp36adiyfp.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7std6bmb.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpr_pvkrsc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzu5l788p.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpyw348wm1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3941sps5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpr5lra333.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            result = result.pow(operand[i + 1] as u32);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6wy41k2o.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpspzt_cew.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwhrk9397.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjl3jrgzc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpq1kb36nx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphy0beb1w.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpftawsjwb.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let operand = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += operand,\n            \"-\" => result -= operand,\n\
    \            \"*\" => result *= operand,\n            \"//\" => result /= operand,\n\
    \            \"**\" => result = result.pow(operand as u32),\n            _ =>\
    \ panic!(\"Unknown operator {}\", op),\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3dvr4ejj.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwbap6r15.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwq9c0amu.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result += op2,\n            \"-\" => result -= op2,\n            \"*\"\
    \ => result *= op2,\n            \"//\" => result /= op2,\n            \"**\"\
    \ => result = result.pow(op2 as u32),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4jxbtlf3.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptk2dso0x.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpk4fyskwp.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpxr60vrov.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmps8fu8gms.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpckdhgp9j.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmuaghbyx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmw5e6pi7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpz_8112kl.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfgdnaf3u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpskg6x5dv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ operator[i].as_str();\n        let op2 = operand[i + 1];\n        match op {\n\
    \            \"+\" => result += op2,\n            \"-\" => result -= op2,\n  \
    \          \"*\" => result *= op2,\n            \"//\" => result /= op2,\n   \
    \         \"**\" => result = result.pow(op2 as u32),\n            _ => panic!(\"\
    Unknown operator {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1boiloos.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzkv1dkq8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpb3ehf9du.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwalwd085.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpn5s1zkgg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpnhcwha7d.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpaz5q_b9x.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op1 = operand[i];\n        let op2 = operand[i + 1];\n        match\
    \ op.as_str() {\n            \"+\" => result = op1 + op2,\n            \"-\" =>\
    \ result = op1 - op2,\n            \"*\" => result = op1 * op2,\n            \"\
    //\" => result = op1 / op2,\n            \"**\" => result = op1.pow(op2 as u32),\n\
    \            _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpu5hvpb58.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op1 = operand[i];\n        let op2 = operand[i + 1];\n        match\
    \ op.as_str() {\n            \"+\" => result = op1 + op2,\n            \"-\" =>\
    \ result = op1 - op2,\n            \"*\" => result = op1 * op2,\n            \"\
    //\" => result = op1 / op2,\n            \"**\" => result = op1.pow(op2 as u32),\n\
    \            _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpf_imv6s2.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwoh_x6iy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => println!(\"Invalid operator\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzopjtu0c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzxl0_ewg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpz59bgy43.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3b1yyxa_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpd87h8u8c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpkvog2lqb.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7v742m3e.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpw96guy_h.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp2a1_f030.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let op1 = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += op1,\n            \"-\" => result -= op1,\n\
    \            \"*\" => result *= op1,\n            \"//\" => result /= op1,\n \
    \           \"**\" => result = result.pow(op1 as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpxhqafdvj.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmplzh1wky5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphn5xlm2j.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptegf3wel.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4lnk2x_t.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let operand = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += operand,\n            \"-\" => result -= operand,\n\
    \            \"*\" => result *= operand,\n            \"//\" => result /= operand,\n\
    \            \"**\" => result = result.pow(operand as u32),\n            _ =>\
    \ panic!(\"Unknown operator {}\", op),\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzxo591r5.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpisfqs8kz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unsupported operator\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpn7adac0c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzoceejfy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpj2kjhphm.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpg9btwctc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcjqc01vo.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpuoe2xyks.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpf93kgniq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpb1a0f7n5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa1i6wlp0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpis_kv8ct.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp46cf5jh9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1wy4hfez.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
