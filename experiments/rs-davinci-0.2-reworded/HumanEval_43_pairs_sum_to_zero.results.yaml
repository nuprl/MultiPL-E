name: HumanEval_43_pairs_sum_to_zero
language: rs
results:
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8tsbt16s.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj15fgqyk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7kjx3v41.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        for j in i+1..l.len() {\n            if l[i] + l[j] == 0 {\n    \
    \            return true;\n            }\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        for j in i + 1..l.len() {\n            if l[i] + l[j] == 0 {\n  \
    \              return true;\n            }\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6liew2gf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: Implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc0t5uqbp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        for j in i + 1..l.len() {\n            if l[i] + l[j] == 0 {\n  \
    \              return true;\n            }\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplrdb_j5e.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\
    \    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            if\
    \ l[i] + l[j] == 0 {\n                return true;\n            }\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut left =\
    \ 0;\n    let mut right = l.len() - 1;\n    while left < right {\n        let\
    \ sum = l[left] + l[right];\n        if sum == 0 {\n            return true;\n\
    \        } else if sum < 0 {\n            left += 1;\n        } else {\n     \
    \       right -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        if l[i] > 0 {\n            break;\n        }\n        for j in i\
    \ + 1..l.len() {\n            if l[i] + l[j] == 0 {\n                return true;\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1qbyo_1o.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        for j in i + 1..l.len() {\n            if l[i] + l[j] == 0 {\n  \
    \              return true;\n            }\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        for j in i + 1..l.len() {\n            if l[i] + l[j] == 0 {\n  \
    \              return true;\n            }\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_hxt23hw.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxlcx2w6g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdcdwbvkc.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l_copy = l.clone();\n    l_copy.sort();\n\
    \    let mut i = 0;\n    let mut j = l_copy.len() - 1;\n    while i < j {\n  \
    \      if l_copy[i] + l_copy[j] == 0 {\n            return true;\n        } else\
    \ if l_copy[i] + l_copy[j] < 0 {\n            i += 1;\n        } else {\n    \
    \        j -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut m = HashMap::new();\n    for i in l {\n \
    \       if m.contains_key(&i) {\n            return true;\n        }\n       \
    \ m.insert(-i, true);\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp3os6n_bx.rs:15:17\n   |\n15 |     let mut m = HashMap::new();\n   |\
    \                 ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        for j in i + 1..l.len() {\n            if l[i] + l[j] == 0 {\n  \
    \              return true;\n            }\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement this function\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqs6yg_kk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0\
    \ {\n            return true;\n        } else if l[i] + l[j] < 0 {\n         \
    \   i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
