language: rs
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 10 {\n            sum += n;\n        } else if n < 100 {\n         \
    \   sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100 + (n\
    \ % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp1f7l5ovs.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut n = arr[i as usize];\n  \
    \      while n > 0 {\n            sum += n % 10;\n            n /= 10;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n \
    \   assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n \
    \   assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmpkxhyqt9p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        if num > 99 {\n            num = 99;\n        }\n        sum += num;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmp70wgturk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp9341d8fw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp9341d8fw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmpxa6ayckz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuh63s5bw.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747552
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuh63s5bw.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747552
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuh63s5bw.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747552
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num >= 10 {\n            num /= 10;\n        }\n        sum +=\
    \ num;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpk5nimk0r.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmpxa6ayckz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmpxa6ayckz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        if num > 99 {\n            num = 99;\n        }\n        sum += num;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmp70wgturk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmpxa6ayckz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp9341d8fw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp9341d8fw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp9341d8fw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        if num > 99 {\n            num = 99;\n        }\n        sum += num;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmp70wgturk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        if num > 99 {\n            num = 99;\n        }\n        sum += num;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmp70wgturk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp9341d8fw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp9341d8fw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmpxa6ayckz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuh63s5bw.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747552
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpaxlvisp_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 10 {\n            sum += n;\n        } else if n < 100 {\n         \
    \   sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100 + (n\
    \ % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp1f7l5ovs.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuh63s5bw.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747552
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuh63s5bw.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747552
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuh63s5bw.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747552
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        if num > 99 {\n            num = 99;\n        }\n        sum += num;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmp70wgturk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747553
