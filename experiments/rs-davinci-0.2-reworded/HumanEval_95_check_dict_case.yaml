name: HumanEval_95_check_dict_case
language: rs
prompt: "use std::collections::HashMap;\n\n/// Given a HashMap, return true if all\
  \ keys are strings in lower \n/// case or all keys are strings in upper case, else\
  \ return false.\n/// The function should return false is the given HashMap is empty.\n\
  /// Examples:\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"\
  apple\")), (String::from(\"b\"), String::from(\"banana\"))]))\n/// true\n/// >>>\
  \ check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")),\
  \ (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"\
  banana\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  a\"), String::from(\"apple\")), (8, String::from(\"banana\")), (String::from(\"\
  a\"), String::from(\"apple\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))]))\n/// true\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"\
  pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"\
  B\"), String::from(\"banana\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\"\
  )), (String::from(\"a\"), String::from(\"apple\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"),\
  \ String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])),\
  \ true);\n    assert_eq!(candidate(HashMap::from([])), false);\n}\n"
completions: ["    let mut is_lower = true;\n    let mut is_upper = true;\n    for\
    \ key in dict.keys() {\n        if key.chars().next().unwrap().is_lowercase()\
    \ {\n            is_upper = false;\n        } else if key.chars().next().unwrap().is_uppercase()\
    \ {\n            is_lower = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    is_lower || is_upper", "    let mut all_lower = true;\n\
    \    let mut all_upper = true;\n    for key in dict.keys() {\n        if key.chars().all(|c|\
    \ c.is_lowercase()) {\n            all_upper = false;\n        } else if key.chars().all(|c|\
    \ c.is_uppercase()) {\n            all_lower = false;\n        } else {\n    \
    \        return false;\n        }\n    }\n    all_lower || all_upper", "    let\
    \ mut is_lower = true;\n    let mut is_upper = true;\n    for key in dict.keys()\
    \ {\n        if key.chars().next().unwrap().is_lowercase() {\n            is_upper\
    \ = false;\n        } else if key.chars().next().unwrap().is_uppercase() {\n \
    \           is_lower = false;\n        } else {\n            return false;\n \
    \       }\n    }\n    is_lower || is_upper", "    let mut lower_case = true;\n\
    \    let mut upper_case = true;\n    for key in dict.keys() {\n        if key.chars().all(|c|\
    \ c.is_lowercase()) {\n            upper_case = false;\n        } else if key.chars().all(|c|\
    \ c.is_uppercase()) {\n            lower_case = false;\n        } else {\n   \
    \         return false;\n        }\n    }\n    lower_case || upper_case", "  \
    \  if dict.is_empty() {\n        return false;\n    }\n    let mut is_lower =\
    \ true;\n    let mut is_upper = true;\n    for key in dict.keys() {\n        if\
    \ key.chars().any(|c| c.is_uppercase()) {\n            is_lower = false;\n   \
    \     }\n        if key.chars().any(|c| c.is_lowercase()) {\n            is_upper\
    \ = false;\n        }\n    }\n    is_lower || is_upper", "    let mut all_lower\
    \ = true;\n    let mut all_upper = true;\n    for (key, _) in dict {\n       \
    \ if key.chars().all(|c| c.is_lowercase()) {\n            all_upper = false;\n\
    \        } else if key.chars().all(|c| c.is_uppercase()) {\n            all_lower\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  all_lower || all_upper", "    let mut is_upper = false;\n    let mut is_lower\
    \ = false;\n    for (key, _) in dict {\n        if key.is_uppercase() {\n    \
    \        is_upper = true;\n        } else if key.is_lowercase() {\n          \
    \  is_lower = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    if is_upper && is_lower {\n        return false;\n    }\n    true",
  "    let mut lower = true;\n    let mut upper = true;\n    for (key, _) in dict\
    \ {\n        if key.chars().next().unwrap().is_lowercase() {\n            upper\
    \ = false;\n        } else if key.chars().next().unwrap().is_uppercase() {\n \
    \           lower = false;\n        } else {\n            return false;\n    \
    \    }\n    }\n    lower || upper", "    let mut all_lower = true;\n    let mut\
    \ all_upper = true;\n    for (key, _) in dict {\n        if key.chars().all(|c|\
    \ c.is_uppercase()) {\n            all_lower = false;\n        } else if key.chars().all(|c|\
    \ c.is_lowercase()) {\n            all_upper = false;\n        } else {\n    \
    \        return false;\n        }\n    }\n    all_lower || all_upper", "    let\
    \ mut is_lower = true;\n    let mut is_upper = true;\n    for key in dict.keys()\
    \ {\n        if key.chars().any(|c| c.is_uppercase()) {\n            is_lower\
    \ = false;\n        }\n        if key.chars().any(|c| c.is_lowercase()) {\n  \
    \          is_upper = false;\n        }\n    }\n    is_lower || is_upper", " \
    \   let mut lower = true;\n    let mut upper = true;\n    for key in dict.keys()\
    \ {\n        if !key.is_ascii_lowercase() {\n            lower = false;\n    \
    \    }\n        if !key.is_ascii_uppercase() {\n            upper = false;\n \
    \       }\n    }\n    lower || upper", "    let mut is_lower = true;\n    let\
    \ mut is_upper = true;\n    for key in dict.keys() {\n        is_lower = is_lower\
    \ && key.chars().all(|c| c.is_lowercase());\n        is_upper = is_upper && key.chars().all(|c|\
    \ c.is_uppercase());\n    }\n    is_lower || is_upper", "    let mut lower_case\
    \ = true;\n    let mut upper_case = true;\n    for key in dict.keys() {\n    \
    \    if !key.is_ascii_lowercase() {\n            lower_case = false;\n       \
    \ }\n        if !key.is_ascii_uppercase() {\n            upper_case = false;\n\
    \        }\n    }\n    lower_case || upper_case", "    // TODO: Implement this\
    \ function\n    false", "    let mut lower_case = true;\n    let mut upper_case\
    \ = true;\n    for key in dict.keys() {\n        if !key.chars().all(|c| c.is_lowercase())\
    \ {\n            lower_case = false;\n        }\n        if !key.chars().all(|c|\
    \ c.is_uppercase()) {\n            upper_case = false;\n        }\n    }\n   \
    \ lower_case || upper_case", "    let mut lower = true;\n    let mut upper = true;\n\
    \    for key in dict.keys() {\n        if key.chars().next().unwrap().is_lowercase()\
    \ {\n            upper = false;\n        } else if key.chars().next().unwrap().is_uppercase()\
    \ {\n            lower = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    lower || upper", "    if dict.is_empty() {\n        return\
    \ false;\n    }\n    let mut is_lower = false;\n    let mut is_upper = false;\n\
    \    for (key, _) in dict {\n        if key.is_lowercase() {\n            is_lower\
    \ = true;\n        } else if key.is_uppercase() {\n            is_upper = true;\n\
    \        } else {\n            return false;\n        }\n    }\n    is_lower ^\
    \ is_upper", "    if dict.len() == 0 {\n        return false;\n    }\n    let\
    \ mut lower_case = true;\n    let mut upper_case = true;\n    for key in dict.keys()\
    \ {\n        if key.chars().next().unwrap().is_lowercase() {\n            upper_case\
    \ = false;\n        } else if key.chars().next().unwrap().is_uppercase() {\n \
    \           lower_case = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    return lower_case || upper_case;", "    let mut is_lower\
    \ = false;\n    let mut is_upper = false;\n    for key in dict.keys() {\n    \
    \    if key.chars().all(|c| c.is_lowercase()) {\n            is_lower = true;\n\
    \        } else if key.chars().all(|c| c.is_uppercase()) {\n            is_upper\
    \ = true;\n        } else {\n            return false;\n        }\n    }\n   \
    \ is_lower || is_upper", "    // TODO: Implement the function\n    false"]
stop_tokens:
- "\n}"
