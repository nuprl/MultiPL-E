name: HumanEval_5_intersperse
language: rs
results:
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, &number) in numbers.iter().enumerate() {\n        result.push(number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, x) in numbers.iter().enumerate() {\n        result.push(*x);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for number in numbers {\n        result.push(number);\n        result.push(delimeter);\n\
    \    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for number in iter {\n            result.push(delimeter);\n\
    \            result.push(*number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for number in iter {\n            result.push(delimeter);\n\
    \            result.push(*number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for x in iter {\n            result.push(delimeter);\n\
    \            result.push(*x);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for number in iter {\n            result.push(delimeter);\n\
    \            result.push(*number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for n in iter {\n            result.push(delimeter);\n\
    \            result.push(*n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, num) in numbers.iter().enumerate() {\n        result.push(*num);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    if numbers.len() == 0 {\n        return result;\n    }\n    result.push(numbers[0]);\n\
    \    for i in 1..numbers.len() {\n        result.push(delimeter);\n        result.push(numbers[i]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        if i != 0 {\n            result.push(delimeter);\n\
    \        }\n        result.push(numbers[i]);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for number in iter {\n            result.push(delimeter);\n\
    \            result.push(*number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, num) in numbers.iter().enumerate() {\n        result.push(*num);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, num) in numbers.iter().enumerate() {\n        result.push(*num);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, num) in numbers.iter().enumerate() {\n        result.push(*num);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for number in iter {\n            result.push(delimeter);\n\
    \            result.push(*number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut interspersed = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        interspersed.push(numbers[i]);\n   \
    \     if i < numbers.len() - 1 {\n            interspersed.push(delimeter);\n\
    \        }\n    }\n    interspersed\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, num) in numbers.iter().enumerate() {\n        result.push(*num);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for number in numbers {\n        result.push(number);\n        result.push(delimeter);\n\
    \    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, &x) in numbers.iter().enumerate() {\n        result.push(x);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for number in iter {\n            result.push(delimeter);\n\
    \            result.push(*number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        res.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            res.push(delimeter);\n     \
    \   }\n    }\n    res\n}\n\nfn main() {\n    let candidate = intersperse;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() - 1 {\n        result.push(numbers[i]);\n     \
    \   result.push(delimeter);\n    }\n    if numbers.len() > 0 {\n        result.push(numbers[numbers.len()\
    \ - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpgk66yxx2.rs:8:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, num) in numbers.iter().enumerate() {\n        result.push(*num);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, &x) in numbers.iter().enumerate() {\n        result.push(x);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for n in iter {\n            result.push(delimeter);\n\
    \            result.push(*n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for (i, &n) in numbers.iter().enumerate() {\n        result.push(n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, num) in numbers.iter().enumerate() {\n        result.push(*num);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i != numbers.len() - 1 {\n            result.push(delimeter);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if\
    \ i != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n  \
    \      if i < numbers.len() - 1 {\n            result.push(delimeter);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut iter = numbers.iter();\n    if let Some(first) = iter.next() {\n\
    \        result.push(*first);\n        for number in iter {\n            result.push(delimeter);\n\
    \            result.push(*number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i < numbers.len() - 1 {\n            result.push(delimeter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for (i, number) in numbers.iter().enumerate() {\n        result.push(*number);\n\
    \        if i != numbers.len() - 1 {\n            result.push(delimeter);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
