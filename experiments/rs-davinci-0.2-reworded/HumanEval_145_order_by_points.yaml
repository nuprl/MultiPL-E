name: HumanEval_145_order_by_points
language: rs
prompt: "/// Write a function which sorts the given vector of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n\
  /// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// vec![]\nfn order_by_points(nums:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
  \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
  \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
  \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
  \ 23, 6, 6]);\n}\n"
completions: ["    let mut nums = nums;\n    nums.sort_by_key(|&x| (sum_digits(x),\
    \ x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    let mut sums = Vec::new();\n    for i in 0..nums.len() {\n    \
    \    sums.push((nums[i], i));\n    }\n    sums.sort_by(|a, b| {\n        let (a_num,\
    \ a_index) = a;\n        let (b_num, b_index) = b;\n        let a_sum = sum_digits(*a_num);\n\
    \        let b_sum = sum_digits(*b_num);\n        if a_sum == b_sum {\n      \
    \      a_index.cmp(&b_index)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    for i in 0..nums.len() {\n        nums[i] = sums[i].0;\n\
    \    }\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| {\n  \
    \      let mut sum = 0;\n        let mut n = n;\n        if n < 0 {\n        \
    \    n = -n;\n        }\n        while n > 0 {\n            sum += n % 10;\n \
    \           n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += (x % 10).abs();\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut sum_vec: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, n) in nums.iter().enumerate() {\n       \
    \ let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n        \
    \    sum += n % 10;\n            n /= 10;\n        }\n        sum_vec.push((sum,\
    \ i as isize));\n    }\n    sum_vec.sort();\n    let mut result: Vec<isize> =\
    \ Vec::new();\n    for (_, i) in sum_vec {\n        result.push(nums[i as usize]);\n\
    \    }\n    result", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n\
    \        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n  \
    \          sum += (x % 10).abs();\n            x /= 10;\n        }\n        sum\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += (x % 10).abs();\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&n| (n.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n   \
    \     let mut n = *x;\n        while n != 0 {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n       \
    \ let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut\
    \ n = *n;\n        while n != 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut n = *n;\n        let mut sum = 0;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&n| {\n        let mut sum = 0;\n\
    \        let mut n = n;\n        while n != 0 {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| sum_of_digits(x));\n    nums", "   \
    \ let mut nums = nums;\n    nums.sort_by_key(|&n| (sum_digits(n), n));\n    nums",
  "    let mut nums_with_points: Vec<(isize, usize)> = nums\n        .iter()\n   \
    \     .map(|&x| (x, x.abs() as usize % 10 + x.abs() as usize / 10))\n        .collect();\n\
    \    nums_with_points.sort_by(|&(x, x_p), &(y, y_p)| match x_p.cmp(&y_p) {\n \
    \       std::cmp::Ordering::Equal => x.cmp(&y),\n        std::cmp::Ordering::Less\
    \ => std::cmp::Ordering::Less,\n        std::cmp::Ordering::Greater => std::cmp::Ordering::Greater,\n\
    \    });\n    nums_with_points.iter().map(|&(x, _)| x).collect()", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&n| {\n        let mut sum = 0;\n      \
    \  let mut n = n;\n        while n != 0 {\n            sum += (n % 10).abs();\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n|\
    \ (n.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&num| {\n       \
    \ let mut sum = 0;\n        let mut num = num;\n        while num != 0 {\n   \
    \         sum += num % 10;\n            num /= 10;\n        }\n        sum\n \
    \   });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| (n.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut num = *x;\n\
    \        while num != 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n  \
    \      let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n    \
    \        sum += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| x.abs() as usize);\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums_with_points: Vec<(isize, usize)> = nums\n        .iter()\n   \
    \     .map(|num| (*num, num.abs() as usize % 10 + num.abs() as usize / 10))\n\
    \        .collect();\n    nums_with_points.sort_by(|a, b| a.1.cmp(&b.1));\n  \
    \  nums_with_points.iter().map(|(num, _)| *num).collect()", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| sum_of_digits(x));\n    nums", "    let mut nums =\
    \ nums;\n    nums.sort_by_key(|&n| {\n        let mut sum = 0;\n        let mut\
    \ n = n;\n        while n != 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| x.abs() as usize);\n    nums", "    let mut nums =\
    \ nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize,\
    \ x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums_with_points: Vec<(isize, usize)> = nums\n      \
    \  .iter()\n        .map(|&num| (num, num.abs() as usize))\n        .collect();\n\
    \    nums_with_points.sort_by(|a, b| a.1.cmp(&b.1));\n    nums_with_points.iter().map(|&(num,\
    \ _)| num).collect()", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n\
    \        let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n   \
    \     let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n    \
    \        sum += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n\
    \        let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n       \
    \ let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n       \
    \ let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&x| sum_digits(x));\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| sum_of_digits(*n));\n    nums", "   \
    \ let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n \
    \   nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| sum_digits(x));\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n       \
    \ let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    let mut sums = Vec::new();\n    for i in 0..nums.len()\
    \ {\n        let mut sum = 0;\n        let mut num = nums[i];\n        while num\
    \ != 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sums.push(sum);\n    }\n    for i in 0..nums.len() {\n        for j in\
    \ i..nums.len() {\n            if sums[i] > sums[j] {\n                sums.swap(i,\
    \ j);\n                nums.swap(i, j);\n            }\n        }\n    }\n   \
    \ nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize % 10 + x.abs() as usize / 10, x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() as usize);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let mut x = x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ sum_digits(x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ x.abs() as usize);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ (x.abs() as u32).to_string().chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (sum_digits(x),\
    \ x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n|\
    \ {\n        let mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n  \
    \      let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n    \
    \        sum += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n       \
    \ let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&n| {\n        let mut sum = 0;\n        let\
    \ mut n = n;\n        while n != 0 {\n            sum += n % 10;\n           \
    \ n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|d|\
    \ d.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let mut x = x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs()\
    \ % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ sum_digits(x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n|\
    \ {\n        let mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs()\
    \ % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ x.abs() as usize);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| (x.abs()\
    \ as u32).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.abs() / 10 + a.abs() % 10;\n        let b_sum = b.abs() / 10 + b.abs()\
    \ % 10;\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n       \
    \ let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&n| {\n        let mut sum = 0;\n        let mut n = n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|num|\
    \ {\n        let mut sum = 0;\n        let mut num = *num;\n        while num\
    \ != 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n|\
    \ (n.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (sum_digits(x), x));\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n\
    \        let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| n.abs() % 10 + n.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n       \
    \ let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|x| x.abs() as usize);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&num| {\n        let mut sum =\
    \ 0;\n        let mut num = num;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|num| {\n        let mut sum = 0;\n\
    \        let mut num = *num;\n        while num != 0 {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        sum\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n\
    \        let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by_key(|&x| sum_of_digits(x));\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n\
    \        let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut\
    \ x = *x;\n        while x != 0 {\n            sum += x % 10;\n            x /=\
    \ 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n   \
    \     let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n    \
    \        sum += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| sum_digits(x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        if x < 0 {\n  \
    \          x = -x;\n        }\n        while x > 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        if x < 0 {\n  \
    \          x = -x;\n        }\n        while x > 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (sum_digits(x), x));\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n   \
    \     let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n  \
    \          x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|d|\
    \ d.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums"]
stop_tokens:
- "\n}"
