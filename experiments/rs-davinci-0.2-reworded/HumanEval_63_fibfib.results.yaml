name: HumanEval_63_fibfib
language: rs
results:
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        a = b;\n      \
    \  b = c;\n        c = a + b + c;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpmcpc3t83.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmplbwxifk5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    if n == 0 {\n        return 0;\n    }\n\
    \    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n\
    \    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _\
    \ in 3..n + 1 {\n        let d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        a = b;\n      \
    \  b = c;\n        c = a + b + c;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpfq9qu8jp.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..=n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n_minus_3 = 0;\n    let mut n_minus_2 =\
    \ 0;\n    let mut n_minus_1 = 1;\n    let mut result = 0;\n    for _ in 3..n +\
    \ 1 {\n        result = n_minus_1 + n_minus_2 + n_minus_3;\n        n_minus_3\
    \ = n_minus_2;\n        n_minus_2 = n_minus_1;\n        n_minus_1 = result;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibs = vec![0,\
    \ 0, 1];\n    for i in 3..n + 1 {\n        fibs.push(fibs[i as usize - 1] + fibs[i\
    \ as usize - 2] + fibs[i as usize - 3]);\n    }\n    fibs[n as usize]\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpp3l9b0qz.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpl0_ov80h.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        let d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    a\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpyl0e1wpd.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpochng44i.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ + 1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp7io9akka.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n\
    \ == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _ in 3..n\
    \ + 1 {\n        let d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpyefay6b5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = a + b + c;\n    for _\
    \ in 3..n {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b\
    \ + c;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpms1noxbq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpsvpw_3kt.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmphbmanheq.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp5uxweads.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpimljl2c1.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmppx5vejqk.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    if n == 0 {\n        return 0;\n    }\n\
    \    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n\
    \    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _\
    \ in 3..(n + 1) {\n        let d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        let d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    a\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n_minus_3 = 0;\n    let mut n_minus_2 =\
    \ 0;\n    let mut n_minus_1 = 1;\n    let mut n = 0;\n    for _ in 3..n + 1 {\n\
    \        n = n_minus_1 + n_minus_2 + n_minus_3;\n        n_minus_3 = n_minus_2;\n\
    \        n_minus_2 = n_minus_1;\n        n_minus_1 = n;\n    }\n    n\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp8s6768ml.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpoca024pp.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp9q7y8zrj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp34ozbxsy.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp5nojo6oi.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpasjsxxnd.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpt8urt0sk.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpty9tvfzq.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp1rj3nnmk.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpypuhyl57.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpbbj8xxzq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut i = 3;\n    while i <= n {\n        let d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n        i += 1;\n    }\n    c\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp1h2ymk09.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp4mv28eiu.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp5g74cm0u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpeavz_64n.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmphf7vech1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpb37ev6ve.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp5d8v9t3q.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp76qka6im.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp5pct8mrq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmprw4ggoh3.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = a + b + c;\n    for _\
    \ in 3..n {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b\
    \ + c;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp0zfcix3_.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpuezomsib.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpnmbhln4j.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpv9w321z0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmphwoqya75.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n1 = 0;\n    let mut n2 = 0;\n    let mut\
    \ n3 = 1;\n    let mut result = 0;\n    for _ in 3..n+1 {\n        result = n1\
    \ + n2 + n3;\n        n1 = n2;\n        n2 = n3;\n        n3 = result;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpanfb4vd2.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpzmnu__nw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpbdchaz09.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpaulxju3y.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxwbl5wvl.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n1 = 0;\n    let mut n2 = 0;\n    let mut\
    \ n3 = 1;\n    let mut result = 0;\n    for _ in 3..n + 1 {\n        result =\
    \ n1 + n2 + n3;\n        n1 = n2;\n        n2 = n3;\n        n3 = result;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmph5wqk26l.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    } else if n == 2 {\n        return 1;\n    } else {\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n\nfn main() {\n  \
    \  let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpe4853pys.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 0..n {\n  \
    \      d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpew5zhikv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpqs5i0992.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        a = b;\n      \
    \  b = c;\n        c = a + b + c;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmp2j11sgay.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp46wsnueo.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpzuxgqe72.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmphbv0w7br.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    if n < 2 {\n        return 0;\n    }\n\
    \    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n    let mut b\
    \ = 0;\n    let mut c = 1;\n    for _ in 3..n+1 {\n        let d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    c\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp250rf91_.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp5z6v9ipx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp0ef4yjj8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a: isize = 0;\n\
    \    let mut b: isize = 0;\n    let mut c: isize = 1;\n    for _ in 0..n {\n \
    \       a = b;\n        b = c;\n        c = a + b + c;\n    }\n    a\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmppj7rbctk.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmplvv89xqu.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpgqa65off.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpr0pyenvw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..=n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n1 = 0;\n    let mut n2 = 0;\n    let mut\
    \ n3 = 1;\n    let mut n4 = 1;\n    for _ in 3..n {\n        n4 = n1 + n2 + n3;\n\
    \        n1 = n2;\n        n2 = n3;\n        n3 = n4;\n    }\n    n4\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp407o98lg.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpqwsl2f9c.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut i = 3;\n    while i <= n {\n\
    \        let d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \        i += 1;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpp8tcz7w6.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpj1a0phvv.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    if n < 2 {\n        return 0;\n    }\n\
    \    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n    let mut b\
    \ = 0;\n    let mut c = 1;\n    for _ in 3..n+1 {\n        let d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    c\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpvpb0w0og.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpnbwwcyvj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    if n == 0 {\n        return 0;\n    }\n\
    \    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n\
    \    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _\
    \ in 3..n+1 {\n        let d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n \
    \   assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        0\n\
    \    } else if n == 2 {\n        1\n    } else {\n        fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n\
    \ == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _ in 3..n+1\
    \ {\n        let d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpzzac77up.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpfmqugyr6.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmplcttajsq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
