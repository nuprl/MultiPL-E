name: HumanEval_9_rolling_max
language: rs
results:
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmplyqdv1bh.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp7g3pr8cn.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmphiw0krxq.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_so_far =\
    \ numbers[0];\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplinkzafz.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, numbers[i]);\n   |          \
    \            ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpaxm4lkhq.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpmbb619d_.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpeps_3vds.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for &number in numbers.iter().skip(1)\
    \ {\n        max = max.max(number);\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmph7yyyqaf.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpyhbkbt2s.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = max(max_so_far, *number);\n        result.push(max_so_far);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpjgo4l1bl.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, *number);\n  |                \
    \      ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp7yg8fo4l.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut current_max = numbers[0];\n    result.push(current_max);\n    for\
    \ number in numbers.iter().skip(1) {\n        if *number > current_max {\n   \
    \         current_max = *number;\n        }\n        result.push(current_max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpto9dt2rs.rs:7:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for n in numbers {\n        max = max.max(n);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for n in numbers {\n        max = std::cmp::max(max, n);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp0vgi23fj.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpafqv5906.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpsqtly3vo.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = max(max_so_far, *number);\n        result.push(max_so_far);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpwcct5sg2.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, *number);\n  |                \
    \      ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp6qykwqbx.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp1fa72lod.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpgmww7pxw.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for number in numbers.iter().skip(1)\
    \ {\n        max = max.max(*number);\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp7t4rgflq.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpro31dx7p.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        if\
    \ *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpv5fvsxrd.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp2e78r6tt.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max = isize::min_value();\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpbj4fadyl.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpwedtp1fi.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for n in numbers {\n        max = max.max(n);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = isize::min_value();\n    for number in numbers {\n        max\
    \ = max.max(number);\n        result.push(max);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp49e96_tx.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpae4w8037.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for &number in numbers.iter().skip(1)\
    \ {\n        max = max.max(number);\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpimsh20kk.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmppc1svncm.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        if\
    \ *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp8wb8zsa2.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for number in numbers.iter().skip(1)\
    \ {\n        max_so_far = max(max_so_far, *number);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpkvyn44c0.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, *number);\n   |             \
    \         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max = numbers[0];\n\
    \    max_numbers.push(max);\n    for number in numbers.iter().skip(1) {\n    \
    \    if *number > max {\n            max = *number;\n        }\n        max_numbers.push(max);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp77wik5eh.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = std::cmp::max(max_so_far, *number);\n        result.push(max_so_far);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpv5i1civn.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpmy7fb_mr.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmphr0z210g.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp15_w7xi6.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, numbers[i]);\n   |          \
    \            ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp9lzv2yjz.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for n in numbers.iter().skip(1)\
    \ {\n        if n > &max {\n            max = *n;\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpvad_mhdp.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpphtoax7v.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_until_now\
    \ = vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        max_until_now.push(max_so_far);\n    }\n    max_until_now\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpu98j866z.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for n in numbers.iter().skip(1) {\n        max_so_far\
    \ = max_so_far.max(*n);\n        result.push(max_so_far);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpu4bsfk5l.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp8j4osbh7.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        if\
    \ *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp60jtoiur.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpqpxtfgfw.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpml7xpiwg.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp5k6elj19.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        max\
    \ = std::cmp::max(max, *number);\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpfq228db4.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for n in numbers {\n        max = max.max(n);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::with_capacity(numbers.len());\n\
    \    let mut max_number = numbers[0];\n    max_numbers.push(max_number);\n   \
    \ for number in numbers.iter().skip(1) {\n        max_number = max(max_number,\
    \ *number);\n        max_numbers.push(max_number);\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphh2qom5v.rs:10:22\n\
    \   |\n10 |         max_number = max(max_number, *number);\n   |             \
    \         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_elements = Vec::new();\n    let mut max_element\
    \ = isize::min_value();\n    for number in numbers {\n        max_element = max(max_element,\
    \ number);\n        max_elements.push(max_element);\n    }\n    max_elements\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpuqbxap3g.rs:9:23\n\
    \  |\n9 |         max_element = max(max_element, number);\n  |               \
    \        ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmptuiajiby.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpr4i7swu3.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpo0q_yjrj.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut rolling_max\
    \ = Vec::new();\n    rolling_max.push(max_so_far);\n    for i in 1..numbers.len()\
    \ {\n        max_so_far = max(max_so_far, numbers[i]);\n        rolling_max.push(max_so_far);\n\
    \    }\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpap2lz3cv.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, numbers[i]);\n   |          \
    \            ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpyx3xgflf.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpfnbvdxau.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpgp2c1196.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp5m8kz8c3.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = std::cmp::max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpmhy56fay.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmprymu2bsx.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpo0ed_w0k.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = std::cmp::max(max, numbers[i]);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp9tc66pue.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpbxfz4uoa.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp_br83ywp.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpun80n7de.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpa05yglb5.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut current_max = numbers[0];\n    result.push(current_max);\n    for\
    \ number in numbers.iter().skip(1) {\n        if *number > current_max {\n   \
    \         current_max = *number;\n        }\n        result.push(current_max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp6mtc45v6.rs:7:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpeephq7m5.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp6qwkht9v.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpzhsz9van.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpbp3n09ap.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_so_far {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpgb_kgczz.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = std::isize::MIN;\n    for number in numbers {\n        max =\
    \ std::cmp::max(max, number);\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpu9q_xdo6.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = std::cmp::max(max, numbers[i]);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp1_4grvb3.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmphv24w8n4.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for n in numbers.iter().skip(1)\
    \ {\n        if *n > max {\n            max = *n;\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpklqkwx2b.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpcutp0uvy.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpet1c9zxm.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = std::cmp::max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpgb010jgz.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp39fol7c1.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = max(max_so_far, *number);\n        result.push(max_so_far);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp8pl6jpar.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, *number);\n  |                \
    \      ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    max_numbers.push(max_number);\n    for number in numbers.iter().skip(1)\
    \ {\n        max_number = max(max_number, *number);\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3xv7oxu7.rs:10:22\n\
    \   |\n10 |         max_number = max(max_number, *number);\n   |             \
    \         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        if\
    \ *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpypbofrms.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpi4faq_y5.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmplpdu12wh.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp55wb4mpu.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = std::cmp::max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpyyxgnlnx.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = std::cmp::max(max, numbers[i]);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmppfve2pre.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpbyprrxdf.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpt_1gvt9w.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpvgbufk1c.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmper6c7iqw.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp84g7_n49.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpc96sh5w5.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, numbers[i]);\n   |          \
    \            ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = std::cmp::max(max, numbers[i]);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpk0uce5l4.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzpw5te_a.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, numbers[i]);\n   |          \
    \            ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmphgwngupu.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for &number in numbers.iter().skip(1)\
    \ {\n        max = max.max(number);\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpkdeax6zn.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpqgn80fbl.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpc0dclnhs.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, numbers[i]);\n   |          \
    \            ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for number in numbers.iter().skip(1)\
    \ {\n        max_so_far = max(max_so_far, *number);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpd_9276w7.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, *number);\n   |             \
    \         ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpz22_n72m.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for number in numbers.iter().skip(1)\
    \ {\n        max = std::cmp::max(max, *number);\n        result.push(max);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpof78tg5g.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for number in numbers.iter().skip(1)\
    \ {\n        max = max.max(*number);\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpc9n5915o.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp_8i_f8i8.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp_cfg0kk7.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpsv_6hpmd.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmppv9fxc3k.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpmzu403sf.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        max\
    \ = max.max(*number);\n        result.push(max);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp3fjv77au.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpmrw87dfd.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpdrtjbnio.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        if\
    \ *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpqkqrkjwh.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpm32obclv.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut rolling_max\
    \ = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        max_so_far =\
    \ std::cmp::max(max_so_far, numbers[i]);\n        rolling_max.push(max_so_far);\n\
    \    }\n\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp3mib825j.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for &number in numbers.iter().skip(1)\
    \ {\n        if number > max {\n            max = number;\n        }\n       \
    \ result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpgkr3smuw.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = max_so_far.max(*number);\n        result.push(max_so_far);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmplo1gsbca.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmph534z27e.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpxay1yv69.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for number in numbers.iter().skip(1)\
    \ {\n        if *number > max {\n            max = *number;\n        }\n     \
    \   result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpl0wl4ll6.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp9znyi9h8.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for n in numbers {\n        max = max.max(n);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpjgqj54h4.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = std::cmp::max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp7ydzah5y.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp94f8gsky.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for n in numbers.iter().skip(1)\
    \ {\n        max_so_far = max_so_far.max(*n);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp9brpjtax.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmplk_7eqja.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpq9nodrxj.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp2h9hvnmg.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, numbers[i]);\n   |          \
    \            ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpy8599a60.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut current_max = numbers[0];\n    result.push(current_max);\n    for\
    \ number in numbers.iter().skip(1) {\n        current_max = std::cmp::max(current_max,\
    \ *number);\n        result.push(current_max);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpocwy5txb.rs:7:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp33hrtyzd.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpm6_5rb3s.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for n in numbers.iter().skip(1)\
    \ {\n        if *n > max {\n            max = *n;\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpg0f597i7.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpawhpuvrd.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_max =\
    \ numbers[0];\n    result.push(current_max);\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > current_max {\n            current_max = numbers[i];\n\
    \        }\n        result.push(current_max);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp1tples_8.rs:7:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp8btv018j.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp6ot5947z.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpaw9yzfty.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpjurezuhn.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpnxi514he.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmptl3w0z_j.rs:10:22\n\
    \   |\n10 |         max_so_far = max(max_so_far, numbers[i]);\n   |          \
    \            ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_max =\
    \ numbers[0];\n    result.push(current_max);\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > current_max {\n            current_max = numbers[i];\n\
    \        }\n        result.push(current_max);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp2bowj25b.rs:7:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp09l31qm1.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpq7n4qmgq.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp8vdltv5o.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_max =\
    \ numbers[0];\n    result.push(current_max);\n    for i in 1..numbers.len() {\n\
    \        current_max = std::cmp::max(current_max, numbers[i]);\n        result.push(current_max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmprbakeyfn.rs:7:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpasl2vu69.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpm65k02lk.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpnurg0cvn.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for &number in numbers.iter().skip(1) {\n        max\
    \ = max.max(number);\n        result.push(max);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpdedl_ebg.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpc58wcvuo.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmptbe4xh4g.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max = std::isize::MIN;\n\
    \    for n in numbers {\n        max = std::cmp::max(max, n);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp332wbg8h.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        if\
    \ *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpb485h0tm.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpz10unly0.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpaxskynv4.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, numbers[i]);\n  |             \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = max(max_so_far, *number);\n        result.push(max_so_far);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpntxr29zw.rs:9:22\n\
    \  |\n9 |         max_so_far = max(max_so_far, *number);\n  |                \
    \      ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for &number in numbers.iter().skip(1)\
    \ {\n        max = max.max(number);\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmphn3_yo3_.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpbo0u_j0x.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for number in numbers.iter().skip(1)\
    \ {\n        max = std::cmp::max(max, *number);\n        result.push(max);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpk79wtd53.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for n in numbers {\n        max = std::cmp::max(max, n);\n        result.push(max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        max\
    \ = std::cmp::max(max, *number);\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp6qu_vjtn.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
