name: HumanEval_66_digitSum
language: rs
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(String::from(\"\
  \"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"))\n/// 131\n/// >>> digitSum(String::from(\"\
  abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"\
  woArBld\"))\n/// 131\n/// >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
  abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
  woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
  \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
  You arE Very Smart\")), 327);\n}\n"
completions: ["    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().fold(0,
    |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().fold(0, |acc, c| acc + c as isize)', "    s.chars().fold(0,\
    \ |acc, c| {\n        if c.is_uppercase() {\n            acc + c as isize\n  \
    \      } else {\n            acc\n        }\n    })", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().fold(0, |acc, c| acc + c as isize)',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum += c as\
    \ isize;\n        }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().fold(0, |acc, c|
    acc + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n    }\n\
    \    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_ascii_uppercase() {\n            sum += c as isize;\n       \
    \ }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n      \
    \  if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n \
    \   sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    s.chars().fold(0, |acc, c|\
    \ {\n        if c.is_uppercase() {\n            acc + c as isize\n        } else\
    \ {\n            acc\n        }\n    })", "    s.chars().fold(0, |acc, c| {\n\
    \        if c.is_ascii_uppercase() {\n            acc + c as isize\n        }\
    \ else {\n            acc\n        }\n    })", "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().fold(0, |acc, c| acc + c as isize)', '    s.chars().fold(0,
    |acc, c| acc + c as isize)', "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum", "    s.chars().fold(0, |acc,\
    \ c| {\n        if c.is_uppercase() {\n            acc + c as isize\n        }\
    \ else {\n            acc\n        }\n    })", "    s.chars().fold(0, |acc, c|\
    \ {\n        if c.is_uppercase() {\n            acc + c as isize\n        } else\
    \ {\n            acc\n        }\n    })", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().fold(0, |acc, c| acc + c as isize)', "    s.chars().fold(0,\
    \ |acc, c| {\n        if c.is_ascii_uppercase() {\n            acc + c as isize\n\
    \        } else {\n            acc\n        }\n    })", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    s.chars().fold(0, |acc, c|\
    \ {\n        if c.is_ascii_uppercase() {\n            acc + c as isize\n     \
    \   } else {\n            acc\n        }\n    })", "    let mut sum = 0;\n   \
    \ for c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum +=\
    \ c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().fold(0,
    |acc, x| acc + x as isize)', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().fold(0, |acc, c| acc + (c as isize))', "  \
    \  let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().fold(0,
    |acc, c| acc + c as isize)', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum",
  "    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n            acc\
    \ + c as isize\n        } else {\n            acc\n        }\n    })", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().fold(0, |acc, c| acc + c as isize)',
  "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase() {\n       \
    \     acc + c as isize\n        } else {\n            acc\n        }\n    })",
  '    s.chars().fold(0, |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().fold(0, |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    s.chars().fold(0,\
    \ |acc, c| {\n        if c.is_uppercase() {\n            acc + c as isize\n  \
    \      } else {\n            acc\n        }\n    })", "    s.chars().fold(0, |acc,\
    \ c| {\n        if c.is_uppercase() {\n            acc + c as isize\n        }\
    \ else {\n            acc\n        }\n    })", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n    }\n\
    \    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    s.chars().fold(0, |acc, c| {\n        let c = c as u8;\n\
    \        if c >= 65 && c <= 90 {\n            acc + c as isize\n        } else\
    \ {\n            acc\n        }\n    })", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().fold(0, |acc, c| acc + c as isize)', '    s.chars().fold(0,
    |acc, c| acc + if c.is_uppercase() { c as isize } else { 0 })', "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n      \
    \      sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().fold(0, |acc, c| acc + c as isize)',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|&c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().fold(0, |acc, c| acc + c as isize)', "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n \
    \   for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c\
    \ as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            sum += c as isize;\n        }\n\
    \    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum",
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n    \
    \        sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n  \
    \          sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().fold(0, |acc, c|
    acc + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    s.chars().fold(0,\
    \ |acc, c| {\n        if c.is_uppercase() {\n            acc + c as isize\n  \
    \      } else {\n            acc\n        }\n    })", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    s.chars().fold(0, |acc, c|\
    \ {\n        if c.is_ascii_uppercase() {\n            acc + c as isize\n     \
    \   } else {\n            acc\n        }\n    })", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().fold(0,
    |acc, c| acc + c as isize)', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().fold(0, |acc, c| acc + c as isize)', '    s.chars().fold(0,
    |acc, c| acc + c as isize)', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().fold(0, |acc, c| acc + c as isize)', "    s.chars().fold(0,\
    \ |acc, c| {\n        if c.is_ascii_uppercase() {\n            acc + c as isize\n\
    \        } else {\n            acc\n        }\n    })", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().fold(0,
    |acc, c| acc + c as isize)', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n    }\n\
    \    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().fold(0,
    |sum, c| sum + (c as isize))', "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })", "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|
    c as isize).sum()', "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n    \
    \        sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().fold(0, |acc, c|
    acc + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum",
  "    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n            acc\
    \ + c as isize\n        } else {\n            acc\n        }\n    })", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().fold(0, |acc, c| acc + c as isize)', "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n    \
    \        sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase() {\n       \
    \     acc + c as isize\n        } else {\n            acc\n        }\n    })",
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n    \
    \        sum += c as isize;\n        }\n    }\n    sum", "    s.chars().fold(0,\
    \ |acc, x| {\n        if x.is_uppercase() {\n            acc + x as isize\n  \
    \      } else {\n            acc\n        }\n    })", "    s.chars().fold(0, |acc,\
    \ c| acc + match c {\n        'A'...'Z' => c as isize,\n        _ => 0,\n    })",
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_ascii_uppercase() {\n            sum += c as isize;\n       \
    \ }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as
    isize).sum()', "    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })", "    s.chars().fold(0, |acc, c| {\n        acc + if c.is_uppercase()\
    \ {\n            c as isize\n        } else {\n            0\n        }\n    })",
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum += c as\
    \ isize;\n        }\n    }\n    sum", "    s.chars().fold(0, |acc, c| {\n    \
    \    if c.is_uppercase() {\n            acc + c as isize\n        } else {\n \
    \           acc\n        }\n    })", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            sum += c as isize;\n        }\n\
    \    }\n    sum", '    s.chars().fold(0, |acc, x| acc + x as isize)', '    s.chars().fold(0,
    |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().fold(0, |acc, c| acc + c as isize)', '    s.chars().fold(0,
    |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().fold(0, |acc, c| acc + c as isize)',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", "    s.chars().fold(0,\
    \ |acc, c| {\n        if c.is_uppercase() {\n            acc + c as isize\n  \
    \      } else {\n            acc\n        }\n    })", "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().fold(0, |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum"]
stop_tokens:
- "\n}"
