name: HumanEval_141_file_name_check
language: rs
prompt: "/// Create a function which takes a string representing a file's name, and\
  \ returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(String::from(\"\
  example.txt\"))\n/// String::from(\"Yes\")\n/// >>> file_name_check(String::from(\"\
  1example.dll\"))\n/// String::from(\"No\")\nfn file_name_check(file_name: String)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!(candidate(String::from(\"\
  example.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"\
  1example.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"\
  s1sdf3.asd\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"\
  K.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"MY16FILE3.exe\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"His12FILE94.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_Y.txt\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"?aREYA.exe\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"/this_is_valid.dll\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.wow\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txt\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txtexe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"#this2_i4s_5valid.ten\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"@this1_is6_valid.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_12valid.6exe4.txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"all.exe.txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_No.exe\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"Is3youfault.txt\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"no_one#knows.dll\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1I563_Yes3.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_Yes3.txtt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final..txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final132\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_f4indsartal132.\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\".txt\")), String::from(\"\
  No\"));\n    assert_eq!(candidate(String::from(\"s.\")), String::from(\"No\"));\n\
  }\n"
completions: ["    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    let mut parts = file_name.split('.');\n\
    \    let first_part = parts.next().unwrap();\n    let second_part = parts.next().unwrap();\n\
    \    if first_part.is_empty() || !first_part.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        is_valid = false;\n    }\n \
    \   if is_valid {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    // TODO: Implement the function here\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid = false;\n\
    \    let mut is_before_dot_empty = true;\n    for c in file_name.chars() {\n \
    \       if c.is_digit(10) {\n            digits_count += 1;\n        }\n     \
    \   if c == '.' {\n            dot_count += 1;\n            is_after_dot = true;\n\
    \            is_before_dot_empty = false;\n        }\n        if is_after_dot\
    \ {\n            if c == 't' {\n                is_after_dot_valid = true;\n \
    \           }\n            if c == 'x' && is_after_dot_valid {\n             \
    \   is_after_dot_valid = true;\n            }\n            if c == 'e' && is_after_dot_valid\
    \ {\n                is_after_dot_valid = true;\n            }\n            if\
    \ c == 'd' && is_after_dot_valid {\n                is_after_dot_valid = true;\n\
    \            }\n            if c == 'l' && is_after_dot_valid {\n            \
    \    is_after_dot_valid = true;\n            }\n            if c == 'l' && is_after_dot_valid\
    \ {\n                is_after_dot_valid = true;\n            }\n        }\n  \
    \      if is_first_letter {\n            if c.is_alphabetic() {\n            \
    \    is_before_dot_valid = true;\n                is_first_letter = false;\n \
    \           }\n        }\n    }\n    if digits_count > 3 {\n        is_valid =\
    \ false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n \
    \   if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if !is_after_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if is_before", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut is_substring_before_dot_empty = true;\n    let mut is_substring_after_dot_empty\
    \ = true;\n    let mut is_substring_before_dot_started = false;\n    let mut is_substring_after_dot_started\
    \ = false;\n    let mut is_substring_before_dot_started_with_letter = false;\n\
    \    let mut is_substring_after_dot_started_with_letter = false;\n    let mut\
    \ substring_before_dot = String::new();\n    let mut substring_after_dot = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_substring_before_dot_started = false;\n            is_substring_after_dot_started\
    \ = true;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \            if is_substring_before_dot_started {\n                substring_before_dot.push(c);\n\
    \            } else if is_substring_after_dot_started {\n                substring_after_dot.push(c);\n\
    \            }\n        } else if c.is_alphabetic() {\n            if is_substring_before_dot_started\
    \ {\n                substring_before_dot.push(c);\n            } else if is_substring_after_dot_started\
    \ {\n                substring_after_dot.push(c);\n            } else {\n    \
    \            is_substring_before_dot_started = true;\n                is_substring_before_dot_started_with_letter\
    \ = true;\n                substring_before_dot.push(c);\n            }\n    \
    \    } else {\n            is_valid = false;\n            break;\n        }\n\
    \    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    let mut extension_start = 0;\n\
    \    let mut extension_end = 0;\n    let mut prefix_start = 0;\n    let mut prefix_end\
    \ = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_start = i + 1;\n        }\n    \
    \    if c == '.' && dot_count == 1 {\n            prefix_end = i;\n        }\n\
    \        if c.is_alphabetic() && dot_count == 0 {\n            prefix_start =\
    \ i;\n        }\n        if i == file_name.len() - 1 {\n            extension_end\
    \ = i + 1;\n        }\n    }\n    if digits_count > 3 {\n        return String::from(\"\
    No\");\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n\
    \    }\n    if prefix_start == prefix_end {\n        return String::from(\"No\"\
    );\n    }\n    if extension_start == extension_end {\n        return String::from(\"\
    No\");\n    }\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    let prefix = &file_name[prefix_start..prefix_end];\n\
    \    if prefix.chars().next().unwrap().is_alphabetic() {\n        valid_prefix\
    \ = true;\n    }\n    if valid_extension && valid_prefix {\n        return String::from(\"\
    Yes\");\n    }\n    String::from(\"No\")", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut extension_count = 0;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut extension_valid = false;\n\
    \    let mut extension_valid_count = 0;\n    let mut extension_valid_start = 0;\n\
    \    let mut extension_valid_end = 0;\n    let mut extension_valid_str = String::new();\n\
    \    let mut extension_valid_str_len = 0;\n    let mut extension_valid_str_start\
    \ = 0;\n    let mut extension_valid_str_end = 0;\n    let mut extension_valid_str_valid\
    \ = false;\n    let mut extension_valid_str_valid_count = 0;\n    let mut extension_valid_str_valid_start\
    \ = 0;\n    let mut extension_valid_str_valid_end = 0;\n    let mut extension_valid_str_valid_str\
    \ = String::new();\n    let mut extension_valid_str_valid_str_len = 0;\n    let\
    \ mut extension_valid_str_valid_str_start = 0;\n    let mut extension_valid_str_valid_str_end\
    \ = 0;\n    let mut extension_valid_str_valid_str_valid = false;\n    let mut\
    \ extension_valid_str_valid_str_valid_count = 0;\n    let mut extension_valid_str_valid_str_valid_start\
    \ = 0;\n    let mut extension_valid_str_valid_str_valid_end = 0;\n    let mut\
    \ extension_valid_str_valid_str_valid_str = String::new();\n    let mut extension_valid_str_valid_str_valid_str_len\
    \ = 0;\n    let mut extension_valid_str_valid_str_valid_str_start = 0;\n    let\
    \ mut extension_valid_str_valid_str_valid_str_end = 0;\n    let mut extension_valid_str_valid_str_valid_str_valid\
    \ = false;\n    let mut extension_valid_str_valid_str_valid_str_valid_count =\
    \ 0;\n    let mut extension_valid_str_valid_str_", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let\
    \ mut valid_name = false;\n    let mut extension = String::new();\n    let mut\
    \ name = String::new();\n    for c in file_name.chars() {\n        if c == '.'\
    \ {\n            dot_count += 1;\n            continue;\n        }\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n        }\n        if dot_count\
    \ == 0 {\n            name.push(c);\n        } else {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\"\
    );\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n   \
    \ }\n    if name.len() == 0 {\n        return String::from(\"No\");\n    }\n \
    \   if !name.chars().next().unwrap().is_alphabetic() {\n        return String::from(\"\
    No\");\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        valid_extension = true;\n    }\n    if valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n\
    \    let mut is_extension = false;\n    let mut extension = String::new();\n \
    \   let mut file_name = file_name.chars();\n    while let Some(c) = file_name.next()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            is_empty = false;\n            is_letter = true;\n        } else\
    \ {\n            is_valid = false;\n            break;\n        }\n        if\
    \ digits_count > 3 {\n            is_valid = false;\n            break;\n    \
    \    }\n        if dot_count > 1 {\n            is_valid = false;\n          \
    \  break;\n        }\n        if is_empty && dot_count == 1 {\n            is_valid\
    \ = false;\n            break;\n        }\n        if !is_letter && dot_count\
    \ == 1 {\n            is_valid = false;\n            break;\n        }\n     \
    \   if is_letter && dot_count == 1 {\n            while let Some(c) = file_name.next()\
    \ {\n                extension.push(c);\n            }\n            if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n             \
    \   is_extension = true;\n            }\n        }\n    }\n    if is_valid &&\
    \ is_extension {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_before_dot_started = false;\n    let mut is_after_dot_started\
    \ = false;\n    let mut is_before_dot_empty = true;\n    let mut is_after_dot_empty\
    \ = true;\n    let mut is_before_dot_letter = false;\n    let mut is_after_dot_letter\
    \ = false;\n    let mut is_before_dot_digit = false;\n    let mut is_after_dot_digit\
    \ = false;\n    let mut is_before_dot_dot = false;\n    let mut is_after_dot_dot\
    \ = false;\n    let mut is_before_dot_underscore = false;\n    let mut is_after_dot_underscore\
    \ = false;\n    let mut is_before_dot_dash = false;\n    let mut is_after_dot_dash\
    \ = false;\n    let mut is_before_dot_space = false;\n    let mut is_after_dot_space\
    \ = false;\n    let mut is_before_dot_other = false;\n    let mut is_after_dot_other\
    \ = false;\n    let mut is_before_dot_other_char = ' ';\n    let mut is_after_dot_other_char\
    \ = ' ';\n    let mut is_before_dot_other_count = 0;\n    let mut is_after_dot_other_count\
    \ = 0;\n    let mut is_before_dot_other_count_max = 0;\n    let mut is_after_dot_other_count_max\
    \ = 0;\n    let mut is_before_dot_other_count_min = 0;\n    let mut is_after_dot_other_count_min\
    \ = 0;\n    let mut is_before_dot_other_count_max_char = ' ';\n    let mut is_after_dot_other_count_max_char",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n   \
    \         digits_count += 1;\n        } else if c == '.' {\n            dot_count\
    \ += 1;\n        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n     \
    \   is_valid = false;\n    }\n    let mut dot_index = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_index = i;\n            break;\n \
    \       }\n    }\n    let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \    if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if after_dot != \".txt\" && after_dot\
    \ != \".exe\" && after_dot != \".dll\" {\n        is_valid = false;\n    }\n \
    \   if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut extension = String::new();\n    let mut name = String::new();\n    for (index,\
    \ ch) in file_name.chars().enumerate() {\n        if ch.is_digit(10) {\n     \
    \       digits_count += 1;\n        }\n        if ch == '.' {\n            dot_count\
    \ += 1;\n            extension = file_name[index+1..].to_string();\n         \
    \   name = file_name[..index].to_string();\n        }\n    }\n    if digits_count\
    \ <= 3 && dot_count == 1 {\n        if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n            valid_extension = true;\n       \
    \ }\n        if name.chars().next().unwrap().is_alphabetic() {\n            valid_name\
    \ = true;\n        }\n    }\n    if valid_extension && valid_name {\n        return\
    \ String::from(\"Yes\");\n    }\n    String::from(\"No\")", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    } else {\n        let\
    \ (before_dot, after_dot) = file_name.split_at(dot_index);\n        if before_dot.is_empty()\
    \ || !before_dot.chars().next().unwrap().is_alphabetic() {\n            is_valid\
    \ = false;\n        } else if after_dot != \".txt\" && after_dot != \".exe\" &&\
    \ after_dot != \".dll\" {\n            is_valid = false;\n        }\n    }\n \
    \   if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_valid_extension = false;\n    let\
    \ mut is_valid_prefix = false;\n    let mut is_valid_digits = true;\n    let mut\
    \ is_valid_dot = true;\n    let mut is_valid_extension_length = true;\n    let\
    \ mut is_valid_prefix_length = true;\n    let mut extension_length = 0;\n    let\
    \ mut prefix_length = 0;\n    let mut extension = String::new();\n    let mut\
    \ prefix = String::new();\n    let mut extension_char_count = 0;\n    let mut\
    \ prefix_char_count = 0;\n    let mut extension_char_count_valid = true;\n   \
    \ let mut prefix_char_count_valid = true;\n    let mut extension_char_count_valid_2\
    \ = true;\n    let mut prefix_char_count_valid_2 = true;\n    let mut is_valid_extension_char_count\
    \ = true;\n    let mut is_valid_prefix_char_count = true;\n    let mut is_valid_extension_char_count_2\
    \ = true;\n    let mut is_valid_prefix_char_count_2 = true;\n    let mut is_valid_extension_char_count_3\
    \ = true;\n    let mut is_valid_prefix_char_count_3 = true;\n    let mut is_valid_extension_char_count_4\
    \ = true;\n    let mut is_valid_prefix_char_count_4 = true;\n    let mut is_valid_extension_char_count_5\
    \ = true;\n    let mut is_valid_prefix_char_count_5 = true;\n    let mut is_valid_extension_char_count_6\
    \ = true;\n    let mut is_valid_prefix_char_count_6 = true;\n    let mut is_valid_extension_char_count_7\
    \ = true;\n    let mut is_valid_prefix_char_count_7 = true;\n    let mut is_valid_extension_char_count_8\
    \ = true;\n    let mut is", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut has_letter = false;\n    let mut has_dot = false;\n    let\
    \ mut has_extension = false;\n    let mut extension = String::new();\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n         \
    \   has_dot = true;\n        } else if c.is_alphabetic() {\n            has_letter\
    \ = true;\n        }\n        if has_dot {\n            extension.push(c);\n \
    \       }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\"\
    );\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n   \
    \ }\n    if !has_letter {\n        return String::from(\"No\");\n    }\n    if\
    \ extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n   \
    \     has_extension = true;\n    }\n    if has_extension {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let\
    \ mut valid_prefix = false;\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n            if i == 0 {\n         \
    \       return String::from(\"No\");\n            }\n            let prefix =\
    \ &file_name[..i];\n            if prefix.len() == 0 {\n                return\
    \ String::from(\"No\");\n            }\n            if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n                valid_prefix = true;\n            }\n            let extension\
    \ = &file_name[i + 1..];\n            if extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\" {\n                valid_extension = true;\n\
    \            }\n        }\n    }\n    if digits_count > 3 || dot_count != 1 ||\
    \ !valid_extension || !valid_prefix {\n        return String::from(\"No\");\n\
    \    }\n    String::from(\"Yes\")", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter =\
    \ true;\n    let mut is_first_dot = true;\n    let mut is_first_letter_after_dot\
    \ = true;\n    let mut is_first_letter_after_dot_valid = false;\n    let mut is_second_letter_after_dot_valid\
    \ = false;\n    let mut is_third_letter_after_dot_valid = false;\n    let mut\
    \ is_fourth_letter_after_dot_valid = false;\n    let mut is_fifth_letter_after_dot_valid\
    \ = false;\n    let mut is_sixth_letter_after_dot_valid = false;\n    let mut\
    \ is_seventh_letter_after_dot_valid = false;\n    let mut is_eighth_letter_after_dot_valid\
    \ = false;\n    let mut is_ninth_letter_after_dot_valid = false;\n    let mut\
    \ is_tenth_letter_after_dot_valid = false;\n    let mut is_eleventh_letter_after_dot_valid\
    \ = false;\n    let mut is_twelfth_letter_after_dot_valid = false;\n    let mut\
    \ is_thirteenth_letter_after_dot_valid = false;\n    let mut is_fourteenth_letter_after_dot_valid\
    \ = false;\n    let mut is_fifteenth_letter_after_dot_valid = false;\n    let\
    \ mut is_sixteenth_letter_after_dot_valid = false;\n    let mut is_seventeenth_letter_after_dot_valid\
    \ = false;\n    let mut is_eighteenth_letter_after_dot_valid = false;\n    let\
    \ mut is_nineteenth_letter_after_dot_valid = false;\n    let mut is_twentieth_letter_after_dot_valid\
    \ = false;\n    let mut is_twenty_first_letter_after_dot_valid = false;\n    let\
    \ mut is_twenty_second_letter_after_dot_valid = false;\n    let mut is_twenty_third_letter_after_dot_valid\
    \ = false;\n", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_substring_before_dot_valid = false;\n\
    \    let mut is_substring_after_dot_valid = false;\n    let mut substring_after_dot\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n        if c.is_alphabetic() {\n          \
    \  is_substring_before_dot_valid = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !is_substring_before_dot_valid {\n        is_valid\
    \ = false;\n    } else {\n        let mut is_substring_after_dot_valid = false;\n\
    \        let mut substring_after_dot = String::new();\n        for c in file_name.chars().rev()\
    \ {\n            if c == '.' {\n                break;\n            }\n      \
    \      substring_after_dot.push(c);\n        }\n        substring_after_dot =\
    \ substring_after_dot.chars().rev().collect();\n        if substring_after_dot\
    \ == \"txt\" || substring_after_dot == \"exe\" || substring_after_dot == \"dll\"\
    \ {\n            is_substring_after_dot_valid = true;\n        }\n        if !is_substring_after_dot_valid\
    \ {\n            is_valid = false;\n        }\n    }\n    if is_valid {\n    \
    \    return String::from(\"Yes\");\n    } else {\n        return String::from(\"\
    No\");\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut dot_index = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    } else {\n        let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \        if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        } else if after_dot != \".txt\" &&\
    \ after_dot != \".exe\" && after_dot != \".dll\" {\n            is_valid = false;\n\
    \        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extension = false;\n\
    \    let mut valid_prefix = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n  \
    \      }\n    }\n    if digits > 3 {\n        return String::from(\"No\");\n \
    \   }\n    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n\
    \    if dot_index == 0 {\n        return String::from(\"No\");\n    }\n    let\
    \ prefix = &file_name[..dot_index];\n    let extension = &file_name[dot_index\
    \ + 1..];\n    if prefix.len() == 0 {\n        return String::from(\"No\");\n\
    \    }\n    for c in prefix.chars() {\n        if c.is_alphabetic() {\n      \
    \      valid_prefix = true;\n            break;\n        }\n    }\n    if !valid_prefix\
    \ {\n        return String::from(\"No\");\n    }\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        valid_extension =\
    \ true;\n    }\n    if valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut extension_count = 0;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut extension_str = String::new();\n\
    \    let mut extension_str_len = 0;\n    let mut extension_str_is_valid = false;\n\
    \    let mut extension_str_is_empty = true;\n    let mut extension_str_is_valid_len\
    \ = false;\n    let mut extension_str_is_valid_chars = false;\n    let mut extension_str_is_valid_extension\
    \ = false;\n    let mut extension_str_is_valid_extension_txt = false;\n    let\
    \ mut extension_str_is_valid_extension_exe = false;\n    let mut extension_str_is_valid_extension_dll\
    \ = false;\n    let mut extension_str_is_valid_extension_txt_len = false;\n  \
    \  let mut extension_str_is_valid_extension_exe_len = false;\n    let mut extension_str_is_valid_extension_dll_len\
    \ = false;\n    let mut extension_str_is_valid_extension_txt_chars = false;\n\
    \    let mut extension_str_is_valid_extension_exe_chars = false;\n    let mut\
    \ extension_str_is_valid_extension_dll_chars = false;\n    let mut extension_str_is_valid_extension_txt_chars_t\
    \ = false;\n    let mut extension_str_is_valid_extension_txt_chars_x = false;\n\
    \    let mut extension_str_is_valid_extension_exe_chars_e = false;\n    let mut\
    \ extension_str_is_valid_extension_exe_chars_x = false;\n    let mut extension_str_is_valid_extension_dll_chars_d\
    \ = false;\n    let mut extension_str_is_valid_extension_dll_chars_l = false;\n\
    \    let mut extension_str_is_valid_extension_dll_chars_l2 = false;\n    let mut\
    \ extension", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n   \
    \ let mut valid_extension = false;\n    let mut valid_prefix = false;\n    let\
    \ mut prefix = String::new();\n    let mut extension = String::new();\n    for\
    \ (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n   \
    \         digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            prefix = file_name[..i].to_string();\n            extension\
    \ = file_name[i+1..].to_string();\n        }\n    }\n    if !prefix.is_empty()\
    \ && prefix.chars().next().unwrap().is_alphabetic() {\n        valid_prefix =\
    \ true;\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        valid_extension = true;\n    }\n    if digits_count <=\
    \ 3 && dot_count == 1 && valid_extension && valid_prefix {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_after_dot_valid =\
    \ false;\n    let mut is_before_dot_valid = false;\n    let mut is_before_dot_empty\
    \ = true;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n   \
    \         digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_after_dot = true;\n            is_first_letter = true;\n\
    \            is_before_dot_empty = false;\n        }\n        if is_after_dot\
    \ {\n            if c == 't' || c == 'e' || c == 'd' {\n                is_after_dot_valid\
    \ = true;\n            }\n            if c == 'x' || c == 'l' {\n            \
    \    is_after_dot_valid = is_after_dot_valid && true;\n            }\n       \
    \ }\n        if is_first_letter {\n            if c.is_alphabetic() {\n      \
    \          is_before_dot_valid = true;\n                is_first_letter = false;\n\
    \            }\n        }\n        if digits_count > 3 {\n            is_valid\
    \ = false;\n            break;\n        }\n        if dot_count > 1 {\n      \
    \      is_valid = false;\n            break;\n        }\n    }\n    if is_before_dot_empty\
    \ {\n        is_valid = false;\n    }\n    if !is_after_dot_valid {\n        is_valid\
    \ = false;\n    }\n    if !is_before_dot_valid {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    let mut prefix = String::new();\n    let mut extension = String::new();\n\
    \    for (i, ch) in file_name.chars().enumerate() {\n        if ch == '.' {\n\
    \            dot_count += 1;\n            continue;\n        }\n        if ch.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if dot_count == 1 {\n\
    \            extension.push(ch);\n        } else {\n            prefix.push(ch);\n\
    \        }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\"\
    );\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n   \
    \ }\n    if prefix.is_empty() {\n        return String::from(\"No\");\n    }\n\
    \    if prefix.chars().next().unwrap().is_alphabetic() {\n        valid_prefix\
    \ = true;\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        valid_extension = true;\n    }\n    if valid_prefix &&\
    \ valid_extension {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut\
    \ is_valid_name = false;\n    let mut name_start = 0;\n    let mut name_end =\
    \ 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_start = i + 1;\n        }\n    \
    \    if c.is_alphabetic() {\n            name_start = i;\n        }\n    }\n \
    \   if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if name_start == 0 {\n       \
    \ is_valid = false;\n    }\n    if is_valid {\n        extension_end = file_name.len();\n\
    \        name_end = extension_start - 1;\n        let extension = &file_name[extension_start..extension_end];\n\
    \        let name = &file_name[name_start..name_end];\n        if extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_valid_extension\
    \ = true;\n        }\n        if name.len() > 0 {\n            is_valid_name =\
    \ true;\n        }\n    }\n    if is_valid && is_valid_extension && is_valid_name\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut prefix\
    \ = String::new();\n    let mut extension = String::new();\n    for (i, c) in\
    \ file_name.chars().enumerate() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       prefix = file_name[..i].to_string();\n            extension = file_name[i+1..].to_string();\n\
    \        }\n    }\n    if digits_count <= 3 {\n        if dot_count == 1 {\n \
    \           if prefix.len() > 0 {\n                if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n                    valid_prefix = true;\n                }\n           \
    \ }\n            if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n                valid_extension = true;\n            }\n     \
    \   }\n    }\n    if valid_prefix && valid_extension {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    } else {\n        let\
    \ (prefix, suffix) = file_name.split_at(dot_index);\n        if prefix.is_empty()\
    \ || !prefix.chars().next().unwrap().is_alphabetic() {\n            is_valid =\
    \ false;\n        } else if suffix != \".txt\" && suffix != \".exe\" && suffix\
    \ != \".dll\" {\n            is_valid = false;\n        }\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut extension_count\
    \ = 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n   \
    \ let mut extension = String::new();\n    let mut extension_vec = vec![\"txt\"\
    , \"exe\", \"dll\"];\n    let mut extension_vec_count = 0;\n    for (i, c) in\
    \ file_name.chars().enumerate() {\n        if c.is_digit(10) {\n            count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       extension_start = i + 1;\n        }\n        if i >= extension_start {\n\
    \            extension.push(c);\n            extension_end = i;\n        }\n \
    \   }\n    if count > 3 || dot_count != 1 || extension_start == 0 || extension_end\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    for i in extension_vec.iter()\
    \ {\n        if extension == *i {\n            extension_count += 1;\n       \
    \ }\n    }\n    if extension_count == 0 {\n        return String::from(\"No\"\
    );\n    }\n    return String::from(\"Yes\");", "    let mut count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut valid = true;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n        }\
    \ else if c.is_alphabetic() {\n            if count > 3 {\n                valid\
    \ = false;\n                break;\n            }\n            count = 0;\n  \
    \      } else {\n            valid = false;\n            break;\n        }\n \
    \       if dot_count == 1 {\n            extension.push(c);\n        }\n    }\n\
    \    if dot_count != 1 || count > 3 || !valid {\n        return String::from(\"\
    No\");\n    }\n    match extension.as_str() {\n        \"txt\" | \"exe\" | \"\
    dll\" => String::from(\"Yes\"),\n        _ => String::from(\"No\"),\n    }", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let mut is_valid_prefix = false;\n    let mut is_valid_digits = true;\n \
    \   let mut is_valid_dot = true;\n    let mut is_valid_extension_length = true;\n\
    \    let mut is_valid_prefix_length = true;\n    let mut is_valid_prefix_char\
    \ = true;\n    let mut is_valid_extension_char = true;\n    let mut is_valid_extension_char_count\
    \ = true;\n    let mut is_valid_prefix_char_count = true;\n    let mut is_valid_extension_char_count_2\
    \ = true;\n    let mut is_valid_prefix_char_count_2 = true;\n    let mut is_valid_extension_char_count_3\
    \ = true;\n    let mut is_valid_prefix_char_count_3 = true;\n    let mut is_valid_extension_char_count_4\
    \ = true;\n    let mut is_valid_prefix_char_count_4 = true;\n    let mut is_valid_extension_char_count_5\
    \ = true;\n    let mut is_valid_prefix_char_count_5 = true;\n    let mut is_valid_extension_char_count_6\
    \ = true;\n    let mut is_valid_prefix_char_count_6 = true;\n    let mut is_valid_extension_char_count_7\
    \ = true;\n    let mut is_valid_prefix_char_count_7 = true;\n    let mut is_valid_extension_char_count_8\
    \ = true;\n    let mut is_valid_prefix_char_count_8 = true;\n    let mut is_valid_extension_char_count_9\
    \ = true;\n    let mut is_valid_prefix_char_count_9 = true;\n    let mut is_valid_extension_char_count_10\
    \ = true;\n    let mut is_valid_prefix_char_count_10 =", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut is_valid_prefix = false;\n    let mut\
    \ extension = String::new();\n    let mut prefix = String::new();\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    let mut iter = file_name.split('.');\n    prefix = iter.next().unwrap().to_string();\n\
    \    extension = iter.next().unwrap().to_string();\n    if prefix.len() == 0 {\n\
    \        is_valid = false;\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n \
    \   }\n    if is_valid && is_valid_extension && is_valid_prefix {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    let (prefix, suffix) = file_name.split_at(dot_index);\n\
    \    if prefix.is_empty() || !prefix.chars().next().unwrap().is_alphabetic() {\n\
    \        is_valid = false;\n    }\n    if suffix != \".txt\" && suffix != \".exe\"\
    \ && suffix != \".dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n \
    \   }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_before_dot_empty = true;\n    let mut is_after_dot_empty\
    \ = true;\n    let mut is_before_dot_start_with_letter = false;\n    let mut is_after_dot_start_with_letter\
    \ = false;\n    let mut is_after_dot_start_with_digit = false;\n    let mut is_before_dot_start_with_digit\
    \ = false;\n    let mut is_after_dot_end_with_letter = false;\n    let mut is_before_dot_end_with_letter\
    \ = false;\n    let mut is_after_dot_end_with_digit = false;\n    let mut is_before_dot_end_with_digit\
    \ = false;\n    let mut is_after_dot_has_letter = false;\n    let mut is_before_dot_has_letter\
    \ = false;\n    let mut is_after_dot_has_digit = false;\n    let mut is_before_dot_has_digit\
    \ = false;\n    let mut is_after_dot_has_symbol = false;\n    let mut is_before_dot_has_symbol\
    \ = false;\n    let mut is_after_dot_has_space = false;\n    let mut is_before_dot_has_space\
    \ = false;\n    let mut is_after_dot_has_uppercase = false;\n    let mut is_before_dot_has_uppercase\
    \ = false;\n    let mut is_after_dot_has_lowercase = false;\n    let mut is_before_dot_has_lowercase\
    \ = false;\n    let mut is_after_dot_has_uppercase_and_lowercase = false;\n  \
    \  let mut is_before_dot_has_uppercase_and_lowercase = false;\n    let mut is_after_dot_has_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid = false;\n\
    \    let mut is_before_dot_empty = true;\n    let mut is_after_dot_empty = true;\n\
    \    let mut is_before_dot_start_with_letter = false;\n    let mut is_after_dot_start_with_letter\
    \ = false;\n    let mut is_after_dot_start_with_letter_valid = false;\n    let\
    \ mut is_before_dot_start_with_letter_valid = false;\n    let mut is_after_dot_start_with_letter_valid_count\
    \ = 0;\n    let mut is_before_dot_start_with_letter_valid_count = 0;\n    let\
    \ mut is_after_dot_start_with_letter_valid_count_valid = false;\n    let mut is_before_dot_start_with_letter_valid_count_valid\
    \ = false;\n    let mut is_after_dot_start_with_letter_valid_count_valid_count\
    \ = 0;\n    let mut is_before_dot_start_with_letter_valid_count_valid_count =\
    \ 0;\n    let mut is_after_dot_start_with_letter_valid_count_valid_count_valid\
    \ = false;\n    let mut is_before_dot_start_with_letter_valid_count_valid_count_valid\
    \ = false;\n    let mut is_after_dot_start_with_letter_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_before_dot_start_with_letter_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_after_dot_start_with_letter_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_before_dot_start_with_letter_valid_count_valid_count_valid_count_valid\
    \ = false;\n   ", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut is_valid = true;\n    let mut is_substring_before_dot_valid = false;\n\
    \    let mut is_substring_after_dot_valid = false;\n    let mut substring_after_dot\
    \ = String::new();\n    let mut substring_before_dot = String::new();\n    for\
    \ (i, c) in file_name.chars().enumerate() {\n        if c == '.' {\n         \
    \   dot_count += 1;\n            is_substring_before_dot_valid = true;\n     \
    \   } else if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c.is_alphabetic() {\n            if i == 0 {\n                is_substring_before_dot_valid\
    \ = true;\n            }\n        }\n        if dot_count == 1 {\n           \
    \ substring_after_dot.push(c);\n        } else {\n            substring_before_dot.push(c);\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !is_substring_before_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if substring_after_dot == \"txt\" ||\
    \ substring_after_dot == \"exe\" || substring_after_dot == \"dll\" {\n       \
    \ is_substring_after_dot_valid = true;\n    }\n    if !is_substring_after_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extensions\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    let mut valid_extension = false;\n \
    \   let mut valid_name = false;\n    let mut valid_file_name = false;\n\n    for\
    \ (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n   \
    \         digits_count += 1;\n        } else if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n    }\n\n    if digits_count >\
    \ 3 {\n        valid_file_name = false;\n    } else if dot_count != 1 {\n    \
    \    valid_file_name = false;\n    } else {\n        let file_name_parts: Vec<&str>\
    \ = file_name.split('.').collect();\n        let file_name_part = file_name_parts[0];\n\
    \        let file_extension = file_name_parts[1];\n\n        for extension in\
    \ valid_extensions.iter() {\n            if extension == file_extension {\n  \
    \              valid_extension = true;\n            }\n        }\n\n        if\
    \ file_name_part.len() == 0 {\n            valid_name = false;\n        } else\
    \ {\n            let first_char = file_name_part.chars().next().unwrap();\n  \
    \          if first_char.is_alphabetic() {\n                valid_name = true;\n\
    \            }\n        }\n\n        if valid_extension && valid_name {\n    \
    \        valid_file_name = true;\n        }\n    }\n\n    if valid_file_name {\n\
    \        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n \
    \   }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ first_char_is_letter = false;\n    let mut last_char_is_letter = false;\n  \
    \  let mut last_char_is_digit = false;\n    let mut last_char_is_dot = false;\n\
    \    let mut last_char_is_valid_extension = false;\n    let mut last_char_is_valid_extension_2\
    \ = false;\n    let mut last_char_is_valid_extension_3 = false;\n    let mut last_char_is_valid_extension_4\
    \ = false;\n    let mut last_char_is_valid_extension_5 = false;\n    let mut last_char_is_valid_extension_6\
    \ = false;\n    let mut last_char_is_valid_extension_7 = false;\n    let mut last_char_is_valid_extension_8\
    \ = false;\n    let mut last_char_is_valid_extension_9 = false;\n    let mut last_char_is_valid_extension_10\
    \ = false;\n    let mut last_char_is_valid_extension_11 = false;\n    let mut\
    \ last_char_is_valid_extension_12 = false;\n    let mut last_char_is_valid_extension_13\
    \ = false;\n    let mut last_char_is_valid_extension_14 = false;\n    let mut\
    \ last_char_is_valid_extension_15 = false;\n    let mut last_char_is_valid_extension_16\
    \ = false;\n    let mut last_char_is_valid_extension_17 = false;\n    let mut\
    \ last_char_is_valid_extension_18 = false;\n    let mut last_char_is_valid_extension_19\
    \ = false;\n    let mut last_char_is_valid_extension_20 = false;\n    let mut\
    \ last_char_is_valid_extension_21 = false;\n    let mut last_char_is_valid_extension_22\
    \ = false;\n    let mut last_char_is_valid_extension_23 = false;\n", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n    let\
    \ mut is_extension_valid = false;\n    let mut extension = String::new();\n  \
    \  for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_before_dot = false;\n            is_after_dot = true;\n\
    \        } else if c.is_digit(10) {\n            digits_count += 1;\n        }\
    \ else if c.is_alphabetic() {\n            if is_before_dot && !c.is_ascii_uppercase()\
    \ && !c.is_ascii_lowercase() {\n                is_valid = false;\n          \
    \      break;\n            } else if is_after_dot {\n                extension.push(c);\n\
    \            }\n        } else {\n            is_valid = false;\n            break;\n\
    \        }\n    }\n    if is_valid && digits_count <= 3 && dot_count == 1 {\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            is_extension_valid = true;\n        }\n    }\n    if is_valid\
    \ && is_extension_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut valid = true;\n    let mut valid_extension\
    \ = false;\n    let mut valid_substring = false;\n    let mut valid_substring_start\
    \ = false;\n    let mut valid_substring_end = false;\n    let mut valid_substring_length\
    \ = false;\n    let mut valid_substring_start_char = false;\n    let mut valid_substring_end_char\
    \ = false;\n    let mut valid_substring_end_char_2 = false;\n    let mut valid_substring_end_char_3\
    \ = false;\n    let mut valid_substring_end_char_4 = false;\n    let mut valid_substring_end_char_5\
    \ = false;\n    let mut valid_substring_end_char_6 = false;\n    let mut valid_substring_end_char_7\
    \ = false;\n    let mut valid_substring_end_char_8 = false;\n    let mut valid_substring_end_char_9\
    \ = false;\n    let mut valid_substring_end_char_10 = false;\n    let mut valid_substring_end_char_11\
    \ = false;\n    let mut valid_substring_end_char_12 = false;\n    let mut valid_substring_end_char_13\
    \ = false;\n    let mut valid_substring_end_char_14 = false;\n    let mut valid_substring_end_char_15\
    \ = false;\n    let mut valid_substring_end_char_16 = false;\n    let mut valid_substring_end_char_17\
    \ = false;\n    let mut valid_substring_end_char_18 = false;\n    let mut valid_substring_end_char_19\
    \ = false;\n    let mut valid_substring_end_char_20 = false;\n    let mut valid_substring_end_char_21\
    \ = false;\n    let mut valid_substring_end_char_22 = false;\n    let mut valid_substring_end_char_23\
    \ = false;\n    let mut valid_substring_end_", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut first_char_found = false;\n    let mut\
    \ first_char_is_letter = false;\n    let mut dot_found = false;\n    let mut last_char_is_letter\
    \ = false;\n    let mut last_char_is_digit = false;\n    let mut last_char_is_dot\
    \ = false;\n    let mut last_char_is_extension = false;\n    let mut extension_is_valid\
    \ = false;\n    let mut extension_is_txt = false;\n    let mut extension_is_exe\
    \ = false;\n    let mut extension_is_dll = false;\n    let mut extension_is_empty\
    \ = false;\n    let mut extension_is_not_empty = false;\n    let mut extension_is_not_valid\
    \ = false;\n    let mut extension_is_valid_and_not_empty = false;\n    let mut\
    \ extension_is_valid_and_not_empty_and_not_txt = false;\n    let mut extension_is_valid_and_not_empty_and_not_exe\
    \ = false;\n    let mut extension_is_valid_and_not_empty_and_not_dll = false;\n\
    \    let mut extension_is_valid_and_not_empty_and_not_txt_and_not_exe = false;\n\
    \    let mut extension_is_valid_and_not_empty_and_not_txt_and_not_dll = false;\n\
    \    let mut extension_is_valid_and_not_empty_and_not_exe_and_not_dll = false;\n\
    \    let mut extension_is_valid_and_not_empty_and_not_txt_and_not_exe_and_not_dll\
    \ = false;\n    let mut extension_is_valid_and_not_empty_and_not_txt_and_not_exe_and_not_dll_and_not_empty\
    \ = false;\n    let mut extension_is_valid_and_not_empty_and_not_txt_and_not_exe_and_not_dll_and_not_empty_and_not_valid\
    \ = false;\n    let mut extension", "    let mut digits_counter = 0;\n    let\
    \ mut dot_counter = 0;\n    let mut is_valid = true;\n    let mut is_empty = true;\n\
    \    let mut is_first_letter = true;\n    let mut is_extension = false;\n    let\
    \ mut extension = String::new();\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits_counter += 1;\n        }\n        if c\
    \ == '.' {\n            dot_counter += 1;\n            is_first_letter = true;\n\
    \        }\n        if c.is_alphabetic() {\n            is_empty = false;\n  \
    \          if is_first_letter {\n                is_first_letter = false;\n  \
    \              if !c.is_ascii_uppercase() && !c.is_ascii_lowercase() {\n     \
    \               is_valid = false;\n                    break;\n              \
    \  }\n            }\n        }\n        if dot_counter == 1 {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_counter > 3 || dot_counter != 1 || is_empty {\n\
    \        is_valid = false;\n    }\n    if extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\" {\n        is_extension = true;\n    }\n   \
    \ if is_valid && is_extension {\n        return String::from(\"Yes\");\n    }\n\
    \    return String::from(\"No\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_substring_before_dot_valid\
    \ = false;\n    let mut is_substring_after_dot_valid = false;\n    let mut substring_after_dot\
    \ = String::new();\n    let mut substring_before_dot = String::new();\n    for\
    \ c in file_name.chars() {\n        if c == '.' {\n            dot_count += 1;\n\
    \            continue;\n        }\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if digits_count > 3 {\n            is_valid = false;\n\
    \            break;\n        }\n        if dot_count == 1 {\n            substring_after_dot.push(c);\n\
    \        } else {\n            substring_before_dot.push(c);\n        }\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !substring_before_dot.is_empty()\
    \ {\n        if substring_before_dot.chars().next().unwrap().is_alphabetic() {\n\
    \            is_substring_before_dot_valid = true;\n        }\n    }\n    if substring_after_dot\
    \ == \"txt\" || substring_after_dot == \"exe\" || substring_after_dot == \"dll\"\
    \ {\n        is_substring_after_dot_valid = true;\n    }\n    if is_valid && is_substring_before_dot_valid\
    \ && is_substring_after_dot_valid {\n        return String::from(\"Yes\");\n \
    \   }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extension\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if dot_index == 0 {\n      \
    \  return String::from(\"No\");\n    }\n    if !file_name.chars().nth(0).unwrap().is_alphabetic()\
    \ {\n        return String::from(\"No\");\n    }\n    let extension = &file_name[dot_index\
    \ + 1..];\n    if extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\" {\n        valid_extension = true;\n    }\n    if valid_extension {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut is_extension_empty\
    \ = true;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = true;\n        }\n        if is_first_letter {\n            if c.is_alphabetic()\
    \ {\n                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            } else {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n        if c != '.' {\n           \
    \ is_extension_empty = false;\n            extension.push(c);\n        }\n   \
    \ }\n    if !is_extension_empty {\n        extension = extension.split_off(extension.len()\
    \ - 3);\n        if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n            is_extension_valid = true;\n        }\n    }\n   \
    \ if digits_count > 3 || dot_count != 1 || !is_first_letter_valid || !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut first_part_is_valid = false;\n\
    \    let mut second_part_is_valid = false;\n    let mut first_part = String::new();\n\
    \    let mut second_part = String::new();\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        return String::from(\"No\");\n    }\n    let\
    \ parts: Vec<&str> = file_name.split('.').collect();\n    if parts.len() != 2\
    \ {\n        return String::from(\"No\");\n    }\n    first_part = String::from(parts[0]);\n\
    \    second_part = String::from(parts[1]);\n    if first_part.len() == 0 {\n \
    \       return String::from(\"No\");\n    }\n    for c in first_part.chars() {\n\
    \        if c.is_alphabetic() {\n            first_part_is_valid = true;\n   \
    \         break;\n        }\n    }\n    if !first_part_is_valid {\n        return\
    \ String::from(\"No\");\n    }\n    if second_part == \"txt\" || second_part ==\
    \ \"exe\" || second_part == \"dll\" {\n        second_part_is_valid = true;\n\
    \    }\n    if !second_part_is_valid {\n        return String::from(\"No\");\n\
    \    }\n    return String::from(\"Yes\");", "    let mut digits_count = 0;\n \
    \   let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_after_first_letter = false;\n    let mut is_after_first_dot =\
    \ false;\n    let mut is_after_second_dot = false;\n    let mut is_after_third_dot\
    \ = false;\n    let mut is_after_fourth_dot = false;\n    let mut is_after_fifth_dot\
    \ = false;\n    let mut is_after_sixth_dot = false;\n    let mut is_after_seventh_dot\
    \ = false;\n    let mut is_after_eighth_dot = false;\n    let mut is_after_ninth_dot\
    \ = false;\n    let mut is_after_tenth_dot = false;\n    let mut is_after_eleventh_dot\
    \ = false;\n    let mut is_after_twelfth_dot = false;\n    let mut is_after_thirteenth_dot\
    \ = false;\n    let mut is_after_fourteenth_dot = false;\n    let mut is_after_fifteenth_dot\
    \ = false;\n    let mut is_after_sixteenth_dot = false;\n    let mut is_after_seventeenth_dot\
    \ = false;\n    let mut is_after_eighteenth_dot = false;\n    let mut is_after_nineteenth_dot\
    \ = false;\n    let mut is_after_twentieth_dot = false;\n    let mut is_after_twenty_first_dot\
    \ = false;\n    let mut is_after_twenty_second_dot = false;\n    let mut is_after_twenty_third_dot\
    \ = false;\n    let mut is_after_twenty_fourth_dot = false;\n    let mut is_after_twenty_fifth_dot\
    \ = false;\n    let mut is_after_twenty_sixth_dot = false;\n    let mut is_after_twenty_seventh_dot\
    \ = false;\n    let mut is_after_twenty_eighth", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty\
    \ = true;\n    let mut is_letter = false;\n    let mut is_extension = false;\n\
    \    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    let mut extension_valid = vec![\"txt\", \"exe\", \"dll\"];\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n        }\n\
    \        if c.is_alphabetic() {\n            is_letter = true;\n        }\n  \
    \      if c == '.' {\n            is_extension = true;\n        }\n        if\
    \ is_extension {\n            extension.push(c);\n        }\n    }\n    for ext\
    \ in extension_valid {\n        if ext == extension {\n            is_extension_valid\
    \ = true;\n        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n\
    \    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !is_letter\
    \ {\n        is_valid = false;\n    }\n    if !is_extension_valid {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        return String::from(\"Yes\");\n\
    \    } else {\n        return String::from(\"No\");\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_letter = false;\n    let mut is_extension = false;\n\
    \    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if c.is_alphabetic() {\n            is_letter = true;\n  \
    \      }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_letter {\n \
    \       is_valid = false;\n    }\n    extension = file_name.chars().skip(dot_index\
    \ + 1).collect();\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        is_extension = true;\n    }\n    if is_valid && is_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot = true;\n\
    \    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_after_dot = true;\n            is_before_dot = false;\n        }\n\
    \        if is_first_letter {\n            if !c.is_ascii_alphabetic() {\n   \
    \             is_valid = false;\n                break;\n            }\n     \
    \       is_first_letter = false;\n        }\n        if is_after_dot {\n     \
    \       if is_first_dot {\n                is_first_dot = false;\n           \
    \ } else {\n                extension.push(c);\n            }\n        }\n   \
    \ }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if is_before_dot && file_name.len()\
    \ == 0 {\n        is_valid = false;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_extension_valid = true;\n \
    \   }\n    if is_valid && is_extension_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut count = 0;\n \
    \   let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid =\
    \ true;\n    let mut is_valid_extension = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n    }\n    if count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if dot_index == 0 {\n        is_valid\
    \ = false;\n    }\n    let extension = &file_name[dot_index+1..];\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        is_valid_extension\
    \ = true;\n    }\n    if is_valid && is_valid_extension {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_after_dot_valid_txt\
    \ = false;\n    let mut is_after_dot_valid_exe = false;\n    let mut is_after_dot_valid_dll\
    \ = false;\n    for ch in file_name.chars() {\n        if ch == '.' {\n      \
    \      dot_count += 1;\n            is_before_dot = false;\n            is_after_dot\
    \ = true;\n        } else if ch.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if ch.is_alphabetic() {\n            if is_before_dot {\n    \
    \            is_before_dot_valid = true;\n            } else if is_after_dot {\n\
    \                if is_after_dot_valid_txt {\n                    is_after_dot_valid_txt\
    \ = false;\n                } else if is_after_dot_valid_exe {\n             \
    \       is_after_dot_valid_exe = false;\n                } else if is_after_dot_valid_dll\
    \ {\n                    is_after_dot_valid_dll = false;\n                }\n\
    \                match ch {\n                    't' => is_after_dot_valid_txt\
    \ = true,\n                    'e' => is_after_dot_valid_exe = true,\n       \
    \             'd' => is_after_dot_valid_dll = true,\n                    _ =>\
    \ is_valid = false,\n                }\n            }\n        } else {\n    \
    \        is_valid = false;\n        }\n    }\n    if digits_count > 3 {\n    \
    \    is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if\
    \ is_after_dot_valid_txt || is_after_dot_valid_", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digits\
    \ = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_prefix_start\
    \ = true;\n    let mut is_valid_prefix_end = true;\n    let mut is_valid_extension_start\
    \ = true;\n    let mut is_valid_extension_end = true;\n    let mut is_valid_extension_start_char\
    \ = true;\n    let mut is_valid_extension_end_char = true;\n    let mut is_valid_prefix_start_char\
    \ = true;\n    let mut is_valid_prefix_end_char = true;\n    let mut prefix_start\
    \ = 0;\n    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let\
    \ mut extension_end = 0;\n    let mut extension_start_char = ' ';\n    let mut\
    \ extension_end_char = ' ';\n    let mut prefix_start_char = ' ';\n    let mut\
    \ prefix_end_char = ' ';\n    let mut extension_length = 0;\n    let mut prefix_length\
    \ = 0;\n    let mut extension = String::from(\"\");\n    let mut prefix = String::from(\"\
    \");\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_start = i + 1;\n            prefix_end\
    \ = i - 1;\n        }\n    }\n    if digits_count > 3 {\n        is_valid_digits\
    \ = false;\n    }\n    if dot_count != 1 {\n        is_valid_dot = false;\n  \
    \  }\n    if is_valid_dot {\n        extension_end", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_name = false;\n    let mut extension = String::new();\n    let\
    \ mut name = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n    }\n    if dot_count == 1 {\n        let\
    \ mut dot_index = 0;\n        for (i, c) in file_name.chars().enumerate() {\n\
    \            if c == '.' {\n                dot_index = i;\n                break;\n\
    \            }\n        }\n        name = file_name[..dot_index].to_string();\n\
    \        extension = file_name[dot_index + 1..].to_string();\n        if name.len()\
    \ > 0 && name.chars().next().unwrap().is_alphabetic() {\n            valid_name\
    \ = true;\n        }\n        if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n            valid_extension = true;\n        }\n\
    \    }\n    if digits_count <= 3 && valid_extension && valid_name {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_char_found\
    \ = false;\n    let mut first_char_is_letter = false;\n    let mut dot_position\
    \ = 0;\n    let mut extension_found = false;\n    let mut extension = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_position = i;\n        }\n        if !first_char_found\
    \ {\n            first_char_found = true;\n            first_char_is_letter =\
    \ c.is_alphabetic();\n        }\n    }\n    if dot_count == 1 {\n        extension\
    \ = file_name[dot_position + 1..].to_string();\n        extension_found = extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\";\n    }\n    if digits_count\
    \ <= 3 && dot_count == 1 && first_char_is_letter && extension_found {\n      \
    \  return String::from(\"Yes\");\n    }\n    String::from(\"No\")", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut first_letter_index = 0;\n    let mut extension_index = 0;\n    let\
    \ mut extension_length = 0;\n    let mut extension = String::new();\n    let mut\
    \ valid = true;\n\n    for (i, c) in file_name.chars().enumerate() {\n       \
    \ if c.is_ascii_digit() {\n            digits_count += 1;\n        } else if c\
    \ == '.' {\n            dot_count += 1;\n            dot_index = i;\n        }\
    \ else if c.is_ascii_alphabetic() {\n            first_letter_index = i;\n   \
    \     }\n    }\n\n    if digits_count > 3 || dot_count != 1 || first_letter_index\
    \ > dot_index {\n        valid = false;\n    } else {\n        extension_index\
    \ = dot_index + 1;\n        extension_length = file_name.len() - extension_index;\n\
    \        extension = file_name[extension_index..].to_string();\n    }\n\n    if\
    \ valid && extension_length == 3 && extension == \"txt\" {\n        return String::from(\"\
    Yes\");\n    } else if valid && extension_length == 3 && extension == \"exe\"\
    \ {\n        return String::from(\"Yes\");\n    } else if valid && extension_length\
    \ == 3 && extension == \"dll\" {\n        return String::from(\"Yes\");\n    }\
    \ else {\n        return String::from(\"No\");\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_substring_valid = false;\n    let mut is_substring_empty = true;\n    let\
    \ mut is_substring_start_with_letter = false;\n    let mut is_substring_end_with_valid_extension\
    \ = false;\n    let mut is_substring_end_with_valid_extension_count = 0;\n   \
    \ let mut is_substring_end_with_valid_extension_index = 0;\n    let mut is_substring_end_with_valid_extension_index_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count =\
    \ 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n\
    \    let mut is_valid_extension_length = true;\n    let mut is_valid_prefix_length\
    \ = true;\n    let mut is_valid_extension_chars = true;\n    let mut is_valid_prefix_chars\
    \ = true;\n    let mut is_valid_extension_first_char = true;\n    let mut is_valid_prefix_first_char\
    \ = true;\n    let mut extension = String::new();\n    let mut prefix = String::new();\n\
    \    let mut extension_length = 0;\n    let mut prefix_length = 0;\n    let mut\
    \ extension_first_char = ' ';\n    let mut prefix_first_char = ' ';\n    let mut\
    \ extension_chars = Vec::new();\n    let mut prefix_chars = Vec::new();\n    let\
    \ mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    let mut valid_extensions_length\
    \ = vec![3, 3, 3];\n    let mut valid_extensions_first_char = vec!['t', 'e', 'd'];\n\
    \    let mut valid_extensions_chars = vec![vec!['t', 'x'], vec!['e', 'e'], vec!['d',\
    \ 'l']];\n    let mut valid_prefix_chars = vec!['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\
    \ 'M', 'N', 'O', 'P',", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut extension = String::new();\n    let mut file_name_without_extension\
    \ = String::new();\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            file_name_without_extension\
    \ = file_name[..i].to_string();\n        } else if c.is_digit(10) {\n        \
    \    digits_count += 1;\n        } else if i == file_name.len() - 1 {\n      \
    \      extension = c.to_string();\n        } else {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || file_name_without_extension.is_empty()\
    \ ||\n        !file_name_without_extension.chars().next().unwrap().is_alphabetic()\
    \ ||\n        !(extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\") {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_dot = false;\n    let mut has_extension = false;\n    let mut extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            has_dot = true;\n        } else if c.is_alphabetic()\
    \ {\n            has_letter = true;\n        }\n        if has_dot {\n       \
    \     extension.push(c);\n        }\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        has_extension = true;\n    }\n\
    \    if digits_count <= 3 && dot_count == 1 && has_letter && has_extension {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    let mut prefix_start = 0;\n\
    \    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut i = 0;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_start = i + 1;\n        }\n    \
    \    if c.is_alphabetic() {\n            prefix_start = i;\n            valid_prefix\
    \ = true;\n        }\n        if i == file_name.len() - 1 {\n            extension_end\
    \ = i + 1;\n        }\n        i += 1;\n    }\n    if digits_count > 3 {\n   \
    \     return String::from(\"No\");\n    }\n    if dot_count != 1 {\n        return\
    \ String::from(\"No\");\n    }\n    if !valid_prefix {\n        return String::from(\"\
    No\");\n    }\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    if valid_extension {\n        return\
    \ String::from(\"Yes\");\n    }\n    String::from(\"No\")", "    let mut digits\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n  \
    \      }\n    }\n    if digits > 3 {\n        return String::from(\"No\");\n \
    \   }\n    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n\
    \    if dot_index == 0 {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().nth(dot_index + 1).unwrap() == 't' {\n        valid_extension\
    \ = true;\n    }\n    if file_name.chars().nth(dot_index + 1).unwrap() == 'e'\
    \ {\n        valid_extension = true;\n    }\n    if file_name.chars().nth(dot_index\
    \ + 1).unwrap() == 'd' {\n        valid_extension = true;\n    }\n    if file_name.chars().nth(0).unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    if valid_extension && valid_prefix\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n\
    \    let mut valid_name = false;\n    let mut name_start = 0;\n    let mut name_end\
    \ = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_start = i + 1;\n        }\n    \
    \    if i == extension_start {\n            if c == 't' {\n                extension_end\
    \ = i + 2;\n                valid_extension = true;\n            }\n         \
    \   if c == 'e' {\n                extension_end = i + 3;\n                valid_extension\
    \ = true;\n            }\n            if c == 'd' {\n                extension_end\
    \ = i + 3;\n                valid_extension = true;\n            }\n        }\n\
    \        if i == extension_end {\n            if c == 'x' {\n                valid_extension\
    \ = true;\n            }\n            if c == 'e' {\n                valid_extension\
    \ = true;\n            }\n            if c == 'l' {\n                valid_extension\
    \ = true;\n            }\n        }\n        if i == 0 {\n            if c.is_alphabetic()\
    \ {\n                name_start = i;\n                name_end = i + 1;\n    \
    \            valid_name = true;\n            }\n        }\n        if i == name_end\
    \ {\n            if c.is_alphabetic() {\n                name_end += 1;\n    \
    \            valid_name = true;\n            }\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if !valid_extension {\n    \
    \    return String::from(\"No\");\n    }\n    if !valid_name {\n        return\
    \ String::from(\"No\");\n    }", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    for c in file_name.chars() {\n     \
    \   if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if\
    \ c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let mut split\
    \ = file_name.split('.');\n    let first = split.next().unwrap();\n    let second\
    \ = split.next().unwrap();\n    if first.is_empty() || !first.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if second != \"txt\" && second != \"\
    exe\" && second != \"dll\" {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut valid_extension = false;\n    let mut valid_name = false;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut name_start = 0;\n    let mut\
    \ name_end = 0;\n    let mut i = 0;\n    while i < file_name.len() {\n       \
    \ if file_name.chars().nth(i).unwrap().is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if file_name.chars().nth(i).unwrap() == '.' {\n  \
    \          dot_count += 1;\n            extension_start = i + 1;\n        }\n\
    \        if dot_count == 1 && file_name.chars().nth(i).unwrap() == '.' {\n   \
    \         extension_end = i;\n        }\n        if dot_count == 1 && file_name.chars().nth(i).unwrap()\
    \ != '.' {\n            name_end = i;\n        }\n        i += 1;\n    }\n   \
    \ if digits_count <= 3 && dot_count == 1 {\n        let extension = &file_name[extension_start..extension_end];\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            valid_extension = true;\n        }\n        let name = &file_name[name_start..name_end];\n\
    \        if name.chars().nth(0).unwrap().is_alphabetic() {\n            valid_name\
    \ = true;\n        }\n    }\n    if valid_extension && valid_name {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension =\
    \ false;\n    let mut valid_name = false;\n    let mut valid_file_name = true;\n\
    \    let mut extension = String::new();\n    let mut name = String::new();\n \
    \   let mut extension_start = 0;\n    let mut name_start = 0;\n    for (i, c)\
    \ in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n          \
    \  digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension_start = i + 1;\n        }\n        if c == '.'\
    \ && dot_count == 1 {\n            name_start = i;\n        }\n    }\n    if digits_count\
    \ > 3 {\n        valid_file_name = false;\n    }\n    if dot_count != 1 {\n  \
    \      valid_file_name = false;\n    }\n    if extension_start != 0 {\n      \
    \  extension = file_name[extension_start..].to_string();\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if name_start != 0 {\n        name = file_name[..name_start].to_string();\n\
    \        if name.len() > 0 && name.chars().next().unwrap().is_alphabetic() {\n\
    \            valid_name = true;\n        }\n    }\n    if valid_file_name && valid_extension\
    \ && valid_name {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digits\
    \ = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_prefix_start\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_extension_end\
    \ = true;\n    let mut is_valid_prefix_end = true;\n    let mut valid_extensions\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    let mut valid_prefix_start = vec!['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z'];\n    let mut valid_extension_start = vec!['t', 'e', 'd'];\n\
    \    let mut valid_extension_end = vec!['t', 'e', 'l'];\n    let mut valid_prefix_end\
    \ = vec!['.'];\n    let mut valid_digits = vec!['0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9'];\n    let mut valid_dot = vec!['.'];\n    let mut valid_extension_length\
    \ = vec![3];\n    let mut valid_prefix_length = vec![", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_before_dot = true;\n    let mut is_after_dot = false;\n    let mut is_after_dot_valid\
    \ = false;\n    let mut is_before_dot_valid = false;\n    let mut is_before_dot_empty\
    \ = true;\n    let mut is_after_dot_empty = true;\n    let mut is_before_dot_start_with_letter\
    \ = false;\n    let mut is_after_dot_start_with_letter = false;\n    let mut is_after_dot_start_with_number\
    \ = false;\n    let mut is_before_dot_start_with_number = false;\n    let mut\
    \ is_after_dot_start_with_dot = false;\n    let mut is_before_dot_start_with_dot\
    \ = false;\n    let mut is_after_dot_start_with_underscore = false;\n    let mut\
    \ is_before_dot_start_with_underscore = false;\n    let mut is_after_dot_start_with_hyphen\
    \ = false;\n    let mut is_before_dot_start_with_hyphen = false;\n    let mut\
    \ is_after_dot_start_with_space = false;\n    let mut is_before_dot_start_with_space\
    \ = false;\n    let mut is_after_dot_start_with_special_char = false;\n    let\
    \ mut is_before_dot_start_with_special_char = false;\n    let mut is_after_dot_end_with_letter\
    \ = false;\n    let mut is_before_dot_end_with_letter = false;\n    let mut is_after_dot_end_with_number\
    \ = false;\n    let mut is_before_dot_end_with_number = false;\n    let mut is_after_dot_end_with_dot\
    \ = false;\n    let mut is_before_dot_end_with_dot = false;\n    let mut is_after_dot_end_with_underscore\
    \ = false;\n    let mut is_before_dot_end_with_unders", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut is_valid_prefix = false;\n    let mut\
    \ is_valid_digits = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_prefix_start\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_extension_end\
    \ = true;\n    let mut extension_start = 0;\n    let mut prefix_start = 0;\n \
    \   let mut extension_end = 0;\n    let mut prefix_end = 0;\n    let mut extension_length\
    \ = 0;\n    let mut prefix_length = 0;\n    let mut extension = String::new();\n\
    \    let mut prefix = String::new();\n    let mut extension_valid = String::from(\"\
    txt\");\n    let mut extension_valid_2 = String::from(\"exe\");\n    let mut extension_valid_3\
    \ = String::from(\"dll\");\n    let mut extension_valid_4 = String::from(\"jpg\"\
    );\n    let mut extension_valid_5 = String::from(\"png\");\n    let mut extension_valid_6\
    \ = String::from(\"gif\");\n    let mut extension_valid_7 = String::from(\"mp3\"\
    );\n    let mut extension_valid_8 = String::from(\"mp4\");\n    let mut extension_valid_9\
    \ = String::from(\"avi\");\n    let mut extension_valid_10 = String::from(\"mkv\"\
    );\n    let mut extension_valid_11 = String::from(\"flv\");\n    let mut extension_valid_12\
    \ = String::from(\"mov\");\n    let mut extension_valid_13 = String::from(\"wmv\"\
    );\n    let mut extension_valid_14 = String::from(\"doc\");\n    let mut extension_valid_15\
    \ = String::from(\"docx\");\n    let mut extension_valid_16 = String::from(\"\
    xls\");\n    let mut extension_valid_17 = String::from(\"xlsx", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_empty = true;\n    let mut is_first_letter = true;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = true;\n        }\n        if c.is_alphabetic() {\n            is_empty = false;\n\
    \            if is_first_letter {\n                is_first_letter = false;\n\
    \                if !c.is_ascii_alphabetic() {\n                    is_valid =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        if c == '.' {\n            if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n                is_extension_valid = true;\n\
    \            }\n            extension = String::new();\n        } else {\n   \
    \         extension.push(c);\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || is_empty || !is_extension_valid {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut extension_count = 0;\n    let mut extension_valid = false;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_valid_list\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    let mut extension_valid_list_iter =\
    \ extension_valid_list.iter();\n    let mut extension_valid_list_iter_mut = extension_valid_list.iter_mut();\n\
    \    let mut extension_valid_list_iter_mut_next = extension_valid_list_iter_mut.next();\n\
    \    let mut extension_valid_list_iter_mut_next_mut = extension_valid_list_iter_mut_next.unwrap();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone = extension_valid_list_iter_mut_next_mut.clone();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars = extension_valid_list_iter_mut_next_mut_clone.chars();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars_next = extension_valid_list_iter_mut_next_mut_clone_chars.next();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars_next_clone = extension_valid_list_iter_mut_next_mut_clone_chars_next.unwrap();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars_next_clone_clone\
    \ = extension_valid_list_iter_mut_next_mut_clone_chars_next_clone.clone();\n \
    \   let mut extension_valid_list_iter_mut_next_mut_clone_chars_next_clone_clone_clone\
    \ = extension_valid_list_iter_mut_next_mut_clone_chars_next_clone_clone.clone();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars_next_clone_clone_clone_clone\
    \ = extension_valid_list", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut extension_count = 0;\n    let mut extension_start = 0;\n \
    \   let mut extension_end = 0;\n    let mut extension_name = String::new();\n\
    \    let mut extension_names = vec![\"txt\", \"exe\", \"dll\"];\n    let mut extension_names_len\
    \ = vec![3, 3, 3];\n    let mut extension_names_index = 0;\n    let mut extension_names_index_len\
    \ = 0;\n    let mut extension_names_index_len_count = 0;\n    let mut extension_names_index_len_count_index\
    \ = 0;\n    let mut extension_names_index_len_count_index_len = 0;\n    let mut\
    \ extension_names_index_len_count_index_len_count = 0;\n    let mut extension_names_index_len_count_index_len_count_index\
    \ = 0;\n    let mut extension_names_index_len_count_index_len_count_index_len\
    \ = 0;\n    let mut extension_names_index_len_count_index_len_count_index_len_count\
    \ = 0;\n    let mut extension_names_index_len_count_index_len_count_index_len_count_index\
    \ = 0;\n    let mut extension_names_index_len_count_index_len_count_index_len_count_index_len\
    \ = 0;\n    let mut extension_names_index_len_count_index_len_count_index_len_count_index_len_count\
    \ = 0;\n    let mut extension_names_index_len_count_index_len_count_index_len_count_index_len_count_index\
    \ = 0;\n    let mut extension_names_index_len_count_index_len_count_index_len_count_index_len_count_index_len\
    \ = 0;\n    let mut extension_names_index_len_count_index_len_count_index_len_count_index_len_count_index_len_count\
    \ = 0;\n    let mut extension_names_index_len_count_index_len_count_index", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    let mut prefix_start = 0;\n\
    \    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut i = 0;\n    while i < file_name.len() {\n        if file_name.chars().nth(i).unwrap().is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            dot_count += 1;\n            extension_start = i + 1;\n\
    \        }\n        if i == 0 && file_name.chars().nth(i).unwrap().is_alphabetic()\
    \ {\n            valid_prefix = true;\n            prefix_start = i;\n       \
    \ }\n        if i == file_name.len() - 1 && valid_prefix {\n            prefix_end\
    \ = i;\n            extension_end = i;\n        }\n        i += 1;\n    }\n  \
    \  if digits_count > 3 || dot_count != 1 || !valid_prefix {\n        return String::from(\"\
    No\");\n    }\n    let extension = &file_name[extension_start..extension_end +\
    \ 1];\n    let prefix = &file_name[prefix_start..prefix_end + 1];\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    if valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    String::from(\"No\")", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digits\
    \ = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_extension_char\
    \ = true;\n    let mut is_valid_prefix_char = true;\n    let mut is_valid_extension_start\
    \ = true;\n    let mut is_valid_prefix_start = true;\n    let mut is_valid_extension_end\
    \ = true;\n    let mut is_valid_prefix_end = true;\n    let mut is_valid_extension_end_char\
    \ = true;\n    let mut is_valid_prefix_end_char = true;\n    let mut is_valid_extension_start_char\
    \ = true;\n    let mut is_valid_prefix_start_char = true;\n    let mut is_valid_extension_end_length\
    \ = true;\n    let mut is_valid_prefix_end_length = true;\n    let mut is_valid_extension_start_length\
    \ = true;\n    let mut is_valid_prefix_start_length = true;\n    let mut is_valid_extension_end_char_length\
    \ = true;\n    let mut is_valid_prefix_end_char_length = true;\n    let mut is_valid_extension_start_char_length\
    \ = true;\n    let mut is_valid_prefix_start_char_length = true;\n    let mut\
    \ is_valid_extension_end_char_type = true;\n    let mut is_valid_prefix_end_char_type\
    \ = true;\n    let mut is_valid_extension_start_char_type = true;\n    let mut\
    \ is_valid_prefix_start_char_type = true;\n    let mut is_valid_extension_end_char_type_length\
    \ = true;\n    let mut is_valid_prefix_end_char_type", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\"\
    );\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n   \
    \ }\n    let extension = &file_name[dot_index + 1..];\n    if extension == \"\
    txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    let name = &file_name[..dot_index];\n    if name.len() >\
    \ 0 && name.chars().next().unwrap().is_alphabetic() {\n        valid_name = true;\n\
    \    }\n    if valid_extension && valid_name {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digit_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_dot = true;\n    let mut is_first_letter_after_dot\
    \ = true;\n    let mut is_first_letter_after_first_dot = true;\n    let mut is_first_letter_after_second_dot\
    \ = true;\n    let mut is_first_letter_after_third_dot = true;\n    let mut is_first_letter_after_fourth_dot\
    \ = true;\n    let mut is_first_letter_after_fifth_dot = true;\n    let mut is_first_letter_after_sixth_dot\
    \ = true;\n    let mut is_first_letter_after_seventh_dot = true;\n    let mut\
    \ is_first_letter_after_eighth_dot = true;\n    let mut is_first_letter_after_ninth_dot\
    \ = true;\n    let mut is_first_letter_after_tenth_dot = true;\n    let mut is_first_letter_after_eleventh_dot\
    \ = true;\n    let mut is_first_letter_after_twelfth_dot = true;\n    let mut\
    \ is_first_letter_after_thirteenth_dot = true;\n    let mut is_first_letter_after_fourteenth_dot\
    \ = true;\n    let mut is_first_letter_after_fifteenth_dot = true;\n    let mut\
    \ is_first_letter_after_sixteenth_dot = true;\n    let mut is_first_letter_after_seventeenth_dot\
    \ = true;\n    let mut is_first_letter_after_eighteenth_dot = true;\n    let mut\
    \ is_first_letter_after_nineteenth_dot = true;\n    let mut is_first_letter_after_twentieth_dot\
    \ = true;\n    let mut is_first_letter_after_twenty_first_dot = true;\n    let\
    \ mut is_first_letter_after_twenty_second_dot = true;\n    let mut is_first_letter_after_twenty_third_dot\
    \ = true;\n", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension = String::new();\n    let mut valid_extension = false;\n    let mut\
    \ valid_prefix = false;\n    let mut prefix = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            if dot_count == 0 {\n                prefix.push(c);\n      \
    \      } else {\n                extension.push(c);\n            }\n        }\n\
    \    }\n    if digits > 3 {\n        return String::from(\"No\");\n    }\n   \
    \ if dot_count != 1 {\n        return String::from(\"No\");\n    }\n    if prefix.is_empty()\
    \ {\n        return String::from(\"No\");\n    }\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        valid_extension =\
    \ true;\n    }\n    if prefix.chars().next().unwrap().is_alphabetic() {\n    \
    \    valid_prefix = true;\n    }\n    if valid_extension && valid_prefix {\n \
    \       return String::from(\"Yes\");\n    }\n    return String::from(\"No\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid = false;\n\
    \    let mut is_before_dot_started = false;\n    let mut is_after_dot_started\
    \ = false;\n    let mut is_before_dot_started_with_letter = false;\n    let mut\
    \ is_after_dot_started_with_letter = false;\n    let mut is_before_dot_started_with_digit\
    \ = false;\n    let mut is_after_dot_started_with_digit = false;\n    let mut\
    \ is_before_dot_started_with_underscore = false;\n    let mut is_after_dot_started_with_underscore\
    \ = false;\n    let mut is_before_dot_started_with_hyphen = false;\n    let mut\
    \ is_after_dot_started_with_hyphen = false;\n    let mut is_before_dot_started_with_space\
    \ = false;\n    let mut is_after_dot_started_with_space = false;\n    let mut\
    \ is_before_dot_started_with_other = false;\n    let mut is_after_dot_started_with_other\
    \ = false;\n    let mut is_before_dot_started_with_special = false;\n    let mut\
    \ is_after_dot_started_with_special = false;\n    let mut is_before_dot_started_with_special_other\
    \ = false;\n    let mut is_after_dot_started_with_special_other = false;\n   \
    \ let mut is_before_dot_started_with_special_other_other = false;\n    let mut\
    \ is_after_dot_started_with_special_other_other = false;\n    let mut is_before_dot_started_with_special_other_other_other\
    \ = false;\n    let mut is_after_dot_started_with_special_other_other_other =\
    \ false;\n    let mut is_before_dot_started_with_", "    let mut digits = 0;\n\
    \    let mut dot_count = 0;\n    let mut first_letter = false;\n    let mut last_three\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n        }\n        if c.is_alphabetic() {\n            first_letter =\
    \ true;\n        }\n        if c == '.' {\n            break;\n        }\n   \
    \ }\n    for c in file_name.chars().rev() {\n        if c == '.' {\n         \
    \   break;\n        }\n        last_three.push(c);\n    }\n    last_three = last_three.chars().rev().collect();\n\
    \    if digits > 3 || dot_count != 1 || !first_letter || last_three != \"txt\"\
    \ && last_three != \"exe\" && last_three != \"dll\" {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits = 0;\n\
    \    let mut dot_found = false;\n    let mut first_char_found = false;\n    let\
    \ mut extension_found = false;\n    let mut extension_start = 0;\n    let mut\
    \ extension_end = 0;\n    for (i, c) in file_name.chars().enumerate() {\n    \
    \    if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.'\
    \ {\n            dot_found = true;\n            extension_start = i + 1;\n   \
    \     } else if c.is_alphabetic() {\n            if !first_char_found {\n    \
    \            first_char_found = true;\n            }\n            if dot_found\
    \ {\n                extension_end = i;\n            }\n        }\n    }\n   \
    \ if digits > 3 {\n        return String::from(\"No\");\n    }\n    if !dot_found\
    \ {\n        return String::from(\"No\");\n    }\n    if !first_char_found {\n\
    \        return String::from(\"No\");\n    }\n    if extension_end - extension_start\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut extension = String::new();\n    let mut prefix = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c == '.' {\n  \
    \          dot_count += 1;\n            is_valid_prefix = true;\n        } else\
    \ if c.is_digit(10) {\n            digit_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            if i == 0 {\n                is_valid_prefix = true;\n      \
    \      }\n        }\n        if dot_count > 1 || digit_count > 3 {\n         \
    \   is_valid = false;\n            break;\n        }\n    }\n    if is_valid {\n\
    \        let mut parts = file_name.split('.');\n        prefix = parts.next().unwrap().to_string();\n\
    \        extension = parts.next().unwrap().to_string();\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_valid_extension\
    \ = true;\n        }\n    }\n    if is_valid && is_valid_extension && is_valid_prefix\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut dot_count = 0;\n    let mut digit_count = 0;\n    let\
    \ mut first_char_is_letter = false;\n    let mut extension_is_valid = false;\n\
    \    let mut extension_start_index = 0;\n    let mut extension_end_index = 0;\n\
    \    let mut extension_start_found = false;\n    let mut extension_end_found =\
    \ false;\n    let mut extension_start_found_once = false;\n    let mut extension_end_found_once\
    \ = false;\n    let mut extension_start_found_twice = false;\n    let mut extension_end_found_twice\
    \ = false;\n    let mut extension_start_found_thrice = false;\n    let mut extension_end_found_thrice\
    \ = false;\n    let mut extension_start_found_fourth = false;\n    let mut extension_end_found_fourth\
    \ = false;\n    let mut extension_start_found_fifth = false;\n    let mut extension_end_found_fifth\
    \ = false;\n    let mut extension_start_found_sixth = false;\n    let mut extension_end_found_sixth\
    \ = false;\n    let mut extension_start_found_seventh = false;\n    let mut extension_end_found_seventh\
    \ = false;\n    let mut extension_start_found_eighth = false;\n    let mut extension_end_found_eighth\
    \ = false;\n    let mut extension_start_found_ninth = false;\n    let mut extension_end_found_ninth\
    \ = false;\n    let mut extension_start_found_tenth = false;\n    let mut extension_end_found_tenth\
    \ = false;\n    let mut extension_start_found_eleventh = false;\n    let mut extension_end_found_eleventh\
    \ = false;\n    let mut extension_start_found_twelfth = false;\n    let mut extension_end_found_twelfth\
    \ = false;\n    let mut extension_start_found_thirteenth = false;\n    let mut\
    \ extension_end_found_thirteenth = false;\n    let mut extension_start_found_fourteenth\
    \ = false;\n    let mut extension_end_found_fourteenth = false;\n   ", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut\
    \ is_first_letter_valid = false;\n    let mut is_extension_valid = false;\n  \
    \  let mut extension = String::new();\n    for (index, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = index;\n\
    \        }\n        if is_first_letter {\n            if c.is_alphabetic() {\n\
    \                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            } else {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n    }\n    if is_valid {\n        if\
    \ digits_count > 3 {\n            is_valid = false;\n        }\n        if dot_count\
    \ != 1 {\n            is_valid = false;\n        }\n        if is_first_letter_valid\
    \ {\n            if dot_index > 0 {\n                extension = file_name.chars().skip(dot_index\
    \ + 1).collect();\n                if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n                    is_extension_valid = true;\n\
    \                }\n            }\n        }\n    }\n    if is_valid && is_first_letter_valid\
    \ && is_extension_valid {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut extension_count = 0;\n    let mut extension_start = 0;\n \
    \   let mut extension_end = 0;\n    let mut extension_valid = false;\n    let\
    \ mut extension_valid_count = 0;\n    let mut extension_valid_start = 0;\n   \
    \ let mut extension_valid_end = 0;\n    let mut extension_valid_length = 0;\n\
    \    let mut extension_valid_length_count = 0;\n    let mut extension_valid_length_start\
    \ = 0;\n    let mut extension_valid_length_end = 0;\n    let mut extension_valid_length_valid\
    \ = false;\n    let mut extension_valid_length_valid_count = 0;\n    let mut extension_valid_length_valid_start\
    \ = 0;\n    let mut extension_valid_length_valid_end = 0;\n    let mut extension_valid_length_valid_valid\
    \ = false;\n    let mut extension_valid_length_valid_valid_count = 0;\n    let\
    \ mut extension_valid_length_valid_valid_start = 0;\n    let mut extension_valid_length_valid_valid_end\
    \ = 0;\n    let mut extension_valid_length_valid_valid_valid = false;\n    let\
    \ mut extension_valid_length_valid_valid_valid_count = 0;\n    let mut extension_valid_length_valid_valid_valid_start\
    \ = 0;\n    let mut extension_valid_length_valid_valid_valid_end = 0;\n    let\
    \ mut extension_valid_length_valid_valid_valid_valid = false;\n    let mut extension_valid_length_valid_valid_valid_valid_count\
    \ = 0;\n    let mut extension_valid_length_valid_valid_valid_valid_start = 0;\n\
    \    let mut extension_valid_length_valid_valid_valid_valid_end = 0;\n    let\
    \ mut extension_valid_length_valid_valid_valid_valid_valid = false;\n    let mut\
    \ extension_valid_length_valid_valid_valid_valid_valid_count = 0;\n    let mut\
    \ extension_valid_length_valid_valid_valid_valid_valid_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_empty = true;\n    let mut is_letter = false;\n    let mut is_extension =\
    \ false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_empty = false;\n            is_letter = false;\n        }\n       \
    \ if c.is_alphabetic() {\n            is_letter = true;\n        }\n        if\
    \ is_empty && !is_letter {\n            is_valid = false;\n        }\n       \
    \ if is_letter && !is_empty {\n            is_extension = true;\n        }\n \
    \       if is_extension {\n            extension.push(c);\n        }\n    }\n\
    \    if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_extension_valid = true;\n \
    \   }\n    if !is_extension_valid {\n        is_valid = false;\n    }\n    if\
    \ is_valid {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    let mut valid_name = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 {\n        valid_name = false;\n  \
    \  }\n    if dot_count != 1 {\n        valid_name = false;\n    }\n    if dot_index\
    \ == 0 {\n        valid_name = false;\n    }\n    if dot_index == file_name.len()\
    \ - 1 {\n        valid_name = false;\n    }\n    let prefix = &file_name[..dot_index];\n\
    \    let extension = &file_name[dot_index + 1..];\n    if prefix.len() == 0 {\n\
    \        valid_name = false;\n    }\n    if !prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_name = false;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid_name && valid_extension {\n        return String::from(\"Yes\");\n\
    \    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_letter_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension_start_index = 0;\n    let mut extension_end_index\
    \ = 0;\n    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n        }\n        if is_first_letter {\n            if c.is_alphabetic()\
    \ {\n                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            } else {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n        if i >= extension_start_index\
    \ {\n            extension.push(c);\n            extension_end_index = i;\n  \
    \      }\n    }\n    if extension_end_index - extension_start_index > 0 {\n  \
    \      if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            is_extension_valid = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !is_first_letter_valid || !is_extension_valid {\n \
    \       is_valid = false;\n    }\n    if is_valid {\n        String::from(\"Yes\"\
    )\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut letter_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut extension_index = 0;\n    let mut extension_length\
    \ = 0;\n    let mut extension_is_valid = false;\n    let mut extension_is_empty\
    \ = true;\n    let mut extension_is_txt = false;\n    let mut extension_is_exe\
    \ = false;\n    let mut extension_is_dll = false;\n    let mut file_name_is_valid\
    \ = true;\n    let mut file_name_is_empty = true;\n    let mut file_name_is_valid_length\
    \ = true;\n    let mut file_name_is_valid_letter = true;\n    let mut file_name_is_valid_extension\
    \ = true;\n    let mut file_name_is_valid_extension_length = true;\n    let mut\
    \ file_name_is_valid_extension_type = true;\n    let mut file_name_is_valid_extension_is_empty\
    \ = true;\n    let mut file_name_is_valid_extension_is_txt = true;\n    let mut\
    \ file_name_is_valid_extension_is_exe = true;\n    let mut file_name_is_valid_extension_is_dll\
    \ = true;\n    let mut file_name_is_valid_extension_is_not_txt = true;\n    let\
    \ mut file_name_is_valid_extension_is_not_exe = true;\n    let mut file_name_is_valid_extension_is_not_dll\
    \ = true;\n    let mut file_name_is_valid_extension_is_not_txt_or_exe = true;\n\
    \    let mut file_name_is_valid_extension_is_not_txt_or_dll = true;\n    let mut\
    \ file_name_is_valid_extension_is_not_exe_or_dll = true;\n    let mut file_name_is_valid_extension_is_not_txt_or_exe_or_dll\
    \ = true;\n    let mut file_name_is_valid_", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_dot = true;\n    let mut is_first_digit = true;\n\
    \    let mut is_first_letter_after_dot = true;\n    let mut is_first_digit_after_dot\
    \ = true;\n    let mut is_first_letter_after_digit = true;\n    let mut is_first_digit_after_letter\
    \ = true;\n    let mut is_first_letter_after_digit_after_dot = true;\n    let\
    \ mut is_first_digit_after_letter_after_dot = true;\n    let mut is_first_letter_after_digit_after_letter\
    \ = true;\n    let mut is_first_digit_after_letter_after_letter = true;\n    let\
    \ mut is_first_letter_after_digit_after_letter_after_dot = true;\n    let mut\
    \ is_first_digit_after_letter_after_letter_after_dot = true;\n    let mut is_first_letter_after_digit_after_letter_after_letter\
    \ = true;\n    let mut is_first_digit_after_letter_after_letter_after_letter =\
    \ true;\n    let mut is_first_letter_after_digit_after_letter_after_letter_after_dot\
    \ = true;\n    let mut is_first_digit_after_letter_after_letter_after_letter_after_dot\
    \ = true;\n    let mut is_first_letter_after_digit_after_letter_after_letter_after_letter\
    \ = true;\n    let mut is_first_digit_after_letter_after_letter_after_letter_after_letter\
    \ = true;\n    let mut is_first_letter_after_digit_after_letter_after_letter_after_letter_after_dot\
    \ = true;\n    let mut is_first_digit_after_letter_after_letter_after_letter_after_letter_after_dot\
    \ = true;\n    let mut is_first_letter_after_digit_after_letter_after_letter_after_letter_after_letter\
    \ =", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_valid_extension = false;\n    let mut extension\
    \ = String::new();\n    let mut file_name_without_extension = String::new();\n\
    \    let mut is_valid_file_name = false;\n    let mut is_valid_first_char = false;\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c == '.' {\n  \
    \          dot_count += 1;\n            if dot_count > 1 {\n                is_valid\
    \ = false;\n                break;\n            }\n            extension = file_name.chars().skip(i\
    \ + 1).collect();\n            file_name_without_extension = file_name.chars().take(i).collect();\n\
    \            if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n                is_valid_extension = true;\n            }\n        }\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n            if digits_count\
    \ > 3 {\n                is_valid = false;\n                break;\n         \
    \   }\n        }\n        if i == 0 {\n            if c.is_alphabetic() {\n  \
    \              is_valid_first_char = true;\n            }\n        }\n    }\n\
    \    if file_name_without_extension.len() > 0 {\n        is_valid_file_name =\
    \ true;\n    }\n    if is_valid_first_char && is_valid_file_name && is_valid_extension\
    \ && is_valid {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension_found = false;\n    let mut extension_valid = false;\n    let mut\
    \ extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_length\
    \ = 0;\n    let mut extension_string = String::new();\n    let mut file_name_valid\
    \ = true;\n    let mut file_name_length = file_name.len();\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut file_name_char = file_name_chars.next();\n\
    \    let mut file_name_char_as_int = 0;\n    let mut file_name_char_as_string\
    \ = String::new();\n    let mut file_name_char_as_string_as_int = 0;\n    let\
    \ mut file_name_char_as_string_as_int_as_char = '0';\n    let mut file_name_char_as_string_as_int_as_string\
    \ = String::new();\n    let mut file_name_char_as_string_as_int_as_string_as_int\
    \ = 0;\n    let mut file_name_char_as_string_as_int_as_string_as_int_as_char =\
    \ '0';\n    let mut file_name_char_as_string_as_int_as_string_as_int_as_string\
    \ = String::new();\n    let mut file_name_char_as_string_as_int_as_string_as_int_as_string_as_int\
    \ = 0;\n    let mut file_name_char_as_string_as_int_as_string_as_int_as_string_as_int_as_char\
    \ = '0';\n    let mut file_name_char_as_string_as_int_as_string_as_int_as_string_as_int_as_string\
    \ = String::new();\n    let mut file_name_char_as_string_as_int_as_string_as_int_as_string_as_int_as_string_as_int\
    \ = 0;\n   ", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n   \
    \ let mut dot_index = 0;\n    let mut first_letter_index = 0;\n    let mut last_letter_index\
    \ = 0;\n    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if c.is_alphabetic() {\n            if first_letter_index\
    \ == 0 {\n                first_letter_index = i;\n            }\n           \
    \ last_letter_index = i;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || first_letter_index == 0 || first_letter_index > dot_index {\n      \
    \  return String::from(\"No\");\n    }\n    extension = file_name[dot_index +\
    \ 1..].to_string();\n    if extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\" {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut extension = String::new();\n    let mut prefix = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid =\
    \ false;\n    }\n    let mut split = file_name.split('.');\n    prefix = split.next().unwrap().to_string();\n\
    \    extension = split.next().unwrap().to_string();\n    if prefix.len() == 0\
    \ {\n        is_valid = false;\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n \
    \   }\n    if is_valid && is_valid_extension && is_valid_prefix {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut extension_count =\
    \ 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n    let\
    \ mut extension_valid = false;\n    let mut extension_valid_count = 0;\n    let\
    \ mut extension_valid_start = 0;\n    let mut extension_valid_end = 0;\n    let\
    \ mut extension_valid_str = String::new();\n    let mut extension_valid_str_count\
    \ = 0;\n    let mut extension_valid_str_start = 0;\n    let mut extension_valid_str_end\
    \ = 0;\n    let mut extension_valid_str_valid = false;\n    let mut extension_valid_str_valid_count\
    \ = 0;\n    let mut extension_valid_str_valid_start = 0;\n    let mut extension_valid_str_valid_end\
    \ = 0;\n    let mut extension_valid_str_valid_str = String::new();\n    let mut\
    \ extension_valid_str_valid_str_count = 0;\n    let mut extension_valid_str_valid_str_start\
    \ = 0;\n    let mut extension_valid_str_valid_str_end = 0;\n    let mut extension_valid_str_valid_str_valid\
    \ = false;\n    let mut extension_valid_str_valid_str_valid_count = 0;\n    let\
    \ mut extension_valid_str_valid_str_valid_start = 0;\n    let mut extension_valid_str_valid_str_valid_end\
    \ = 0;\n    let mut extension_valid_str_valid_str_valid_str = String::new();\n\
    \    let mut extension_valid_str_valid_str_valid_str_count = 0;\n    let mut extension_valid_str_valid_str_valid_str_start\
    \ = 0;\n    let mut extension_valid_str_valid_str_valid_str_end = 0;\n    let\
    \ mut extension_valid_str_valid_str_valid_str_valid = false;\n    let mut extension_valid_str_valid_str_valid_str_valid_count\
    \ = 0;\n    let mut extension_valid_str_valid_str_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut extension_count = 0;\n    let\
    \ mut extension_start_index = 0;\n    let mut extension_end_index = 0;\n    let\
    \ mut extension_start_flag = false;\n    let mut extension_end_flag = false;\n\
    \    let mut extension_start_char = ' ';\n    let mut extension_end_char = ' ';\n\
    \    let mut extension_start_char_flag = false;\n    let mut extension_end_char_flag\
    \ = false;\n    let mut extension_start_char_index = 0;\n    let mut extension_end_char_index\
    \ = 0;\n    let mut extension_start_char_index_flag = false;\n    let mut extension_end_char_index_flag\
    \ = false;\n    let mut extension_start_char_index_flag_2 = false;\n    let mut\
    \ extension_end_char_index_flag_2 = false;\n    let mut extension_start_char_index_flag_3\
    \ = false;\n    let mut extension_end_char_index_flag_3 = false;\n    let mut\
    \ extension_start_char_index_flag_4 = false;\n    let mut extension_end_char_index_flag_4\
    \ = false;\n    let mut extension_start_char_index_flag_5 = false;\n    let mut\
    \ extension_end_char_index_flag_5 = false;\n    let mut extension_start_char_index_flag_6\
    \ = false;\n    let mut extension_end_char_index_flag_6 = false;\n    let mut\
    \ extension_start_char_index_flag_7 = false;\n    let mut extension_end_char_index_flag_7\
    \ = false;\n    let mut extension_start_char_index_flag_8 = false;\n    let mut\
    \ extension_end_char_index_flag_8 = false;\n    let mut extension_start_char_index_flag_9\
    \ = false;\n    let mut extension_end_char_index_flag_9 = false;\n    let mut\
    \ extension_start_char_index_flag_10 = false;\n    let mut extension_end_char_index_flag_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    let mut prefix_start = 0;\n\
    \    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut extension_length = 0;\n    let mut prefix_length = 0;\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n\
    \    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj =\
    \ 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut\
    \ nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n   \
    \ let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu =\
    \ 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut\
    \ yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n   \
    \ let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut extension\
    \ = String::new();\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut valid_name_start = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if dot_count\
    \ == 1 {\n            extension.push(c);\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if extension == \".txt\" ||\
    \ extension == \".exe\" || extension == \".dll\" {\n        valid_extension =\
    \ true;\n    }\n    if file_name.chars().next().unwrap().is_alphabetic() {\n \
    \       valid_name_start = true;\n    }\n    if valid_extension && valid_name_start\
    \ {\n        valid_name = true;\n    }\n    if valid_name {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot = true;\n\
    \    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid = false;\n\
    \    let mut is_first_letter_valid = false;\n    let mut is_before_dot_empty =\
    \ true;\n    let mut is_after_dot_empty = true;\n    let mut is_after_dot_txt\
    \ = false;\n    let mut is_after_dot_exe = false;\n    let mut is_after_dot_dll\
    \ = false;\n    let mut is_after_dot_txt_valid = false;\n    let mut is_after_dot_exe_valid\
    \ = false;\n    let mut is_after_dot_dll_valid = false;\n    let mut is_after_dot_txt_empty\
    \ = true;\n    let mut is_after_dot_exe_empty = true;\n    let mut is_after_dot_dll_empty\
    \ = true;\n    let mut is_after_dot_txt_valid_count = 0;\n    let mut is_after_dot_exe_valid_count\
    \ = 0;\n    let mut is_after_dot_dll_valid_count = 0;\n    let mut is_after_dot_txt_empty_count\
    \ = 0;\n    let mut is_after_dot_exe_empty_count = 0;\n    let mut is_after_dot_dll_empty_count\
    \ = 0;\n    let mut is_after_dot_txt_valid_count_valid = false;\n    let mut is_after_dot_exe_valid_count_valid\
    \ = false;\n    let mut is_after_dot_dll_valid_count_valid = false;\n    let mut\
    \ is_after_dot_txt_empty_count_valid = false;\n    let mut is_after_dot_exe_empty_count_valid\
    \ = false;\n    let mut is_after_dot_dll_empty_count_valid = false;\n    let mut\
    \ is_after_dot_", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut extension = String::new();\n    let mut name = String::new();\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            if i == 0 {\n                return String::from(\"No\");\n\
    \            }\n            extension = file_name.chars().skip(i + 1).collect();\n\
    \            name = file_name.chars().take(i).collect();\n        }\n    }\n \
    \   if digits_count > 3 {\n        return String::from(\"No\");\n    }\n    if\
    \ dot_count != 1 {\n        return String::from(\"No\");\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    if name.chars().next().unwrap().is_alphabetic() {\n    \
    \    valid_name = true;\n    }\n    if valid_extension && valid_name {\n     \
    \   return String::from(\"Yes\");\n    }\n    return String::from(\"No\");", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut extension_start = 0;\n\
    \    let mut extension_end = 0;\n    let mut name_start = 0;\n    let mut name_end\
    \ = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut\
    \ l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let\
    \ mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n   \
    \ let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n\
    \    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n\
    \    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n\
    \    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii =\
    \ 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut\
    \ mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n   \
    \ let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt =\
    \ 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut\
    \ xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n   \
    \ let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee =\
    \ 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh =", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_empty = true;\n    let mut is_first_letter = true;\n    let mut\
    \ is_extension_valid = false;\n    let mut extension_index = 0;\n    let mut extension_length\
    \ = 0;\n    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_index\
    \ = i + 1;\n        }\n        if is_first_letter && c.is_alphabetic() {\n   \
    \         is_empty = false;\n            is_first_letter = false;\n        }\n\
    \        if i > extension_index {\n            extension_length += 1;\n      \
    \  }\n    }\n    if digits_count > 3 || dot_count != 1 || is_empty {\n       \
    \ is_valid = false;\n    }\n    if extension_length == 3 {\n        extension\
    \ = file_name[extension_index..].to_string();\n        if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n            is_extension_valid\
    \ = true;\n        }\n    }\n    if is_valid && is_extension_valid {\n       \
    \ return String::from(\"Yes\");\n    }\n    return String::from(\"No\");", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut extension\
    \ = String::new();\n    let mut is_valid = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if dot_count\
    \ == 1 {\n            extension.push(c);\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !extension.ends_with(\"txt\") && !extension.ends_with(\"\
    exe\") && !extension.ends_with(\"dll\") {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut first_char = true;\n    let mut first_dot = true;\n    let mut first_part\
    \ = String::new();\n    let mut second_part = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            first_dot = false;\n\
    \        }\n        if first_dot {\n            first_part.push(c);\n        }\
    \ else {\n            second_part.push(c);\n        }\n        if first_char {\n\
    \            if !c.is_alphabetic() {\n                return String::from(\"No\"\
    );\n            }\n            first_char = false;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || first_part.is_empty() ||\n        !(second_part ==\
    \ \"txt\" || second_part == \"exe\" || second_part == \"dll\") {\n        return\
    \ String::from(\"No\");\n    }\n    return String::from(\"Yes\");", "    let mut\
    \ count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let\
    \ mut is_valid_ext = false;\n    let mut is_valid_name = false;\n    let mut is_valid_num\
    \ = true;\n    let mut is_valid_dot = false;\n    let mut is_valid_ext_count =\
    \ false;\n    let mut is_valid_name_count = false;\n    let mut is_valid_num_count\
    \ = true;\n    let mut is_valid_dot_count = false;\n    let mut is_valid_ext_count_count\
    \ = false;\n    let mut is_valid_name_count_count = false;\n    let mut is_valid_num_count_count\
    \ = true;\n    let mut is_valid_dot_count_count = false;\n    let mut is_valid_ext_count_count_count\
    \ = false;\n    let mut is_valid_name_count_count_count = false;\n    let mut\
    \ is_valid_num_count_count_count = true;\n    let mut is_valid_dot_count_count_count\
    \ = false;\n    let mut is_valid_ext_count_count_count_count = false;\n    let\
    \ mut is_valid_name_count_count_count_count = false;\n    let mut is_valid_num_count_count_count_count\
    \ = true;\n    let mut is_valid_dot_count_count_count_count = false;\n    let\
    \ mut is_valid_ext_count_count_count_count_count = false;\n    let mut is_valid_name_count_count_count_count_count\
    \ = false;\n    let mut is_valid_num_count_count_count_count_count = true;\n \
    \   let mut is_valid_dot_count_count_count_count_count = false;\n    let mut is_valid_ext_count_count_count_count_count_count\
    \ = false;\n    let mut is_valid_name_count_count_count_count_count_count = false;\n\
    \    let mut is_valid_num_count_count_count_count_count_count = true;\n    let\
    \ mut", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut prefix_start\
    \ = 0;\n    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let\
    \ mut extension_end = 0;\n    let mut i = 0;\n    while i < file_name.len() {\n\
    \        if file_name.chars().nth(i).unwrap().is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if file_name.chars().nth(i).unwrap() == '.' {\n  \
    \          dot_count += 1;\n            prefix_end = i;\n            extension_start\
    \ = i + 1;\n        }\n        if file_name.chars().nth(i).unwrap() == '.' &&\
    \ i == 0 {\n            return String::from(\"No\");\n        }\n        if file_name.chars().nth(i).unwrap()\
    \ == '.' && i == file_name.len() - 1 {\n            return String::from(\"No\"\
    );\n        }\n        if file_name.chars().nth(i).unwrap() == '.' && i != 0 &&\
    \ i != file_name.len() - 1 {\n            if file_name.chars().nth(i - 1).unwrap().is_digit(10)\
    \ {\n                return String::from(\"No\");\n            }\n        }\n\
    \        if file_name.chars().nth(i).unwrap() == '.' && i != 0 && i != file_name.len()\
    \ - 1 {\n            if file_name.chars().nth(i + 1).unwrap().is_digit(10) {\n\
    \                return String::from(\"No\");\n            }\n        }\n    \
    \    if file_name.chars().nth(i).unwrap() == '.' && i != 0 && i != file_name.len()\
    \ - 1 {\n            if file_name.chars().nth(i - 1).unwrap().is_digit(10) {\n\
    \                return String::from(\"No\");\n            }\n        }\n    \
    \    if file", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut dot_index = 0;\n    let mut extension_index = 0;\n    let mut extension_valid\
    \ = false;\n    let mut extension_valid_list = vec![\"txt\", \"exe\", \"dll\"\
    ];\n    let mut extension_valid_list_iter = extension_valid_list.iter();\n   \
    \ let mut extension_valid_list_iter_next = extension_valid_list_iter.next();\n\
    \    let mut extension_valid_list_iter_next_unwrap = extension_valid_list_iter_next.unwrap();\n\
    \    let mut extension_valid_list_iter_next_unwrap_chars = extension_valid_list_iter_next_unwrap.chars();\n\
    \    let mut extension_valid_list_iter_next_unwrap_chars_next = extension_valid_list_iter_next_unwrap_chars.next();\n\
    \    let mut extension_valid_list_iter_next_unwrap_chars_next_unwrap = extension_valid_list_iter_next_unwrap_chars_next.unwrap();\n\
    \    let mut extension_valid_list_iter_next_unwrap_chars_next_unwrap_eq = extension_valid_list_iter_next_unwrap_chars_next_unwrap.eq(&file_name.chars().nth(0).unwrap());\n\
    \    let mut extension_valid_list_iter_next_unwrap_chars_next_unwrap_eq_not =\
    \ extension_valid_list_iter_next_unwrap_chars_next_unwrap_eq.not();\n    let mut\
    \ extension_valid_list_iter_next_unwrap_chars_next_unwrap_eq_not_and = extension_valid_list_iter_next_unwrap_chars_next_unwrap_eq_not.and(file_name.chars().nth(0).unwrap().is_uppercase());\n\
    \    let mut extension_valid_list_iter_next_unwrap_chars_next_unwrap_eq_not_and_or\
    \ = extension_valid_list_iter_next_unwrap_", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut\
    \ valid_name = false;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut name_start = 0;\n    let mut name_end = 0;\n    let mut i\
    \ = 0;\n    while i < file_name.len() {\n        let c = file_name.chars().nth(i).unwrap();\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n            extension_start =\
    \ i + 1;\n        }\n        if c.is_alphabetic() {\n            name_end = i;\n\
    \            if !valid_name {\n                name_start = i;\n             \
    \   valid_name = true;\n            }\n        }\n        i += 1;\n    }\n   \
    \ if dot_count == 1 {\n        extension_end = file_name.len();\n        let extension\
    \ = &file_name[extension_start..extension_end];\n        if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if digits_count <= 3 && valid_extension && valid_name\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_digit = false;\n    let mut is_letter = false;\n    let mut is_dot\
    \ = false;\n    let mut is_ext = false;\n    let mut is_empty = true;\n    let\
    \ mut is_ext_valid = false;\n    let mut is_ext_empty = true;\n    let mut is_ext_letter\
    \ = false;\n    let mut is_ext_digit = false;\n    let mut is_ext_dot = false;\n\
    \    let mut is_ext_count = 0;\n    let mut is_ext_dot_count = 0;\n    let mut\
    \ is_ext_letter_count = 0;\n    let mut is_ext_digit_count = 0;\n    let mut is_ext_empty_count\
    \ = 0;\n    let mut is_empty_count = 0;\n    let mut is_letter_count = 0;\n  \
    \  let mut is_digit_count = 0;\n    let mut is_dot_count = 0;\n    let mut is_valid_count\
    \ = 0;\n    let mut is_ext_valid_count = 0;\n    let mut is_ext_empty_count =\
    \ 0;\n    let mut is_ext_letter_count = 0;\n    let mut is_ext_digit_count = 0;\n\
    \    let mut is_ext_dot_count = 0;\n    let mut is_ext_count = 0;\n    let mut\
    \ is_empty_count = 0;\n    let mut is_letter_count = 0;\n    let mut is_digit_count\
    \ = 0;\n    let mut is_dot_count = 0;\n    let mut is_valid_count = 0;\n    let\
    \ mut is_ext_valid_count = 0;\n    let mut is_ext_empty_count = 0;\n    let mut\
    \ is_ext_letter_count = 0;\n    let mut is_ext_digit_count = 0;\n    let mut is_ext_dot_count\
    \ = 0;\n    let mut is_ext_count = 0;\n    let mut is_empty_count = 0;\n    let\
    \ mut is_letter_count =", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_before_dot = true;\n    let\
    \ mut is_after_dot = false;\n    let mut is_before_dot_valid = false;\n    let\
    \ mut is_after_dot_valid = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_before_dot = false;\n            is_after_dot = true;\n\
    \        } else if c.is_digit(10) {\n            digits_count += 1;\n        }\
    \ else if is_before_dot {\n            if c.is_alphabetic() {\n              \
    \  is_before_dot_valid = true;\n            }\n        } else if is_after_dot\
    \ {\n            after_dot_str.push(c);\n        }\n    }\n    if after_dot_str\
    \ == \"txt\" || after_dot_str == \"exe\" || after_dot_str == \"dll\" {\n     \
    \   is_after_dot_valid = true;\n    }\n    if digits_count > 3 || dot_count !=\
    \ 1 || !is_before_dot_valid || !is_after_dot_valid {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_first_letter = true;\n    let mut is_first_dot\
    \ = true;\n    let mut is_first_after_dot = true;\n    let mut is_valid_after_dot\
    \ = false;\n    let mut is_valid_before_dot = false;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_file_name = false;\n    let mut is_valid_first_letter\
    \ = false;\n    let mut is_valid_first_after_dot = false;\n    let mut is_valid_first_dot\
    \ = false;\n    let mut is_valid_digits_count = false;\n    let mut is_valid_dot_count\
    \ = false;\n    let mut is_valid_extension_count = false;\n    let mut is_valid_extension_length\
    \ = false;\n    let mut is_valid_before_dot_length = false;\n    let mut is_valid_after_dot_length\
    \ = false;\n    let mut is_valid_file_name_length = false;\n    let mut is_valid_file_name_length_range\
    \ = false;\n    let mut is_valid_before_dot_length_range = false;\n    let mut\
    \ is_valid_after_dot_length_range = false;\n    let mut is_valid_extension_length_range\
    \ = false;\n    let mut is_valid_file_name_length_range = false;\n    let mut\
    \ is_valid_first_letter_range = false;\n    let mut is_valid_first_after_dot_range\
    \ = false;\n    let mut is_valid_first_dot_range = false;\n    let mut is_valid_digits_count_range\
    \ = false;\n    let mut is_valid_dot_count_range = false;\n    let mut is_valid_extension_count_range\
    \ = false;\n    let mut is_valid_file_name_length_range = false;\n    let mut\
    \ is_valid_before_dot_length_range = false;\n    let mut is_valid_after_dot_length_range\
    \ = false;\n    let mut is", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_letter = true;\n    let mut is_first_letter_valid = false;\n    let\
    \ mut is_extension_valid = false;\n    let mut extension = String::new();\n  \
    \  for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n\
    \            digits_count += 1;\n        }\n        if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n        if is_first_letter\
    \ {\n            if c.is_ascii_alphabetic() {\n                is_first_letter_valid\
    \ = true;\n                is_first_letter = false;\n            } else {\n  \
    \              is_valid = false;\n                break;\n            }\n    \
    \    }\n    }\n    if is_valid {\n        if digits_count > 3 {\n            is_valid\
    \ = false;\n        }\n        if dot_count != 1 {\n            is_valid = false;\n\
    \        }\n        if !is_first_letter_valid {\n            is_valid = false;\n\
    \        }\n        if is_valid {\n            extension = file_name[dot_index\
    \ + 1..].to_string();\n            if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n                is_extension_valid = true;\n\
    \            }\n            if !is_extension_valid {\n                is_valid\
    \ = false;\n            }\n        }\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut extension = String::new();\n \
    \   let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut valid_digits = true;\n    let mut valid_dot = true;\n    let mut valid_extension_count\
    \ = true;\n    let mut valid_name_count = true;\n    let mut valid_name_start\
    \ = true;\n    let mut valid_name_end = true;\n    let mut valid_extension_start\
    \ = true;\n    let mut valid_extension_end = true;\n    let mut valid_extension_char\
    \ = true;\n    let mut valid_name_char = true;\n    let mut valid_extension_length\
    \ = true;\n    let mut valid_name_length = true;\n    let mut valid_extension_type\
    \ = true;\n    let mut valid_name_type = true;\n    let mut valid_extension_type_count\
    \ = true;\n    let mut valid_name_type_count = true;\n    let mut valid_extension_type_start\
    \ = true;\n    let mut valid_name_type_start = true;\n    let mut valid_extension_type_end\
    \ = true;\n    let mut valid_name_type_end = true;\n    let mut valid_extension_type_char\
    \ = true;\n    let mut valid_name_type_char = true;\n    let mut valid_extension_type_length\
    \ = true;\n    let mut valid_name_type_length = true;\n    let mut valid_extension_type_type\
    \ = true;\n    let mut valid_name_type_type = true;\n    let mut valid_extension_type_type_count\
    \ = true;\n    let mut valid_name_type_type_count = true;\n    let mut valid_extension_type_type_start\
    \ = true;\n    let mut valid_name_type_type_start = true;\n    let mut valid_extension_type_type_end\
    \ = true;\n    let mut valid_name_type_type_end = true;\n    let mut valid_extension_type_type_char\
    \ = true;", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_empty = true;\n    let mut is_letter =\
    \ false;\n    let mut is_extension = false;\n    let mut extension = String::new();\n\
    \    let mut file_name_iter = file_name.chars();\n    while let Some(c) = file_name_iter.next()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            is_empty = false;\n\
    \            is_letter = false;\n            is_extension = true;\n        } else\
    \ if c.is_alphabetic() {\n            is_letter = true;\n            is_empty\
    \ = false;\n            is_extension = false;\n        } else {\n            is_valid\
    \ = false;\n            break;\n        }\n        if is_extension {\n       \
    \     extension.push(c);\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || is_empty || !is_letter || !is_extension ||\n        !(extension == \"\
    txt\" || extension == \"exe\" || extension == \"dll\") {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits = 0;\n    let mut dot_count\
    \ = 0;\n    let mut has_letter = false;\n    let mut has_dot = false;\n    let\
    \ mut has_ext = false;\n    let mut ext = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n            has_dot = true;\n     \
    \   } else if c.is_alphabetic() {\n            has_letter = true;\n        }\n\
    \        if has_dot && !has_ext {\n            ext.push(c);\n        }\n    }\n\
    \    if digits > 3 || dot_count != 1 || !has_letter || !has_dot || !has_ext {\n\
    \        return String::from(\"No\");\n    }\n    let ext = ext.trim_start_matches('.');\n\
    \    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_after_first_letter = false;\n    let mut is_after_first_dot =\
    \ false;\n    let mut is_after_second_dot = false;\n    let mut is_after_third_dot\
    \ = false;\n    let mut is_after_fourth_dot = false;\n    let mut is_after_fifth_dot\
    \ = false;\n    let mut is_after_sixth_dot = false;\n    let mut is_after_seventh_dot\
    \ = false;\n    let mut is_after_eighth_dot = false;\n    let mut is_after_ninth_dot\
    \ = false;\n    let mut is_after_tenth_dot = false;\n    let mut is_after_eleventh_dot\
    \ = false;\n    let mut is_after_twelfth_dot = false;\n    let mut is_after_thirteenth_dot\
    \ = false;\n    let mut is_after_fourteenth_dot = false;\n    let mut is_after_fifteenth_dot\
    \ = false;\n    let mut is_after_sixteenth_dot = false;\n    let mut is_after_seventeenth_dot\
    \ = false;\n    let mut is_after_eighteenth_dot = false;\n    let mut is_after_nineteenth_dot\
    \ = false;\n    let mut is_after_twentieth_dot = false;\n    let mut is_after_twenty_first_dot\
    \ = false;\n    let mut is_after_twenty_second_dot = false;\n    let mut is_after_twenty_third_dot\
    \ = false;\n    let mut is_after_twenty_fourth_dot = false;\n    let mut is_after_twenty_fifth_dot\
    \ = false;\n    let mut is_after_twenty_sixth_dot = false;\n    let mut is_after_twenty_seventh_dot\
    \ = false;\n    let mut is_after_twenty_eighth", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digit =\
    \ true;\n    let mut is_valid_dot = true;\n    let mut extension = String::new();\n\
    \    let mut prefix = String::new();\n    let mut extension_valid_list = vec![\"\
    txt\", \"exe\", \"dll\"];\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n    }\n    if digits_count > 3 {\n        is_valid_digit\
    \ = false;\n    }\n    if dot_count != 1 {\n        is_valid_dot = false;\n  \
    \  }\n    if !is_valid_digit || !is_valid_dot {\n        is_valid = false;\n \
    \   }\n    if is_valid {\n        let mut split_file_name = file_name.split('.');\n\
    \        prefix = split_file_name.next().unwrap().to_string();\n        extension\
    \ = split_file_name.next().unwrap().to_string();\n        if prefix.len() == 0\
    \ {\n            is_valid_prefix = false;\n        } else {\n            for c\
    \ in prefix.chars() {\n                if !c.is_alphabetic() {\n             \
    \       is_valid_prefix = false;\n                    break;\n               \
    \ }\n            }\n        }\n        for ext in extension_valid_list.iter()\
    \ {\n            if ext == &extension {\n                is_valid_extension =\
    \ true;\n                break;\n            }\n        }\n        if !is_valid_prefix\
    \ || !is_valid_extension {\n            is_valid = false;\n        }\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut\
    \ has_letter = false;\n    let mut has_dot = false;\n    let mut has_extension\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_ascii_digit() {\n            digits += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            has_dot = true;\n  \
    \      } else if c.is_ascii_alphabetic() {\n            has_letter = true;\n \
    \       }\n    }\n    if has_dot {\n        let mut split = file_name.split('.');\n\
    \        let first = split.next().unwrap();\n        extension = split.next().unwrap().to_string();\n\
    \        if first.len() > 0 && first.chars().next().unwrap().is_ascii_alphabetic()\
    \ {\n            has_extension = true;\n        }\n    }\n    if digits > 3 ||\
    \ dot_count != 1 || !has_letter || !has_extension {\n        return String::from(\"\
    No\");\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension_valid = false;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut extension_length = 0;\n    let mut extension_valid_length\
    \ = 0;\n    let mut extension_valid_start = 0;\n    let mut extension_valid_end\
    \ = 0;\n    let mut extension_valid_count = 0;\n    let mut extension_valid_valid\
    \ = false;\n    let mut extension_valid_valid_count = 0;\n    let mut extension_valid_valid_start\
    \ = 0;\n    let mut extension_valid_valid_end = 0;\n    let mut extension_valid_valid_length\
    \ = 0;\n    let mut extension_valid_valid_valid = false;\n    let mut extension_valid_valid_valid_count\
    \ = 0;\n    let mut extension_valid_valid_valid_start = 0;\n    let mut extension_valid_valid_valid_end\
    \ = 0;\n    let mut extension_valid_valid_valid_length = 0;\n    let mut extension_valid_valid_valid_valid\
    \ = false;\n    let mut extension_valid_valid_valid_valid_count = 0;\n    let\
    \ mut extension_valid_valid_valid_valid_start = 0;\n    let mut extension_valid_valid_valid_valid_end\
    \ = 0;\n    let mut extension_valid_valid_valid_valid_length = 0;\n    let mut\
    \ extension_valid_valid_valid_valid_valid = false;\n    let mut extension_valid_valid_valid_valid_valid_count\
    \ = 0;\n    let mut extension_valid_valid_valid_valid_valid_start = 0;\n    let\
    \ mut extension_valid_valid_valid_valid_valid_end = 0;\n    let mut extension_valid_valid_valid_valid_valid_length\
    \ = 0;\n    let mut extension_valid_valid_valid_valid_valid_valid = false;\n \
    \   let mut extension_valid_valid_valid_valid_valid_valid_count = 0;\n    let\
    \ mut extension_valid_valid_valid_valid_valid_valid_start = 0;\n    let mut extension_valid_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut substring_after_dot = String::new();\n    let mut substring_before_dot\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    let mut dot_index = 0;\n    for\
    \ (i, c) in file_name.chars().enumerate() {\n        if c == '.' {\n         \
    \   dot_index = i;\n            break;\n        }\n    }\n    for c in file_name.chars().take(dot_index)\
    \ {\n        if c.is_alphabetic() {\n            is_substring_before_dot_valid\
    \ = true;\n            substring_before_dot.push(c);\n        }\n    }\n    for\
    \ c in file_name.chars().skip(dot_index + 1) {\n        substring_after_dot.push(c);\n\
    \    }\n    if substring_after_dot == \"txt\" || substring_after_dot == \"exe\"\
    \ || substring_after_dot == \"dll\" {\n        is_substring_after_dot_valid =\
    \ true;\n    }\n    if is_substring_before_dot_valid && is_substring_after_dot_valid\
    \ {\n        is_valid = true;\n    } else {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        return String::from(\"Yes\");\n    } else {\n    \
    \    return String::from(\"No\");\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_letter_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = true;\n        }\n        if is_first_letter {\n            if c.is_alphabetic()\
    \ {\n                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            }\n        }\n        if c == '.' {\n            is_first_letter\
    \ = true;\n        }\n        if is_first_letter {\n            if c.is_alphabetic()\
    \ {\n                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            }\n        }\n        if !is_first_letter {\n        \
    \    extension.push(c);\n        }\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_extension_valid = true;\n \
    \   }\n    if digits_count > 3 || dot_count != 1 || !is_first_letter_valid ||\
    \ !is_extension_valid {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        let (prefix, suffix) = file_name.split_at(dot_index);\n\
    \        if prefix.is_empty() || !prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if suffix != \".txt\" &&\
    \ suffix != \".exe\" && suffix != \".dll\" {\n            is_valid = false;\n\
    \        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut has_extension\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            has_letter = true;\n        } else if c.is_alphanumeric() {\n\
    \            extension.push(c);\n        }\n    }\n    if digits_count > 3 ||\
    \ dot_count != 1 || !has_letter {\n        return String::from(\"No\");\n    }\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        has_extension = true;\n    }\n    if has_extension {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_dot_found = false;\n    let mut is_valid_extension = false;\n\
    \    let mut is_valid_prefix = false;\n    let mut is_valid_prefix_start = false;\n\
    \    let mut is_valid_prefix_end = false;\n    let mut is_valid_extension_start\
    \ = false;\n    let mut is_valid_extension_end = false;\n    let mut prefix_start\
    \ = 0;\n    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let\
    \ mut extension_end = 0;\n    let mut extension_length = 0;\n    let mut prefix_length\
    \ = 0;\n    let mut extension_index = 0;\n    let mut prefix_index = 0;\n    let\
    \ mut extension_string = String::new();\n    let mut prefix_string = String::new();\n\
    \    let mut extension_chars = vec![];\n    let mut prefix_chars = vec![];\n \
    \   let mut extension_chars_copy = vec![];\n    let mut prefix_chars_copy = vec![];\n\
    \    let mut extension_chars_copy_2 = vec![];\n    let mut prefix_chars_copy_2\
    \ = vec![];\n    let mut extension_chars_copy_3 = vec![];\n    let mut prefix_chars_copy_3\
    \ = vec![];\n    let mut extension_chars_copy_4 = vec![];\n    let mut prefix_chars_copy_4\
    \ = vec![];\n    let mut extension_chars_copy_5 = vec![];\n    let mut prefix_chars_copy_5\
    \ = vec![];\n    let mut extension_chars_copy_6 = vec![];\n    let mut prefix_chars_copy_6\
    \ = vec![];\n    let mut extension_chars_copy_7 = vec![];\n    let mut prefix_chars_copy_7\
    \ = vec![];\n    let mut extension_chars_copy_8 = vec![];\n    let mut prefix_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_char_letter = false;\n\
    \    let mut is_last_char_letter = false;\n    let mut is_last_char_digit = false;\n\
    \    let mut is_last_char_dot = false;\n    let mut is_last_char_ext = false;\n\
    \    let mut is_ext_valid = false;\n    let mut is_first_char_digit = false;\n\
    \    let mut is_first_char_dot = false;\n    let mut is_first_char_ext = false;\n\
    \    let mut is_ext_empty = false;\n    let mut is_ext_too_long = false;\n   \
    \ let mut is_ext_too_short = false;\n    let mut is_ext_too_short_or_too_long\
    \ = false;\n    let mut is_name_too_long = false;\n    let mut is_name_too_short\
    \ = false;\n    let mut is_name_too_short_or_too_long = false;\n    let mut is_name_empty\
    \ = false;\n    let mut is_name_valid = false;\n    let mut is_ext_valid_length\
    \ = false;\n    let mut is_name_valid_length = false;\n    let mut is_name_valid_first_char\
    \ = false;\n    let mut is_ext_valid_first_char = false;\n    let mut is_ext_valid_last_char\
    \ = false;\n    let mut is_name_valid_last_char = false;\n    let mut is_name_valid_char\
    \ = false;\n    let mut is_ext_valid_char = false;\n    let mut is_name_valid_char_count\
    \ = false;\n    let mut is_ext_valid_char_count = false;\n    let mut is_name_valid_char_count_and_first_char\
    \ = false;\n    let mut is_ext_valid_char_count_and_first_char = false;\n    let\
    \ mut is_name_valid_char_count_and_last_char =", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut before_dot = false;\n    let mut after_dot\
    \ = false;\n    let mut valid_extension = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            before_dot =\
    \ true;\n        }\n        if before_dot && !after_dot && c != '.' {\n      \
    \      after_dot = true;\n        }\n        if after_dot && !valid_extension\
    \ {\n            if c == 't' {\n                valid_extension = true;\n    \
    \        }\n            if c == 'e' {\n                valid_extension = true;\n\
    \            }\n            if c == 'd' {\n                valid_extension = true;\n\
    \            }\n        }\n    }\n    if digits_count > 3 || dot_count != 1 ||\
    \ !valid_extension {\n        return String::from(\"No\");\n    }\n    return\
    \ String::from(\"Yes\");", "    let mut count = 0;\n    let mut dot_count = 0;\n\
    \    let mut is_valid = true;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n        }\n    }\n    if count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        let mut is_valid = true;\n     \
    \   let mut is_valid_extension = false;\n        let mut is_valid_prefix = false;\n\
    \        let mut prefix = String::new();\n        let mut extension = String::new();\n\
    \        for c in file_name.chars() {\n            if c == '.' {\n           \
    \     is_valid = false;\n            }\n            if is_valid {\n          \
    \      prefix.push(c);\n            } else {\n                extension.push(c);\n\
    \            }\n        }\n        if prefix.len() == 0 {\n            is_valid_prefix\
    \ = false;\n        } else {\n            let mut is_valid_prefix = true;\n  \
    \          for c in prefix.chars() {\n                if !c.is_alphabetic() {\n\
    \                    is_valid_prefix = false;\n                }\n           \
    \ }\n        }\n        if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n            is_valid_extension = true;\n        }\n        if\
    \ !is_valid_prefix || !is_valid_extension {\n            is_valid = false;\n \
    \       }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid\
    \ = false;\n    let mut is_ext_valid = false;\n    let mut is_substring_valid\
    \ = false;\n    let mut is_substring_empty = true;\n    let mut is_substring_start_with_letter\
    \ = false;\n    let mut is_substring_end_with_letter = false;\n    let mut is_substring_end_with_digit\
    \ = false;\n    let mut is_substring_end_with_dot = false;\n    let mut is_substring_end_with_underscore\
    \ = false;\n    let mut is_substring_end_with_hyphen = false;\n    let mut is_substring_end_with_space\
    \ = false;\n    let mut is_substring_end_with_other_char = false;\n    let mut\
    \ is_substring_end_with_special_char = false;\n    let mut is_substring_end_with_special_char_or_digit\
    \ = false;\n    let mut is_substring_end_with_special_char_or_digit_or_letter\
    \ = false;\n    let mut is_substring_end_with_special_char_or_digit_or_letter_or_space\
    \ = false;\n    let mut is_substring_end_with_special_char_or_digit_or_letter_or_space_or_other_char\
    \ = false;\n    let mut is_substring_end_with_special_char_or_digit_or_letter_or_space_or_other_char_or_dot\
    \ = false;\n    let mut is_substring_end_with_special_char_or_digit_or_letter_or_space_or_other_char_or_dot_or_underscore\
    \ = false;\n    let mut is_substring_end_with_special_char_or_digit_or_letter_or_space_or_other_char_or_dot_or_underscore_or_hyphen\
    \ = false;\n    let mut is_substring_end_with_special_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_name = false;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut name_start = 0;\n    let mut name_end = 0;\n    for (i, c)\
    \ in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n          \
    \  digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension_start = i + 1;\n        }\n        if dot_count\
    \ == 1 {\n            extension_end = i;\n        }\n        if c == '.' && i\
    \ != 0 {\n            name_end = i;\n            name_start = i - 1;\n       \
    \ }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n\
    \    if file_name.chars().nth(name_start).unwrap().is_alphabetic() {\n       \
    \ valid_name = true;\n    }\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    if valid_name && valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n\
    \    let mut is_extension = false;\n    let mut extension = String::new();\n \
    \   let mut extension_count = 0;\n    let mut extension_index = 0;\n    let mut\
    \ extension_length = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut extension_valid = false;\n    let mut extension_valid_count\
    \ = 0;\n    let mut extension_valid_index = 0;\n    let mut extension_valid_length\
    \ = 0;\n    let mut extension_valid_start = 0;\n    let mut extension_valid_end\
    \ = 0;\n    let mut extension_valid_string = String::new();\n    let mut extension_valid_string_length\
    \ = 0;\n    let mut extension_valid_string_index = 0;\n    let mut extension_valid_string_start\
    \ = 0;\n    let mut extension_valid_string_end = 0;\n    let mut extension_valid_string_char\
    \ = ' ';\n    let mut extension_valid_string_char_ascii = 0;\n    let mut extension_valid_string_char_ascii_index\
    \ = 0;\n    let mut extension_valid_string_char_ascii_start = 0;\n    let mut\
    \ extension_valid_string_char_ascii_end = 0;\n    let mut extension_valid_string_char_ascii_valid\
    \ = false;\n    let mut extension_valid_string_char_ascii_valid_count = 0;\n \
    \   let mut extension_valid_string_char_ascii_valid_index = 0;\n    let mut extension_valid_string_char_ascii_valid_length\
    \ = 0;\n    let mut extension_valid_string_char_ascii_valid_start = 0;\n    let\
    \ mut extension_valid_string_char_ascii_valid_end = 0;\n    let mut extension_valid_string_char_ascii_valid_string\
    \ = String::new();\n    let mut", "    let mut digits = 0;\n    let mut dot_found\
    \ = false;\n    let mut extension_found = false;\n    let mut extension = String::new();\n\
    \    let mut extension_valid = false;\n    let mut name_valid = false;\n    let\
    \ mut name = String::new();\n    for c in file_name.chars() {\n        if c ==\
    \ '.' {\n            dot_found = true;\n            if name.is_empty() {\n   \
    \             return String::from(\"No\");\n            }\n            if !name_valid\
    \ {\n                return String::from(\"No\");\n            }\n        } else\
    \ if c.is_digit(10) {\n            digits += 1;\n            if digits > 3 {\n\
    \                return String::from(\"No\");\n            }\n        } else if\
    \ c.is_alphabetic() {\n            if dot_found {\n                extension.push(c);\n\
    \            } else {\n                name.push(c);\n                name_valid\
    \ = true;\n            }\n        } else {\n            return String::from(\"\
    No\");\n        }\n    }\n    if !dot_found {\n        return String::from(\"\
    No\");\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        extension_valid = true;\n    }\n    if extension_valid\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot\
    \ = true;\n    let mut is_first_letter_after_dot = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if is_first_letter\
    \ {\n            if !c.is_alphabetic() {\n                is_valid = false;\n\
    \                break;\n            }\n            is_first_letter = false;\n\
    \        }\n        if is_first_dot {\n            if c == '.' {\n           \
    \     is_first_dot = false;\n            }\n        } else {\n            if is_first_letter_after_dot\
    \ {\n                if !c.is_alphabetic() {\n                    is_valid = false;\n\
    \                    break;\n                }\n                is_first_letter_after_dot\
    \ = false;\n            }\n            extension.push(c);\n        }\n    }\n\
    \    if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n \
    \   }\n    if is_valid && is_valid_extension {\n        String::from(\"Yes\")\n\
    \    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_ext = false;\n    let mut\
    \ valid_name = false;\n    let mut valid_name_start = false;\n    let mut valid_name_end\
    \ = false;\n    let mut valid_ext_start = false;\n    let mut valid_ext_end =\
    \ false;\n    let mut name_start = 0;\n    let mut name_end = 0;\n    let mut\
    \ ext_start = 0;\n    let mut ext_end = 0;\n    let mut i = 0;\n    while i <\
    \ file_name.len() {\n        let c = file_name.chars().nth(i).unwrap();\n    \
    \    if c == '.' {\n            dot_count += 1;\n            if dot_count == 1\
    \ {\n                name_end = i;\n                ext_start = i + 1;\n     \
    \       }\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            if !valid_name_start {\n \
    \               valid_name_start = true;\n                name_start = i;\n  \
    \          }\n            valid_name_end = true;\n        }\n        i += 1;\n\
    \    }\n    if dot_count == 1 && digits_count <= 3 {\n        valid_name = true;\n\
    \    }\n    if valid_name_start && valid_name_end {\n        valid_name = true;\n\
    \    }\n    if valid_name {\n        let ext = &file_name[ext_start..];\n    \
    \    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n            valid_ext\
    \ = true;\n        }\n    }\n    if valid_name && valid_ext {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_valid_extension = false;\n    let mut is_valid_prefix = false;\n\
    \    let mut is_valid_prefix_start = false;\n    let mut is_valid_prefix_end =\
    \ false;\n    let mut is_valid_extension_start = false;\n    let mut is_valid_extension_end\
    \ = false;\n    let mut is_valid_extension_length = false;\n    let mut is_valid_prefix_length\
    \ = false;\n    let mut is_valid_dot_count = false;\n    let mut is_valid_digits_count\
    \ = false;\n    let mut is_valid_prefix_digit_count = false;\n    let mut is_valid_extension_digit_count\
    \ = false;\n    let mut is_valid_prefix_dot_count = false;\n    let mut is_valid_extension_dot_count\
    \ = false;\n    let mut is_valid_prefix_letter_count = false;\n    let mut is_valid_extension_letter_count\
    \ = false;\n    let mut is_valid_prefix_letter_start = false;\n    let mut is_valid_extension_letter_start\
    \ = false;\n    let mut is_valid_prefix_letter_end = false;\n    let mut is_valid_extension_letter_end\
    \ = false;\n    let mut prefix_letter_count = 0;\n    let mut extension_letter_count\
    \ = 0;\n    let mut prefix_dot_count = 0;\n    let mut extension_dot_count = 0;\n\
    \    let mut prefix_digit_count = 0;\n    let mut extension_digit_count = 0;\n\
    \    let mut prefix_start = 0;\n    let mut prefix_end = 0;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut prefix_length = 0;\n    let\
    \ mut extension_length = 0;\n    let mut dot_index = 0;\n    let mut extension_index\
    \ = 0;\n    let mut prefix_index = 0;\n    let mut extension_index_start = 0;\n\
    \   ", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    } else {\n        let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \        if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        } else if !(after_dot == \".txt\"\
    \ || after_dot == \".exe\" || after_dot == \".dll\") {\n            is_valid =\
    \ false;\n        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n\
    \    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut extension = String::new();\n \
    \   let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut valid_file_name = true;\n    let mut i = 0;\n    while i < file_name.len()\
    \ {\n        let c = file_name.chars().nth(i).unwrap();\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n        if dot_count == 1 {\n            extension.push(c);\n\
    \        }\n        if dot_count > 1 {\n            valid_file_name = false;\n\
    \            break;\n        }\n        i += 1;\n    }\n    if digits_count >\
    \ 3 {\n        valid_file_name = false;\n    }\n    if extension == \".txt\" ||\
    \ extension == \".exe\" || extension == \".dll\" {\n        valid_extension =\
    \ true;\n    }\n    if file_name.chars().nth(0).unwrap().is_alphabetic() {\n \
    \       valid_name = true;\n    }\n    if valid_file_name && valid_extension &&\
    \ valid_name {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_first_letter = true;\n        }\n        if is_first_letter {\n   \
    \         if c.is_alphabetic() {\n                is_first_letter_valid = true;\n\
    \                is_first_letter = false;\n            }\n        }\n        if\
    \ dot_count == 1 {\n            extension.push(c);\n        }\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        is_extension_valid\
    \ = true;\n    }\n    if digits_count > 3 || dot_count != 1 || !is_first_letter_valid\
    \ || !is_extension_valid {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut valid = true;\n    let mut valid_extension = false;\n    let\
    \ mut valid_prefix = false;\n    let mut valid_digits = true;\n    let mut valid_dot\
    \ = false;\n    let mut valid_length = true;\n    let mut valid_extension_length\
    \ = true;\n    let mut valid_prefix_length = true;\n    let mut valid_extension_chars\
    \ = true;\n    let mut valid_prefix_chars = true;\n    let mut valid_extension_chars_count\
    \ = 0;\n    let mut valid_prefix_chars_count = 0;\n    let mut valid_extension_chars_index\
    \ = 0;\n    let mut valid_prefix_chars_index = 0;\n    let mut valid_extension_chars_index_end\
    \ = 0;\n    let mut valid_prefix_chars_index_end = 0;\n    let mut valid_extension_chars_index_start\
    \ = 0;\n    let mut valid_prefix_chars_index_start = 0;\n    let mut valid_extension_chars_index_start_end\
    \ = 0;\n    let mut valid_prefix_chars_index_start_end = 0;\n    let mut valid_extension_chars_index_end_start\
    \ = 0;\n    let mut valid_prefix_chars_index_end_start = 0;\n    let mut valid_extension_chars_index_end_end\
    \ = 0;\n    let mut valid_prefix_chars_index_end_end = 0;\n    let mut valid_extension_chars_index_start_start\
    \ = 0;\n    let mut valid_prefix_chars_index_start_start = 0;\n    let mut valid_extension_chars_index_start_start_end\
    \ = 0;\n    let mut valid_prefix_chars_index_start_start_end = 0;\n    let mut\
    \ valid_extension_chars_index_start_end_start = 0;\n    let mut valid_prefix_chars_index_start_end_start\
    \ =", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_substring_valid = false;\n    let mut is_substring_empty\
    \ = true;\n    let mut is_substring_start_with_letter = false;\n    let mut is_substring_end_with_valid_extension\
    \ = false;\n    let mut is_substring_end_with_valid_extension_count = 0;\n   \
    \ let mut is_substring_end_with_valid_extension_index = 0;\n    let mut is_substring_end_with_valid_extension_index_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count =\
    \ 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n   \
    \         digits += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n        }\n    }\n    if digits > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    let file_name_split: Vec<&str> = file_name.split('.').collect();\n\
    \    if file_name_split[0].is_empty() || !file_name_split[0].chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if file_name_split[1] != \"txt\" &&\
    \ file_name_split[1] != \"exe\" && file_name_split[1] != \"dll\" {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut count_digits = 0;\n  \
    \  let mut count_dots = 0;\n    let mut is_valid = true;\n    let mut is_valid_substring\
    \ = false;\n    let mut is_valid_substring_after_dot = false;\n    let mut is_valid_substring_before_dot\
    \ = false;\n    let mut is_valid_substring_before_dot_char = false;\n    let mut\
    \ is_valid_substring_after_dot_char = false;\n    let mut is_valid_substring_after_dot_char_1\
    \ = false;\n    let mut is_valid_substring_after_dot_char_2 = false;\n    let\
    \ mut is_valid_substring_after_dot_char_3 = false;\n    let mut is_valid_substring_after_dot_char_4\
    \ = false;\n    let mut is_valid_substring_after_dot_char_5 = false;\n    let\
    \ mut is_valid_substring_after_dot_char_6 = false;\n    let mut is_valid_substring_after_dot_char_7\
    \ = false;\n    let mut is_valid_substring_after_dot_char_8 = false;\n    let\
    \ mut is_valid_substring_after_dot_char_9 = false;\n    let mut is_valid_substring_after_dot_char_10\
    \ = false;\n    let mut is_valid_substring_after_dot_char_11 = false;\n    let\
    \ mut is_valid_substring_after_dot_char_12 = false;\n    let mut is_valid_substring_after_dot_char_13\
    \ = false;\n    let mut is_valid_substring_after_dot_char_14 = false;\n    let\
    \ mut is_valid_substring_after_dot_char_15 = false;\n    let mut is_valid_substring_after_dot_char_16\
    \ = false;\n    let mut is_valid_substring_after_dot_char_17 = false;\n    let\
    \ mut is_valid_substring_after_dot_char_18 = false;\n    let mut is_valid_substring_after_dot_char_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_before_dot_valid = false;\n    let mut is_after_dot_valid = false;\n\
    \    let mut is_after_dot_valid_txt = false;\n    let mut is_after_dot_valid_exe\
    \ = false;\n    let mut is_after_dot_valid_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n        }\n        if is_before_dot\
    \ {\n            if c.is_alphabetic() {\n                is_before_dot_valid =\
    \ true;\n            }\n        }\n        if is_after_dot {\n            if c\
    \ == 't' {\n                is_after_dot_valid_txt = true;\n            }\n  \
    \          if c == 'e' {\n                is_after_dot_valid_exe = true;\n   \
    \         }\n            if c == 'd' {\n                is_after_dot_valid_dll\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 {\n      \
    \  is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if\
    \ is_after_dot_valid_txt || is_after_dot_valid_exe || is_after_dot_valid_dll {\n\
    \        is_after_dot_valid = true;\n    }\n    if !is_after_dot_valid {\n   \
    \     is_valid = false;\n    }\n    if is_valid {\n        String::from(\"Yes\"\
    )\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_before_dot = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_digit = false;\n\
    \    let mut is_letter = false;\n    let mut is_dot = false;\n    let mut is_valid_extension\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            is_digit = true;\n            is_letter\
    \ = false;\n            is_dot = false;\n        } else if c.is_alphabetic() {\n\
    \            is_digit = false;\n            is_letter = true;\n            is_dot\
    \ = false;\n        } else if c == '.' {\n            is_digit = false;\n    \
    \        is_letter = false;\n            is_dot = true;\n        } else {\n  \
    \          is_valid = false;\n            break;\n        }\n        if is_before_dot\
    \ {\n            if is_digit {\n                digits_count += 1;\n         \
    \   }\n            if is_letter {\n                is_before_dot_valid = true;\n\
    \            }\n            if is_dot {\n                dot_count += 1;\n   \
    \             is_before_dot = false;\n                is_after_dot = true;\n \
    \           }\n        } else if is_after_dot {\n            if is_letter {\n\
    \                extension.push(c);\n            }\n            if is_dot {\n\
    \                dot_count += 1;\n            }\n            if is_digit {\n \
    \               is_after_dot_valid = true;\n            }\n        }\n    }\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        is_valid_extension = true;\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || !is_before_dot_valid || is_after_dot_valid || !is_valid_extension {",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_before_dot_valid = false;\n    let mut is_after_dot_valid = false;\n\
    \    let mut is_after_dot_valid_txt = false;\n    let mut is_after_dot_valid_exe\
    \ = false;\n    let mut is_after_dot_valid_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n        }\n        if is_before_dot\
    \ {\n            if c.is_alphabetic() {\n                is_before_dot_valid =\
    \ true;\n            }\n        }\n        if is_after_dot {\n            if c\
    \ == 't' {\n                is_after_dot_valid_txt = true;\n            }\n  \
    \          if c == 'e' {\n                is_after_dot_valid_exe = true;\n   \
    \         }\n            if c == 'd' {\n                is_after_dot_valid_dll\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 {\n      \
    \  is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if\
    \ is_after_dot_valid_txt {\n        is_after_dot_valid = true;\n    }\n    if\
    \ is_after_dot_valid_exe {\n        is_after_dot_valid = true;\n    }\n    if\
    \ is_after_dot_valid_dll {\n        is_after_dot_valid = true;\n    }\n    if\
    \ !is_after_dot_valid {\n        is_valid = false;\n    }\n    if is_valid", " \
    \   let mut count_digits = 0;\n    let mut count_dots = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n\
    \    let mut is_first_char_after_dot = true;\n    let mut is_second_char_after_dot\
    \ = false;\n    let mut is_third_char_after_dot = false;\n    let mut is_fourth_char_after_dot\
    \ = false;\n    let mut is_fifth_char_after_dot = false;\n    let mut is_sixth_char_after_dot\
    \ = false;\n    let mut is_seventh_char_after_dot = false;\n    let mut is_eighth_char_after_dot\
    \ = false;\n    let mut is_ninth_char_after_dot = false;\n    let mut is_tenth_char_after_dot\
    \ = false;\n    let mut is_eleventh_char_after_dot = false;\n    let mut is_twelfth_char_after_dot\
    \ = false;\n    let mut is_thirteenth_char_after_dot = false;\n    let mut is_fourteenth_char_after_dot\
    \ = false;\n    let mut is_fifteenth_char_after_dot = false;\n    let mut is_sixteenth_char_after_dot\
    \ = false;\n    let mut is_seventeenth_char_after_dot = false;\n    let mut is_eighteenth_char_after_dot\
    \ = false;\n    let mut is_nineteenth_char_after_dot = false;\n    let mut is_twentieth_char_after_dot\
    \ = false;\n    let mut is_twenty_first_char_after_dot = false;\n    let mut is_twenty_second_char_after_dot\
    \ = false;\n    let mut is_twenty_third_char_after_dot = false;\n    let mut is_twenty_fourth_char_after_dot\
    \ = false;\n    let mut is_twenty_fifth_char_after_dot = false;\n    let mut is_twenty_sixth_char_after_dot\
    \ = false;\n    let", "    let mut count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_digit = false;\n    let mut is_letter\
    \ = false;\n    let mut is_dot = false;\n    let mut is_extension = false;\n \
    \   let mut is_empty = true;\n    let mut is_extension_valid = false;\n    let\
    \ mut extension = String::new();\n    let mut extension_valid = vec![\"txt\",\
    \ \"exe\", \"dll\"];\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n            is_digit = true;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            is_dot = true;\n  \
    \      }\n        if c.is_alphabetic() {\n            is_letter = true;\n    \
    \    }\n        if c == '.' {\n            is_extension = true;\n        }\n \
    \       if is_extension {\n            extension.push(c);\n        }\n       \
    \ if is_extension && c == '.' {\n            is_empty = false;\n        }\n  \
    \  }\n    if count > 3 {\n        is_valid = false;\n    }\n    if dot_count !=\
    \ 1 {\n        is_valid = false;\n    }\n    if !is_digit {\n        is_valid\
    \ = false;\n    }\n    if !is_letter {\n        is_valid = false;\n    }\n   \
    \ if !is_dot {\n        is_valid = false;\n    }\n    if is_empty {\n        is_valid\
    \ = false;\n    }\n    for i in extension_valid {\n        if extension == i {\n\
    \            is_extension_valid = true;\n        }\n    }\n    if !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_letter = true;\n    let mut is_first_dot = true;\n    let mut is_first_letter_after_dot\
    \ = true;\n    let mut is_first_letter_after_dot_valid = false;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_first_dot_valid = false;\n    let mut is_first_letter_after_dot_valid_count\
    \ = 0;\n    let mut is_first_letter_valid_count = 0;\n    let mut is_first_dot_valid_count\
    \ = 0;\n    let mut is_first_letter_after_dot_valid_count_valid = false;\n   \
    \ let mut is_first_letter_valid_count_valid = false;\n    let mut is_first_dot_valid_count_valid\
    \ = false;\n    let mut is_first_letter_after_dot_valid_count_valid_count = 0;\n\
    \    let mut is_first_letter_valid_count_valid_count = 0;\n    let mut is_first_dot_valid_count_valid_count\
    \ = 0;\n    let mut is_first_letter_after_dot_valid_count_valid_count_valid =\
    \ false;\n    let mut is_first_letter_valid_count_valid_count_valid = false;\n\
    \    let mut is_first_dot_valid_count_valid_count_valid = false;\n    let mut\
    \ is_first_letter_after_dot_valid_count_valid_count_valid_count = 0;\n    let\
    \ mut is_first_letter_valid_count_valid_count_valid_count = 0;\n    let mut is_first_dot_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_letter_after_dot_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_first_letter_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_first_dot_valid_count_valid_count_valid_", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n    let\
    \ mut is_extension_valid = false;\n    let mut extension = String::new();\n  \
    \  for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n         \
    \   is_first_letter = false;\n            is_first_dot = false;\n        } else\
    \ if c.is_alphabetic() {\n            if is_first_letter {\n                is_first_letter\
    \ = false;\n            } else {\n                is_valid = false;\n        \
    \        break;\n            }\n        } else {\n            is_valid = false;\n\
    \            break;\n        }\n        if !is_first_dot {\n            extension.push(c);\n\
    \        }\n    }\n    if is_valid && digits_count <= 3 && dot_count == 1 {\n\
    \        is_extension_valid = extension == \"txt\" || extension == \"exe\" ||\
    \ extension == \"dll\";\n    }\n    if is_valid && is_extension_valid {\n    \
    \    String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }",
  "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut first_letter =\
    \ false;\n    let mut last_three = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            first_letter = true;\n        }\n        if dot_count == 1 {\n\
    \            last_three.push(c);\n        }\n    }\n    if digits > 3 || dot_count\
    \ != 1 || !first_letter || last_three != \".txt\" && last_three != \".exe\" &&\
    \ last_three != \".dll\" {\n        return String::from(\"No\");\n    }\n    return\
    \ String::from(\"Yes\");", "    let mut digits = 0;\n    let mut dot_count = 0;\n\
    \    let mut dot_index = 0;\n    let mut first_char = false;\n    let mut last_char\
    \ = false;\n    let mut last_char_index = 0;\n    let mut last_char_index_2 =\
    \ 0;\n    let mut last_char_index_3 = 0;\n    let mut last_char_index_4 = 0;\n\
    \    let mut last_char_index_5 = 0;\n    let mut last_char_index_6 = 0;\n    let\
    \ mut last_char_index_7 = 0;\n    let mut last_char_index_8 = 0;\n    let mut\
    \ last_char_index_9 = 0;\n    let mut last_char_index_10 = 0;\n    let mut last_char_index_11\
    \ = 0;\n    let mut last_char_index_12 = 0;\n    let mut last_char_index_13 =\
    \ 0;\n    let mut last_char_index_14 = 0;\n    let mut last_char_index_15 = 0;\n\
    \    let mut last_char_index_16 = 0;\n    let mut last_char_index_17 = 0;\n  \
    \  let mut last_char_index_18 = 0;\n    let mut last_char_index_19 = 0;\n    let\
    \ mut last_char_index_20 = 0;\n    let mut last_char_index_21 = 0;\n    let mut\
    \ last_char_index_22 = 0;\n    let mut last_char_index_23 = 0;\n    let mut last_char_index_24\
    \ = 0;\n    let mut last_char_index_25 = 0;\n    let mut last_char_index_26 =\
    \ 0;\n    let mut last_char_index_27 = 0;\n    let mut last_char_index_28 = 0;\n\
    \    let mut last_char_index_29 = 0;\n    let mut last_char_index_30 = 0;\n  \
    \  let mut last_char_index_31 = 0;\n    let mut last_char_index_32 = 0;\n    let\
    \ mut last_char_index_33 = 0;\n    let mut", "    let mut dot_count = 0;\n   \
    \ let mut digit_count = 0;\n    let mut valid_extension = false;\n    let mut\
    \ valid_prefix = false;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut prefix_start = 0;\n    let mut prefix_end = 0;\n    let mut\
    \ i = 0;\n    for c in file_name.chars() {\n        if c == '.' {\n          \
    \  dot_count += 1;\n            extension_start = i + 1;\n        } else if c.is_digit(10)\
    \ {\n            digit_count += 1;\n        } else if c.is_alphabetic() {\n  \
    \          prefix_end = i;\n            if !valid_prefix {\n                valid_prefix\
    \ = true;\n                prefix_start = i;\n            }\n        }\n     \
    \   i += 1;\n    }\n    extension_end = i;\n    if dot_count == 1 && digit_count\
    \ <= 3 && valid_prefix {\n        let extension = &file_name[extension_start..extension_end];\n\
    \        let prefix = &file_name[prefix_start..prefix_end];\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n        if valid_extension && prefix.len() > 0 {\n     \
    \       return String::from(\"Yes\");\n        }\n    }\n    String::from(\"No\"\
    )", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut first_letter = false;\n    let mut last_letter = false;\n\
    \    let mut last_three = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n  \
    \      }\n        if i == 0 && c.is_alphabetic() {\n            first_letter =\
    \ true;\n        }\n        if i == file_name.len() - 1 && c.is_alphabetic() {\n\
    \            last_letter = true;\n        }\n        if i > file_name.len() -\
    \ 4 {\n            last_three.push(c);\n        }\n    }\n    if digits > 3 ||\
    \ dot_count != 1 || !first_letter || !last_letter || dot_index == 0 || \n    \
    \    dot_index == file_name.len() - 1 || last_three != \"txt\" && last_three !=\
    \ \"exe\" && \n        last_three != \"dll\" {\n        return String::from(\"\
    No\");\n    }\n    String::from(\"Yes\")", "    // TODO: Implement the function\
    \ here\n    String::from(\"No\")", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_before_dot = true;\n\
    \    let mut is_after_dot = false;\n    let mut is_before_dot_valid = false;\n\
    \    let mut is_after_dot_valid = false;\n    let mut is_after_dot_valid_txt =\
    \ false;\n    let mut is_after_dot_valid_exe = false;\n    let mut is_after_dot_valid_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_before_dot = false;\n            is_after_dot = true;\n\
    \        }\n        if is_before_dot {\n            if c.is_alphabetic() {\n \
    \               is_before_dot_valid = true;\n            }\n        }\n      \
    \  if is_after_dot {\n            if c == 't' {\n                is_after_dot_valid_txt\
    \ = true;\n            }\n            if c == 'e' {\n                is_after_dot_valid_exe\
    \ = true;\n            }\n            if c == 'd' {\n                is_after_dot_valid_dll\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 {\n      \
    \  is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if\
    \ is_after_dot_valid_txt {\n        is_after_dot_valid = true;\n    }\n    if\
    \ is_after_dot_valid_exe {\n        is_after_dot_valid = true;\n    }\n    if\
    \ is_after_dot_valid_dll {\n        is_after_dot_valid = true;\n    }\n    if\
    \ !is_after_dot_valid {\n        is_valid = false;\n    }\n    if is_valid", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_letter\
    \ = false;\n    let mut last_three_letters = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if !first_letter\
    \ && c.is_alphabetic() {\n            first_letter = true;\n        }\n      \
    \  if c.is_alphabetic() {\n            last_three_letters.push(c);\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 || !first_letter || !(last_three_letters\
    \ == \"txt\" || last_three_letters == \"exe\" || last_three_letters == \"dll\"\
    ) {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut name_start = false;\n\
    \    let mut extension_start = false;\n    let mut extension_end = false;\n  \
    \  let mut name_end = false;\n    let mut extension = String::new();\n    let\
    \ mut name = String::new();\n    for c in file_name.chars() {\n        if c ==\
    \ '.' {\n            dot_count += 1;\n            name_end = true;\n         \
    \   extension_start = true;\n        } else if c.is_digit(10) {\n            digit_count\
    \ += 1;\n        } else if c.is_alphabetic() {\n            if !name_start {\n\
    \                name_start = true;\n            }\n            if name_end {\n\
    \                extension.push(c);\n            } else {\n                name.push(c);\n\
    \            }\n        }\n    }\n    if dot_count == 1 && digit_count <= 3 &&\
    \ name_start && name_end {\n        valid_name = true;\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    if valid_name && valid_extension {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut extension_valid = false;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut name_start\
    \ = 0;\n    let mut name_end = 0;\n    let mut name_valid = false;\n    let mut\
    \ name_empty = true;\n    let mut name_starts_with_letter = false;\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension_start = i + 1;\n        } else if c == '0' || c\
    \ == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7'\
    \ || c == '8' || c == '9' {\n            digits_count += 1;\n        } else if\
    \ c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c ==\
    \ 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm'\
    \ || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c\
    \ == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z'\
    \ || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c\
    \ == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c == 'L' || c == 'M'\
    \ || c == 'N' || c == 'O' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c\
    \ == 'T' || c == 'U' ||", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid_extension = false;\n    let mut valid_name = false;\n\
    \    let mut extension = String::new();\n    let mut name = String::new();\n \
    \   for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n    }\n    if dot_count == 1 {\n        let mut dot_index = 0;\n      \
    \  for (i, c) in file_name.chars().enumerate() {\n            if c == '.' {\n\
    \                dot_index = i;\n                break;\n            }\n     \
    \   }\n        name = file_name[..dot_index].to_string();\n        extension =\
    \ file_name[dot_index+1..].to_string();\n        valid_extension = extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\";\n        valid_name\
    \ = !name.is_empty() && name.chars().next().unwrap().is_alphabetic();\n    }\n\
    \    if digits_count <= 3 && dot_count == 1 && valid_extension && valid_name {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_first_letter_valid = false;\n    let mut is_extension_valid = false;\n\
    \    let mut extension_index = 0;\n    let mut extension_length = 0;\n    let\
    \ mut is_extension_empty = true;\n    let mut is_extension_txt = false;\n    let\
    \ mut is_extension_exe = false;\n    let mut is_extension_dll = false;\n    let\
    \ mut is_extension_txt_valid = false;\n    let mut is_extension_exe_valid = false;\n\
    \    let mut is_extension_dll_valid = false;\n    let mut is_extension_valid_count\
    \ = 0;\n    let mut is_extension_valid_count_valid = false;\n    let mut is_extension_valid_count_valid_count\
    \ = 0;\n    let mut is_extension_valid_count_valid_count_valid = false;\n    let\
    \ mut is_extension_valid_count_valid_count_valid_count = 0;\n    let mut is_extension_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_extension_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_extension_valid_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_extension_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_extension_valid_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_extension_valid_count_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_extension_valid_count_valid_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut extension_index = 0;\n    let\
    \ mut extension_valid = false;\n    let mut extension_valid_list = vec![\"txt\"\
    , \"exe\", \"dll\"];\n    let mut extension_valid_list_iter = extension_valid_list.iter();\n\
    \    let mut extension_valid_list_iter_mut = extension_valid_list.iter_mut();\n\
    \    let mut extension_valid_list_iter_mut_next = extension_valid_list_iter_mut.next();\n\
    \    let mut extension_valid_list_iter_mut_next_unwrap = extension_valid_list_iter_mut_next.unwrap();\n\
    \    let mut extension_valid_list_iter_mut_next_unwrap_chars = extension_valid_list_iter_mut_next_unwrap.chars();\n\
    \    let mut extension_valid_list_iter_mut_next_unwrap_chars_next = extension_valid_list_iter_mut_next_unwrap_chars.next();\n\
    \    let mut extension_valid_list_iter_mut_next_unwrap_chars_next_unwrap = extension_valid_list_iter_mut_next_unwrap_chars_next.unwrap();\n\
    \    let mut extension_valid_list_iter_mut_next_unwrap_chars_next_unwrap_to_string\
    \ = extension_valid_list_iter_mut_next_unwrap_chars_next_unwrap.to_string();\n\
    \    let mut extension_valid_list_iter_mut_next_unwrap_chars_next_unwrap_to_string_chars\
    \ = extension_valid_list_iter_mut_next_unwrap_chars_next_unwrap_to_string.chars();\n\
    \    let mut extension_valid_list_iter_mut_next_unwrap_chars_next_unwrap_to_string_chars_next\
    \ = extension_valid_list_iter_mut_next_unwrap_chars_next_unwrap_to_string_chars.next();\n\
    \    let mut extension_valid_list_", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut extension_count = 0;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut extension_valid = false;\n\
    \    let mut extension_valid_list = vec![\"txt\", \"exe\", \"dll\"];\n    let\
    \ mut extension_valid_list_iter = extension_valid_list.iter();\n    let mut extension_valid_list_iter_mut\
    \ = extension_valid_list.iter_mut();\n    let mut extension_valid_list_iter_mut_next\
    \ = extension_valid_list_iter_mut.next();\n    let mut extension_valid_list_iter_mut_next_mut\
    \ = extension_valid_list_iter_mut_next.as_mut();\n    let mut extension_valid_list_iter_mut_next_mut_deref\
    \ = extension_valid_list_iter_mut_next_mut.as_mut().unwrap();\n    let mut extension_valid_list_iter_mut_next_mut_deref_deref\
    \ = extension_valid_list_iter_mut_next_mut_deref.as_mut();\n    let mut extension_valid_list_iter_mut_next_mut_deref_deref_deref\
    \ = extension_valid_list_iter_mut_next_mut_deref_deref.as_mut().unwrap();\n  \
    \  let mut extension_valid_list_iter_mut_next_mut_deref_deref_deref_deref = extension_valid_list_iter_mut_next_mut_deref_deref_deref.as_mut().unwrap();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_deref_deref_deref_deref_deref\
    \ = extension_valid_list_iter_mut_next_mut_deref_deref_deref_deref.as_mut().unwrap();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_deref_deref_deref_dere", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n\
    \    let mut is_after_dot = false;\n    let mut is_before_dot = true;\n    let\
    \ mut is_after_dot_valid = false;\n    let mut is_before_dot_valid = false;\n\
    \    let mut is_before_dot_empty = true;\n    let mut is_after_dot_empty = true;\n\
    \    let mut is_before_dot_start_with_letter = false;\n    let mut is_after_dot_start_with_letter\
    \ = false;\n    let mut is_after_dot_start_with_digit = false;\n    let mut is_before_dot_start_with_digit\
    \ = false;\n    let mut is_before_dot_end_with_digit = false;\n    let mut is_after_dot_end_with_digit\
    \ = false;\n    let mut is_before_dot_end_with_letter = false;\n    let mut is_after_dot_end_with_letter\
    \ = false;\n    let mut is_before_dot_end_with_dot = false;\n    let mut is_after_dot_end_with_dot\
    \ = false;\n    let mut is_before_dot_end_with_underscore = false;\n    let mut\
    \ is_after_dot_end_with_underscore = false;\n    let mut is_before_dot_end_with_dash\
    \ = false;\n    let mut is_after_dot_end_with_dash = false;\n    let mut is_before_dot_end_with_space\
    \ = false;\n    let mut is_after_dot_end_with_space = false;\n    let mut is_before_dot_end_with_special_char\
    \ = false;\n    let mut is_after_dot_end_with_special_char = false;\n    let mut\
    \ is_before_dot_contain_special_char = false;\n    let mut is_after_dot_contain_special_char\
    \ = false;\n    let mut is_before_dot_", "    let mut count_digits = 0;\n    let\
    \ mut count_dots = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut extension = String::new();\n\
    \    let mut prefix = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            count_digits += 1;\n        }\n\
    \        if c == '.' {\n            count_dots += 1;\n            if i == 0 {\n\
    \                is_valid = false;\n            }\n        }\n        if count_digits\
    \ > 3 {\n            is_valid = false;\n        }\n        if count_dots > 1 {\n\
    \            is_valid = false;\n        }\n    }\n    if count_dots == 1 {\n \
    \       let mut split = file_name.split('.');\n        prefix = split.next().unwrap().to_string();\n\
    \        extension = split.next().unwrap().to_string();\n        if prefix.len()\
    \ > 0 {\n            if prefix.chars().next().unwrap().is_alphabetic() {\n   \
    \             is_valid_prefix = true;\n            }\n        }\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_valid_extension\
    \ = true;\n        }\n    }\n    if is_valid && is_valid_extension && is_valid_prefix\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    } else {\n        let (sub_str_1, sub_str_2) = file_name.split_at(dot_index);\n\
    \        if sub_str_1.is_empty() || !sub_str_1.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        } else if sub_str_2 != \".txt\" &&\
    \ sub_str_2 != \".exe\" && sub_str_2 != \".dll\" {\n            is_valid = false;\n\
    \        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid =\
    \ true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let (before_dot,\
    \ after_dot) = file_name.split_at(dot_index);\n    if before_dot.is_empty() ||\
    \ !before_dot.chars().next().unwrap().is_alphabetic() {\n        is_valid = false;\n\
    \    }\n    if after_dot != \".txt\" && after_dot != \".exe\" && after_dot !=\
    \ \".dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_before_dot = true;\n    let mut is_after_dot = false;\n    let mut is_after_dot_valid\
    \ = false;\n    let mut is_before_dot_valid = false;\n    let mut is_before_dot_valid_first_char\
    \ = false;\n    let mut is_before_dot_valid_other_chars = false;\n    let mut\
    \ is_after_dot_valid_first_char = false;\n    let mut is_after_dot_valid_other_chars\
    \ = false;\n    let mut is_after_dot_valid_last_char = false;\n    let mut is_after_dot_valid_second_last_char\
    \ = false;\n    let mut is_after_dot_valid_third_last_char = false;\n    let mut\
    \ is_after_dot_valid_fourth_last_char = false;\n    let mut is_after_dot_valid_fifth_last_char\
    \ = false;\n    let mut is_after_dot_valid_sixth_last_char = false;\n    let mut\
    \ is_after_dot_valid_seventh_last_char = false;\n    let mut is_after_dot_valid_eighth_last_char\
    \ = false;\n    let mut is_after_dot_valid_ninth_last_char = false;\n    let mut\
    \ is_after_dot_valid_tenth_last_char = false;\n    let mut is_after_dot_valid_eleventh_last_char\
    \ = false;\n    let mut is_after_dot_valid_twelfth_last_char = false;\n    let\
    \ mut is_after_dot_valid_thirteenth_last_char = false;\n    let mut is_after_dot_valid_fourteenth_last_char\
    \ = false;\n    let mut is_after_dot_valid_fifteenth_last_char = false;\n    let\
    \ mut is_after_dot_valid_sixteenth_last_char = false;\n    let mut is_after_dot_valid_seventeenth_last_char\
    \ = false;\n    let mut", "    let mut digits = 0;\n    let mut dot_count = 0;\n\
    \    let mut extension = String::new();\n    let mut file_name_without_extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n        }\n    }\n    if digits > 3 || dot_count != 1 {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_index = 0;\n    for (i, c) in\
    \ file_name.chars().enumerate() {\n        if c == '.' {\n            dot_index\
    \ = i;\n            break;\n        }\n    }\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if i < dot_index {\n            file_name_without_extension.push(c);\n\
    \        }\n        if i > dot_index {\n            extension.push(c);\n     \
    \   }\n    }\n    if file_name_without_extension.is_empty() || !file_name_without_extension.chars().next().unwrap().is_alphabetic()\
    \ {\n        return String::from(\"No\");\n    }\n    if extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\" {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n\
    \    let mut is_valid_extension_length = true;\n    let mut is_valid_prefix_length\
    \ = true;\n    let mut is_valid_prefix_start = true;\n    let mut is_valid_prefix_end\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_extension_end\
    \ = true;\n    let mut is_valid_extension_char = true;\n    let mut is_valid_prefix_char\
    \ = true;\n    let mut is_valid_extension_char_count = true;\n    let mut is_valid_prefix_char_count\
    \ = true;\n    let mut is_valid_extension_char_count_1 = true;\n    let mut is_valid_prefix_char_count_1\
    \ = true;\n    let mut is_valid_extension_char_count_2 = true;\n    let mut is_valid_prefix_char_count_2\
    \ = true;\n    let mut is_valid_extension_char_count_3 = true;\n    let mut is_valid_prefix_char_count_3\
    \ = true;\n    let mut is_valid_extension_char_count_4 = true;\n    let mut is_valid_prefix_char_count_4\
    \ = true;\n    let mut is_valid_extension_char_count_5 = true;\n    let mut is_valid_prefix_char_count_5\
    \ = true;\n    let mut is_valid_extension_char_count_6 = true;\n    let mut is_valid_prefix_char_count_6\
    \ = true;\n    let mut is_valid_extension_char_count_7 = true;\n    let mut is_valid_prefix_char_count_7\
    \ = true;\n    let mut is_valid_extension_char_count", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut substring_after_dot = String::new();\n    let mut substring_before_dot\
    \ = String::new();\n    let mut is_substring_before_dot_empty = true;\n    let\
    \ mut is_substring_after_dot_empty = true;\n    let mut is_substring_before_dot_starts_with_letter\
    \ = false;\n    let mut is_substring_after_dot_starts_with_letter = false;\n \
    \   let mut is_substring_before_dot_starts_with_digit = false;\n    let mut is_substring_after_dot_starts_with_digit\
    \ = false;\n    let mut is_substring_before_dot_starts_with_symbol = false;\n\
    \    let mut is_substring_after_dot_starts_with_symbol = false;\n    let mut is_substring_before_dot_starts_with_whitespace\
    \ = false;\n    let mut is_substring_after_dot_starts_with_whitespace = false;\n\
    \    let mut is_substring_before_dot_starts_with_uppercase_letter = false;\n \
    \   let mut is_substring_after_dot_starts_with_uppercase_letter = false;\n   \
    \ let mut is_substring_before_dot_starts_with_lowercase_letter = false;\n    let\
    \ mut is_substring_after_dot_starts_with_lowercase_letter = false;\n    let mut\
    \ is_substring_before_dot_contains_uppercase_letter = false;\n    let mut is_substring_after_dot_contains_uppercase_letter\
    \ = false;\n    let mut is_substring_before_dot_contains_lowercase_letter = false;\n\
    \    let mut is_substring_after_dot_contains_lowercase_letter = false;\n    let\
    \ mut is_", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        }\n    }\n    if digits_count > 3 || dot_count !=\
    \ 1 {\n        is_valid = false;\n    }\n    let mut split = file_name.split('.');\n\
    \    let first = split.next().unwrap();\n    let second = split.next().unwrap();\n\
    \    if first.len() == 0 || !first.chars().next().unwrap().is_alphabetic() {\n\
    \        is_valid = false;\n    }\n    if second != \"txt\" && second != \"exe\"\
    \ && second != \"dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n \
    \   }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut prefix_start\
    \ = 0;\n    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let\
    \ mut extension_end = 0;\n    let mut extension_length = 0;\n    let mut prefix_length\
    \ = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut\
    \ l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let\
    \ mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n   \
    \ let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n\
    \    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n\
    \    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n\
    \    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii =\
    \ 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut\
    \ mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n   \
    \ let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt =\
    \ 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut\
    \ xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n   \
    \ let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee =\
    \ 0;\n    let mut", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n    let\
    \ mut is_valid = true;\n    let mut is_valid_extension = false;\n    let mut extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            is_before_dot = false;\n            is_after_dot\
    \ = true;\n        }\n        if is_after_dot {\n            extension.push(c);\n\
    \        }\n        if is_before_dot && !c.is_alphabetic() {\n            is_valid\
    \ = false;\n        }\n        if is_after_dot && !c.is_alphanumeric() {\n   \
    \         is_valid = false;\n        }\n    }\n    if digits_count > 3 {\n   \
    \     is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if extension == \".txt\" || extension == \".exe\" || extension ==\
    \ \".dll\" {\n        is_valid_extension = true;\n    }\n    if is_valid && is_valid_extension\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut valid_extension = false;\n    let mut valid_name = false;\n    let mut extension\
    \ = String::new();\n    let mut name = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            extension\
    \ = file_name[i+1..].to_string();\n            name = file_name[..i].to_string();\n\
    \        }\n        if c.is_ascii_digit() {\n            digits_count += 1;\n\
    \        }\n    }\n    if digits_count <= 3 {\n        valid_name = true;\n  \
    \  }\n    if dot_count == 1 {\n        if extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\" {\n            valid_extension = true;\n   \
    \     }\n    }\n    if valid_name && valid_extension && !name.is_empty() && name.chars().next().unwrap().is_ascii_alphabetic()\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut valid_extension = false;\n    let mut valid_name = false;\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    let extension = &file_name[dot_index\
    \ + 1..];\n    if extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\" {\n        valid_extension = true;\n    }\n    let name = &file_name[..dot_index];\n\
    \    if name.len() > 0 && name.chars().next().unwrap().is_alphabetic() {\n   \
    \     valid_name = true;\n    }\n    if valid_extension && valid_name {\n    \
    \    return String::from(\"Yes\");\n    }\n    return String::from(\"No\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension = file_name[i+1..].to_string();\n\
    \        }\n        if i == 0 {\n            is_first_char_valid = c.is_alphabetic();\n\
    \        }\n        if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n            is_extension_valid = true;\n        }\n    }\n   \
    \ if digits_count > 3 || dot_count != 1 || !is_first_char_valid || !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let file_name_chars:\
    \ Vec<char> = file_name.chars().collect();\n    let mut digit_count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut extension =\
    \ String::new();\n    let mut file_name_without_extension = String::new();\n \
    \   for (i, c) in file_name_chars.iter().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digit_count += 1;\n        }\n        if c == &'.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digit_count\
    \ > 3 || dot_count != 1 {\n        return String::from(\"No\");\n    }\n    for\
    \ i in 0..dot_index {\n        file_name_without_extension.push(file_name_chars[i]);\n\
    \    }\n    for i in dot_index + 1..file_name_chars.len() {\n        extension.push(file_name_chars[i]);\n\
    \    }\n    if file_name_without_extension.is_empty() || !file_name_without_extension.chars().next().unwrap().is_alphabetic()\
    \ {\n        return String::from(\"No\");\n    }\n    if extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\" {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        let (before_dot, after_dot) = file_name.split_at(dot_index);\n      \
    \  if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if after_dot != \".txt\"\
    \ && after_dot != \".exe\" && after_dot != \".dll\" {\n            is_valid =\
    \ false;\n        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n\
    \    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_empty = true;\n    let mut is_first_letter = true;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = true;\n        }\n        if c.is_alphabetic() {\n            is_empty = false;\n\
    \            if is_first_letter {\n                is_first_letter = false;\n\
    \                if c.is_lowercase() {\n                    extension.push(c);\n\
    \                } else {\n                    is_valid = false;\n           \
    \         break;\n                }\n            } else {\n                extension.push(c);\n\
    \            }\n        }\n    }\n    if digits_count > 3 || dot_count != 1 ||\
    \ is_empty {\n        is_valid = false;\n    }\n    if extension == \"txt\" ||\
    \ extension == \"exe\" || extension == \"dll\" {\n        is_extension_valid =\
    \ true;\n    }\n    if is_valid && is_extension_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_after_dot_valid_txt\
    \ = false;\n    let mut is_after_dot_valid_exe = false;\n    let mut is_after_dot_valid_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_before_dot = false;\n            is_after_dot = true;\n\
    \        }\n        if is_before_dot {\n            if c.is_alphabetic() {\n \
    \               is_before_dot_valid = true;\n            }\n        }\n      \
    \  if is_after_dot {\n            if c == 't' {\n                is_after_dot_valid_txt\
    \ = true;\n            }\n            if c == 'e' {\n                is_after_dot_valid_exe\
    \ = true;\n            }\n            if c == 'd' {\n                is_after_dot_valid_dll\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 {\n      \
    \  is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if\
    \ is_after_dot_valid_txt {\n        is_after_dot_valid = true;\n    }\n    if\
    \ is_after_dot_valid_exe {\n        is_after_dot_valid = true;\n    }\n    if\
    \ is_after_dot_valid_dll {\n        is_after_dot_valid = true;\n    }\n    if\
    \ !is_after_dot_valid {\n        is_valid = false;\n    }\n    if is_valid", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut extension_count\
    \ = 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n   \
    \ let mut extension_str = String::new();\n    let mut extension_str_len = 0;\n\
    \    let mut extension_str_start = 0;\n    let mut extension_str_end = 0;\n  \
    \  let mut extension_str_valid = false;\n    let mut extension_str_valid_count\
    \ = 0;\n    let mut extension_str_valid_start = 0;\n    let mut extension_str_valid_end\
    \ = 0;\n    let mut extension_str_valid_str = String::new();\n    let mut extension_str_valid_str_len\
    \ = 0;\n    let mut extension_str_valid_str_start = 0;\n    let mut extension_str_valid_str_end\
    \ = 0;\n    let mut extension_str_valid_str_valid = false;\n    let mut extension_str_valid_str_valid_count\
    \ = 0;\n    let mut extension_str_valid_str_valid_start = 0;\n    let mut extension_str_valid_str_valid_end\
    \ = 0;\n    let mut extension_str_valid_str_valid_str = String::new();\n    let\
    \ mut extension_str_valid_str_valid_str_len = 0;\n    let mut extension_str_valid_str_valid_str_start\
    \ = 0;\n    let mut extension_str_valid_str_valid_str_end = 0;\n    let mut extension_str_valid_str_valid_str_valid\
    \ = false;\n    let mut extension_str_valid_str_valid_str_valid_count = 0;\n \
    \   let mut extension_str_valid_str_valid_str_valid_start = 0;\n    let mut extension_str_valid_str_valid_str_valid_end\
    \ = 0;\n    let mut extension_str_valid_str_valid_str_valid_str = String::new();\n\
    \    let mut extension_str_valid_str_valid_str_valid_str_len = 0;\n    let mut\
    \ extension_str_valid_str_", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    let mut name_start = false;\n    let mut extension_start = false;\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       extension_start = true;\n        }\n        if !name_start && c.is_alphabetic()\
    \ {\n            name_start = true;\n        }\n        if name_start && !extension_start\
    \ {\n            name.push(c);\n        }\n        if extension_start {\n    \
    \        extension.push(c);\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || name.is_empty() || !name.chars().next().unwrap().is_alphabetic() ||\
    \ !(extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n\
    \        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_digit = false;\n    let mut\
    \ is_letter = false;\n    let mut is_dot = false;\n    let mut is_extension =\
    \ false;\n    let mut extension = String::new();\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut char_iter = file_name_chars.next();\n    while\
    \ let Some(c) = char_iter {\n        if c.is_digit(10) {\n            count +=\
    \ 1;\n            is_digit = true;\n        } else if c == '.' {\n           \
    \ dot_count += 1;\n            dot_index = count;\n            is_dot = true;\n\
    \        } else if c.is_alphabetic() {\n            is_letter = true;\n      \
    \  }\n        char_iter = file_name_chars.next();\n    }\n    if count > 3 ||\
    \ dot_count != 1 || !is_digit || !is_letter || !is_dot {\n        is_valid = false;\n\
    \    } else {\n        extension = file_name.chars().skip(dot_index + 1).collect();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            is_extension = true;\n        }\n        if !is_extension {\n\
    \            is_valid = false;\n        }\n    }\n    if is_valid {\n        return\
    \ String::from(\"Yes\");\n    } else {\n        return String::from(\"No\");\n\
    \    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_char_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension_start_index = 0;\n    let mut extension_end_index\
    \ = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            extension_start_index = i + 1;\n        } else\
    \ if c.is_alphabetic() {\n            is_first_char_valid = true;\n        }\n\
    \        if digits_count > 3 {\n            is_valid = false;\n            break;\n\
    \        }\n    }\n    if is_valid && dot_count == 1 && is_first_char_valid {\n\
    \        let extension = &file_name[extension_start_index..];\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_extension_valid\
    \ = true;\n        }\n    }\n    if is_valid && is_extension_valid {\n       \
    \ String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \    if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if after_dot != \".txt\" && after_dot\
    \ != \".exe\" && after_dot != \".dll\" {\n        is_valid = false;\n    }\n \
    \   if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_valid_after_dot = false;\n    let mut is_valid_before_dot\
    \ = false;\n    let mut is_valid_digits_count = true;\n    let mut is_valid_dot_count\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_before_dot_start\
    \ = false;\n    let mut is_valid_before_dot_empty = true;\n    let mut is_valid_after_dot_empty\
    \ = true;\n    let mut is_valid_after_dot_start = false;\n    let mut is_valid_after_dot_end\
    \ = false;\n    let mut is_valid_after_dot_start_letter = false;\n    let mut\
    \ is_valid_after_dot_end_letter = false;\n    let mut is_valid_after_dot_start_letter_count\
    \ = 0;\n    let mut is_valid_after_dot_end_letter_count = 0;\n    let mut is_valid_after_dot_start_letter_count_max\
    \ = 0;\n    let mut is_valid_after_dot_end_letter_count_max = 0;\n    let mut\
    \ is_valid_after_dot_start_letter_count_min = 0;\n    let mut is_valid_after_dot_end_letter_count_min\
    \ = 0;\n    let mut is_valid_after_dot_start_letter_count_max_valid = false;\n\
    \    let mut is_valid_after_dot_end_letter_count_max_valid = false;\n    let mut\
    \ is_valid_after_dot_start_letter_count_min_valid = false;\n    let mut is_valid_after_dot_end_letter_count_min_valid\
    \ = false;\n    let mut is_valid_after_dot_start_letter_count_max_valid_count\
    \ = 0;\n    let mut is_valid_after_dot_end_letter_count_max_valid_", "    let\
    \ mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n   \
    \ let mut valid = true;\n    for (i, c) in file_name.chars().enumerate() {\n \
    \       if c.is_digit(10) {\n            count += 1;\n        }\n        if c\
    \ == '.' {\n            dot_count += 1;\n            dot_index = i;\n        }\n\
    \    }\n    if count > 3 || dot_count != 1 {\n        valid = false;\n    }\n\
    \    let (before_dot, after_dot) = file_name.split_at(dot_index);\n    if before_dot.is_empty()\
    \ || !before_dot.chars().next().unwrap().is_alphabetic() {\n        valid = false;\n\
    \    }\n    if after_dot != \".txt\" && after_dot != \".exe\" && after_dot !=\
    \ \".dll\" {\n        valid = false;\n    }\n    if valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits\
    \ = 0;\n    let mut dot_count = 0;\n    let mut first_char = true;\n    let mut\
    \ first_dot = true;\n    let mut first_char_after_dot = true;\n    let mut valid_file_name\
    \ = true;\n    let mut file_extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            first_char = true;\n\
    \        }\n        if first_char {\n            if !c.is_alphabetic() {\n   \
    \             valid_file_name = false;\n                break;\n            }\n\
    \            first_char = false;\n        }\n        if first_dot {\n        \
    \    if c != '.' {\n                file_extension.push(c);\n            } else\
    \ {\n                first_dot = false;\n            }\n        }\n        if\
    \ first_char_after_dot {\n            if !c.is_alphabetic() {\n              \
    \  valid_file_name = false;\n                break;\n            }\n         \
    \   first_char_after_dot = false;\n        }\n    }\n    if digits > 3 || dot_count\
    \ != 1 || !valid_file_name {\n        return String::from(\"No\");\n    }\n  \
    \  if file_extension == \"txt\" || file_extension == \"exe\" || file_extension\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_before_dot_empty = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_after_dot\
    \ = true;\n            is_before_dot_empty = false;\n        }\n        if is_after_dot\
    \ {\n            if c == 't' {\n                is_after_dot_valid = true;\n \
    \           }\n            if c == 'x' && is_after_dot_valid {\n             \
    \   is_after_dot_valid = true;\n            }\n            if c == 'e' && is_after_dot_valid\
    \ {\n                is_after_dot_valid = true;\n            }\n            if\
    \ c == 'd' && is_after_dot_valid {\n                is_after_dot_valid = true;\n\
    \            }\n            if c == 'l' && is_after_dot_valid {\n            \
    \    is_after_dot_valid = true;\n            }\n            if c == 'l' && is_after_dot_valid\
    \ {\n                is_after_dot_valid = true;\n            }\n        }\n  \
    \      if is_first_letter {\n            if c.is_alphabetic() {\n            \
    \    is_before_dot_valid = true;\n                is_first_letter = false;\n \
    \           }\n        }\n    }\n    if digits_count > 3 {\n        is_valid =\
    \ false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n \
    \   if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if !is_after_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if is_before", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_dot = false;\n    let mut has_extension = false;\n    let mut extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            has_dot = true;\n        } else if c.is_alphabetic()\
    \ {\n            has_letter = true;\n        }\n        if has_dot {\n       \
    \     extension.push(c);\n        }\n    }\n    if digits_count > 3 {\n      \
    \  return String::from(\"No\");\n    }\n    if dot_count != 1 {\n        return\
    \ String::from(\"No\");\n    }\n    if !has_letter {\n        return String::from(\"\
    No\");\n    }\n    if extension == String::from(\".txt\") || extension == String::from(\"\
    .exe\") || extension == String::from(\".dll\") {\n        has_extension = true;\n\
    \    }\n    if has_extension {\n        return String::from(\"Yes\");\n    }\n\
    \    return String::from(\"No\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut extension_len = 0;\n\
    \    let mut extension = String::new();\n    let mut file_name_len = file_name.len();\n\
    \    let mut file_name_chars = file_name.chars();\n    let mut file_name_chars_vec:\
    \ Vec<char> = Vec::new();\n    let mut file_name_chars_vec_iter = file_name_chars_vec.iter();\n\
    \    let mut file_name_chars_vec_iter_rev = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone_clone_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone_clone_clone_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone_clone_clone_clone_clone\
    \ = file_name_chars_vec.iter().rev();\n    let mut file_name_chars_vec_iter_rev_clone_clone_clone_clone_clone_clone_clone\
    \ = file_name_chars_vec.iter().rev();\n    let mut file_name_chars_vec_iter_rev_clone_clone_clone_clone_clone_clone_clone_clone\
    \ =", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n   \
    \         count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n        }\n    }\n    if count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        let mut dot_index = 0;\n       \
    \ for (i, c) in file_name.chars().enumerate() {\n            if c == '.' {\n \
    \               dot_index = i;\n                break;\n            }\n      \
    \  }\n        let (sub_str_1, sub_str_2) = file_name.split_at(dot_index);\n  \
    \      if sub_str_1.is_empty() || !sub_str_1.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if sub_str_2 != \".txt\"\
    \ && sub_str_2 != \".exe\" && sub_str_2 != \".dll\" {\n            is_valid =\
    \ false;\n        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n\
    \    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut is_valid_prefix = false;\n    let mut\
    \ is_valid_digits = true;\n    let mut extension = String::new();\n    let mut\
    \ prefix = String::new();\n    let mut extension_index = 0;\n    let mut prefix_index\
    \ = 0;\n    let mut extension_length = 0;\n    let mut prefix_length = 0;\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n\
    \    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj =\
    \ 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut\
    \ nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n   \
    \ let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu =\
    \ 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut\
    \ yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n   ",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_char\
    \ = true;\n    let mut first_char_is_letter = false;\n    let mut first_char_is_digit\
    \ = false;\n    let mut last_char_is_digit = false;\n    let mut last_char_is_letter\
    \ = false;\n    let mut last_char_is_dot = false;\n    let mut last_char_is_slash\
    \ = false;\n    let mut last_char_is_back_slash = false;\n    let mut last_char_is_colon\
    \ = false;\n    let mut last_char_is_question_mark = false;\n    let mut last_char_is_asterisk\
    \ = false;\n    let mut last_char_is_quote = false;\n    let mut last_char_is_less_than\
    \ = false;\n    let mut last_char_is_greater_than = false;\n    let mut last_char_is_pipe\
    \ = false;\n    let mut last_char_is_space = false;\n    let mut last_char_is_tab\
    \ = false;\n    let mut last_char_is_new_line = false;\n    let mut last_char_is_carriage_return\
    \ = false;\n    let mut last_char_is_vertical_tab = false;\n    let mut last_char_is_form_feed\
    \ = false;\n    let mut last_char_is_backspace = false;\n    let mut last_char_is_alarm\
    \ = false;\n    let mut last_char_is_delete = false;\n    let mut last_char_is_escape\
    \ = false;\n    let mut last_char_is_null = false;\n    let mut last_char_is_bell\
    \ = false;\n    let mut last_char_is_backslash = false;\n    let mut last_char_is_underscore\
    \ = false;\n    let mut last_char_is_dash = false;\n    let mut last_char_is_plus\
    \ = false;\n    let mut last_char_is_equal = false;\n    let mut last_char_is_open_bracket\
    \ = false;\n    let", "    let mut digits_count = 0;\n    let mut dot_count =\
    \ 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid\
    \ = false;\n    let mut is_ext_valid = false;\n    let mut is_ext_empty = true;\n\
    \    let mut is_name_empty = true;\n    let mut is_name_valid = false;\n    let\
    \ mut is_name_started = false;\n    let mut is_ext_started = false;\n    let mut\
    \ is_ext_ended = false;\n    let mut is_name_ended = false;\n    let mut is_name_started_with_digit\
    \ = false;\n    let mut is_ext_started_with_digit = false;\n    let mut is_ext_started_with_letter\
    \ = false;\n    let mut is_name_started_with_letter = false;\n    let mut is_name_started_with_underscore\
    \ = false;\n    let mut is_ext_started_with_underscore = false;\n    let mut is_name_started_with_hyphen\
    \ = false;\n    let mut is_ext_started_with_hyphen = false;\n    let mut is_name_started_with_space\
    \ = false;\n    let mut is_ext_started_with_space = false;\n    let mut is_name_started_with_special_char\
    \ = false;\n    let mut is_ext_started_with_special_char = false;\n    let mut\
    \ is_name_started_with_dot = false;\n    let mut is_ext_started_with_dot = false;\n\
    \    let mut is_name_started_with_semicolon = false;\n    let mut is_ext_started_with_semicolon\
    \ = false;\n    let mut is_name_started_with_colon = false;\n    let mut is_ext_started_with_colon\
    \ = false;\n    let mut is_name_started_with_comma = false;\n    let mut is_ext_started_with_comma\
    \ = false;\n    let mut is_name_started_with_slash = false;\n    let mut is_ext_started",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n\
    \    let mut is_valid_extension_length = true;\n    let mut is_valid_prefix_length\
    \ = true;\n    let mut is_valid_prefix_start = true;\n    let mut is_valid_prefix_end\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_extension_end\
    \ = true;\n    let mut prefix_start = 0;\n    let mut prefix_end = 0;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_length\
    \ = 0;\n    let mut prefix_length = 0;\n    let mut extension_index = 0;\n   \
    \ let mut prefix_index = 0;\n    let mut extension = String::new();\n    let mut\
    \ prefix = String::new();\n    let mut extension_vec = vec!['t', 'x', 'e'];\n\
    \    let mut prefix_vec = vec!['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    for (index, character)\
    \ in file_name.chars().enumerate() {\n        if character == '.' {\n        \
    \    dot_count += 1;\n            extension_index = index;\n        }\n      \
    \  if character == '0' || character", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n\
    \    let mut is_first_letter = true;\n    let mut is_first_letter_valid = false;\n\
    \    let mut is_extension_valid = false;\n    let mut extension_index = 0;\n \
    \   let mut extension_length = 0;\n    let valid_extensions = vec![\"txt\", \"\
    exe\", \"dll\"];\n\n    for (index, character) in file_name.chars().enumerate()\
    \ {\n        if character.is_digit(10) {\n            digits_count += 1;\n   \
    \     }\n        if character == '.' {\n            dot_count += 1;\n        \
    \    dot_index = index;\n        }\n        if is_first_letter {\n           \
    \ if character.is_alphabetic() {\n                is_first_letter_valid = true;\n\
    \                is_first_letter = false;\n            } else {\n            \
    \    is_valid = false;\n                break;\n            }\n        }\n   \
    \ }\n\n    if is_valid {\n        if digits_count > 3 {\n            is_valid\
    \ = false;\n        } else if dot_count != 1 {\n            is_valid = false;\n\
    \        } else if dot_index == 0 {\n            is_valid = false;\n        }\
    \ else {\n            extension_index = dot_index + 1;\n            extension_length\
    \ = file_name.len() - extension_index;\n            for valid_extension in valid_extensions\
    \ {\n                if valid_extension.len() == extension_length {\n        \
    \            if &file_name[extension_index..] == valid_extension {\n         \
    \               is_extension_valid = true;\n                        break;\n \
    \                   }\n                }\n            }\n            if !is_extension_valid\
    \ {\n                is_valid = false;\n            }\n        }\n    }\n\n  \
    \  if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut valid_name_started = false;\n    let mut valid_name_ended = false;\n   \
    \ let mut valid_extension_started = false;\n    let mut valid_extension_ended\
    \ = false;\n    let mut valid_extension_name = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            valid_name_ended\
    \ = true;\n            valid_extension_started = true;\n        }\n        if\
    \ !valid_name_started && c.is_alphabetic() {\n            valid_name_started =\
    \ true;\n        }\n        if valid_name_started && !valid_name_ended && !c.is_alphabetic()\
    \ {\n            valid_name_ended = true;\n        }\n        if valid_extension_started\
    \ && !valid_extension_ended && c.is_alphabetic() {\n            valid_extension_name.push(c);\n\
    \        }\n        if valid_extension_started && valid_extension_name.len() ==\
    \ 3 {\n            valid_extension_ended = true;\n        }\n    }\n    if digits_count\
    \ <= 3 && dot_count == 1 && valid_name_started && valid_name_ended && valid_extension_started\
    \ && valid_extension_ended {\n        valid_extension = valid_extension_name ==\
    \ \"txt\" || valid_extension_name == \"exe\" || valid_extension_name == \"dll\"\
    ;\n        valid_name = valid_name_started && valid_name_ended;\n    }\n    if\
    \ valid_name && valid_extension {\n        String::from(\"Yes\")\n    } else {\n\
    \        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digit =\
    \ true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut extension_length = 0;\n    let mut prefix_length = 0;\n\
    \    let mut extension_start_index = 0;\n    let mut extension_end_index = 0;\n\
    \    let mut prefix_start_index = 0;\n    let mut prefix_end_index = 0;\n    let\
    \ mut extension_start_found = false;\n    let mut prefix_start_found = false;\n\
    \    let mut extension_end_found = false;\n    let mut prefix_end_found = false;\n\
    \    let mut extension_start_char = ' ';\n    let mut prefix_start_char = ' ';\n\
    \    let mut extension_end_char = ' ';\n    let mut prefix_end_char = ' ';\n \
    \   let mut extension_start_char_is_valid = false;\n    let mut prefix_start_char_is_valid\
    \ = false;\n    let mut extension_end_char_is_valid = false;\n    let mut prefix_end_char_is_valid\
    \ = false;\n    let mut extension_start_char_is_letter = false;\n    let mut prefix_start_char_is_letter\
    \ = false;\n    let mut extension_end_char_is_letter = false;\n    let mut prefix_end_char_is_letter\
    \ = false;\n    let mut extension_start_char_is_digit = false;\n    let mut prefix_start_char_is_digit\
    \ = false;\n    let mut extension_end_char_is_digit = false;\n    let mut prefix_end_char_is_digit\
    \ = false;\n    let mut extension_start_char_is_dot = false;\n    let mut prefix_start_char_is_dot\
    \ = false;\n    let mut extension_end_char_is_dot = false;\n    let mut prefix_end_char_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut extension = String::new();\n    let mut\
    \ file_name_iter = file_name.chars();\n    while let Some(c) = file_name_iter.next()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            is_empty = false;\n\
    \            is_letter = false;\n            is_extension = true;\n        } else\
    \ if c.is_alphabetic() {\n            is_letter = true;\n            is_empty\
    \ = false;\n            is_extension = false;\n        } else {\n            is_valid\
    \ = false;\n            break;\n        }\n        if is_extension {\n       \
    \     extension.push(c);\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || is_empty || !is_letter || !is_extension ||\n        !(extension == \"\
    txt\" || extension == \"exe\" || extension == \"dll\") {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            valid_extension = file_name[i+1..].to_lowercase()\
    \ == \"txt\" ||\n                              file_name[i+1..].to_lowercase()\
    \ == \"exe\" ||\n                              file_name[i+1..].to_lowercase()\
    \ == \"dll\";\n            extension = file_name[i+1..].to_string();\n       \
    \ }\n        if i == 0 {\n            valid_name = c.is_alphabetic();\n      \
    \  }\n        if i == 0 && c.is_alphabetic() {\n            name = c.to_string();\n\
    \        } else if i > 0 && c.is_alphabetic() {\n            name.push(c);\n \
    \       }\n    }\n    if digits_count > 3 || dot_count != 1 || !valid_extension\
    \ || !valid_name {\n        return String::from(\"No\");\n    }\n    String::from(\"\
    Yes\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n\
    \    let mut is_extension = false;\n    let mut extension = String::new();\n \
    \   let mut file_name = file_name.chars();\n    let mut c = file_name.next();\n\
    \    while c.is_some() {\n        let c = c.unwrap();\n        if c.is_ascii_digit()\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        } else if c.is_ascii_alphabetic() {\n            is_letter\
    \ = true;\n            is_empty = false;\n        }\n        c = file_name.next();\n\
    \    }\n    if digits_count > 3 || dot_count != 1 || !is_letter || is_empty {\n\
    \        is_valid = false;\n    } else {\n        let mut file_name = file_name.chars();\n\
    \        let mut c = file_name.next();\n        while c.is_some() {\n        \
    \    let c = c.unwrap();\n            if c == '.' {\n                is_extension\
    \ = true;\n            } else if is_extension {\n                extension.push(c);\n\
    \            }\n            c = file_name.next();\n        }\n        if !is_extension\
    \ || !(extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n\
    \            is_valid = false;\n        }\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut extension_valid = false;\n   \
    \ let mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_length\
    \ = 0;\n    let mut extension_start_valid = false;\n    let mut extension_end_valid\
    \ = false;\n    let mut extension_valid_length = false;\n    let mut valid = true;\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c == '.' {\n  \
    \          dot_count += 1;\n            extension_start = i + 1;\n           \
    \ extension_start_valid = true;\n        } else if c.is_digit(10) {\n        \
    \    digits_count += 1;\n        } else if c.is_alphabetic() {\n            extension_end\
    \ = i;\n            extension_end_valid = true;\n        }\n    }\n    if extension_start_valid\
    \ && extension_end_valid {\n        extension_length = extension_end - extension_start;\n\
    \        if extension_length == 3 {\n            extension_valid_length = true;\n\
    \        }\n    }\n    if extension_valid_length {\n        let extension = &file_name[extension_start..extension_end\
    \ + 1];\n        if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n            extension_valid = true;\n        }\n    }\n    if\
    \ digits_count > 3 || dot_count != 1 || !extension_valid {\n        valid = false;\n\
    \    }\n    if valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut\
    \ is_first_dot = true;\n    let mut is_first_letter_after_dot = true;\n    let\
    \ mut is_valid_extension = false;\n    let mut extension = String::new();\n  \
    \  for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n        if c.is_alphabetic() {\n            if is_first_letter {\n    \
    \            is_first_letter = false;\n            }\n            if is_first_letter_after_dot\
    \ {\n                is_first_letter_after_dot = false;\n            }\n     \
    \   }\n        if is_first_dot && c == '.' {\n            is_first_dot = false;\n\
    \        }\n        if !is_first_dot && c != '.' {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if is_first_letter\
    \ {\n        is_valid = false;\n    }\n    if is_first_letter_after_dot {\n  \
    \      is_valid = false;\n    }\n    if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n    }\n \
    \   if is_valid && is_valid_extension {\n        String::from(\"Yes\")\n    }\
    \ else {\n        String::from(\"No\")\n    }"]
stop_tokens:
- "\n}"
