language: rs
name: HumanEval_47_median
results:
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let len = sorted.len();\n    if len % 2 == 0 {\n        (sorted[len / 2]\
    \ + sorted[len / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[len / 2] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let len = sorted.len();\n    if len % 2 == 0 {\n        (sorted[len / 2]\
    \ + sorted[len / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[len / 2] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        let a = l[len / 2];\n       \
    \ let b = l[len / 2 - 1];\n        (a + b) as f64 / 2.0\n    } else {\n      \
    \  l[len / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        let a = l[n / 2];\n        let b\
    \ = l[n / 2 - 1];\n        (a + b) as f64 / 2.0\n    } else {\n        l[n / 2]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        let a = l[len / 2];\n       \
    \ let b = l[len / 2 - 1];\n        (a + b) as f64 / 2.0\n    } else {\n      \
    \  l[len / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        let mid = len / 2;\n        (l[mid]\
    \ + l[mid - 1]) as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        let mid = len / 2;\n        (l[mid]\
    \ + l[mid - 1]) as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let len = sorted.len();\n    if len % 2 == 0 {\n        (sorted[len / 2]\
    \ + sorted[len / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[len / 2] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let len = sorted.len();\n    if len % 2 == 0 {\n        (sorted[len / 2]\
    \ + sorted[len / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[len / 2] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        let a = l[n / 2 - 1] as f64;\n  \
    \      let b = l[n / 2] as f64;\n        (a + b) / 2.0\n    } else {\n       \
    \ l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        let mid = len / 2;\n        (l[mid\
    \ - 1] + l[mid]) as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746581
