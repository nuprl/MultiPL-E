name: HumanEval_142_sum_squares
language: rs
results:
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x.pow(2);\n\
    \        } else if i % 4 == 0 {\n            sum += x.pow(3);\n        } else\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n   \
    \ assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += n *\
    \ n;\n        } else if i % 4 == 0 {\n            sum += n * n * n;\n        }\
    \ else {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += n *\
    \ n;\n        } else if i % 4 == 0 {\n            sum += n * n * n;\n        }\
    \ else {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x.pow(2);\n\
    \        } else if i % 4 == 0 {\n            sum += x.pow(3);\n        } else\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n   \
    \ assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x.pow(2);\n\
    \        } else if i % 4 == 0 {\n            sum += x.pow(3);\n        } else\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n   \
    \ assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index,\
    \ value) in lst.iter().enumerate() {\n        if index % 3 == 0 {\n          \
    \  sum += value * value;\n        } else if index % 4 == 0 {\n            sum\
    \ += value * value * value;\n        } else {\n            sum += value;\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += n *\
    \ n;\n        } else if i % 4 == 0 {\n            sum += n * n * n;\n        }\
    \ else {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index,\
    \ value) in lst.iter().enumerate() {\n        if index % 3 == 0 {\n          \
    \  sum += value * value;\n        } else if index % 4 == 0 {\n            sum\
    \ += value * value * value;\n        } else {\n            sum += value;\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index,\
    \ value) in lst.iter().enumerate() {\n        if index % 3 == 0 {\n          \
    \  sum += value * value;\n        } else if index % 4 == 0 {\n            sum\
    \ += value * value * value;\n        } else {\n            sum += value;\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += n *\
    \ n;\n        } else if i % 4 == 0 {\n            sum += n * n * n;\n        }\
    \ else {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += n *\
    \ n;\n        } else if i % 4 == 0 {\n            sum += n * n * n;\n        }\
    \ else {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += n *\
    \ n;\n        } else if i % 4 == 0 {\n            sum += n * n * n;\n        }\
    \ else {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += n *\
    \ n;\n        } else if i % 4 == 0 {\n            sum += n * n * n;\n        }\
    \ else {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index,\
    \ value) in lst.iter().enumerate() {\n        if index % 3 == 0 {\n          \
    \  sum += value * value;\n        } else if index % 4 == 0 {\n            sum\
    \ += value * value * value;\n        } else {\n            sum += value;\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v *\
    \ v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        }\
    \ else {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, e)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += e *\
    \ e;\n        } else if i % 4 == 0 {\n            sum += e * e * e;\n        }\
    \ else {\n            sum += e;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x *\
    \ x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\
    \ else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
