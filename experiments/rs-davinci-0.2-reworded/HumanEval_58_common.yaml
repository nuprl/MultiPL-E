name: HumanEval_58_common
language: rs
prompt: "/// Return sorted unique common elements for two vectors.\n/// >>> common(vec![1,\
  \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121])\n/// vec![1, 5, 653]\n///\
  \ >>> common(vec![5, 3, 2, 8], vec![3, 2])\n/// vec![2, 3]\nfn common(l1: Vec<isize>,\
  \ l2: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
  \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
  \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
  \ vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n}\n"
completions: ["    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n \
    \       if l1[i] < l2[j] {\n            i += 1;\n        } else if l1[i] > l2[j]\
    \ {\n            j += 1;\n        } else {\n            res.push(l1[i]);\n   \
    \         i += 1;\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut l1_next\
    \ = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut result\
    \ = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n        if\
    \ l1_next.unwrap() < l2_next.unwrap() {\n            l1_next = l1_iter.next();\n\
    \        } else if l1_next.unwrap() > l2_next.unwrap() {\n            l2_next\
    \ = l2_iter.next();\n        } else {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n    let mut\
    \ l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n    let mut l2_next\
    \ = l2_iter.next();\n    let mut result = Vec::new();\n    while l1_next.is_some()\
    \ && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n        let\
    \ l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n            result.push(*l1_val);\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        } else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n\
    \        } else {\n            l2_next = l2_iter.next();\n        }\n    }\n \
    \   result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n   \
    \ l2.sort();\n    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n\
    \            res.push(l1[i]);\n            i += 1;\n            j += 1;\n    \
    \    } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n      \
    \      j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len()\
    \ {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i\
    \ += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    res", " \
    \   let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n \
    \   let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n        \
    \    result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ l3 = vec![];\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            l3.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    l3", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    let mut res = Vec::new();\n   \
    \ while i1 < l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n    \
    \        res.push(l1[i1]);\n            i1 += 1;\n            i2 += 1;\n     \
    \   } else if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else {\n    \
    \        i2 += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let\
    \ mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n     \
    \   if l1[i] == l2[j] {\n            common.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    common", "    let\
    \ mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let\
    \ mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i <\
    \ l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       if l1_next == l2_next {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        } else if l1_next < l2_next {\n            l1_next = l1_iter.next();\n\
    \        } else {\n            l2_next = l2_iter.next();\n        }\n    }\n \
    \   result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n   \
    \ l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n\
    \    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n     \
    \       res.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let mut l2 =\
    \ l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n \
    \       if l1[i] == l2[j] {\n            result.push(l1[i]);\n            i +=\
    \ 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i +=\
    \ 1;\n        } else {\n            j += 1;\n        }\n    }\n    result", " \
    \   let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n \
    \   let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       if l1_next == l2_next {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        } else if l1_next < l2_next {\n            l1_next = l1_iter.next();\n\
    \        } else {\n            l2_next = l2_iter.next();\n        }\n    }\n \
    \   result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n   \
    \ l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n\
    \    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n     \
    \       res.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let mut l2 =\
    \ l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n \
    \       if l1[i] == l2[j] {\n            result.push(l1[i]);\n            i +=\
    \ 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i +=\
    \ 1;\n        } else {\n            j += 1;\n        }\n    }\n    result", " \
    \   let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n \
    \   let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_curr = l1_iter.next();\n    let mut l2_curr = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_curr.is_some() && l2_curr.is_some() {\n \
    \       if l1_curr == l2_curr {\n            result.push(*l1_curr.unwrap());\n\
    \            l1_curr = l1_iter.next();\n            l2_curr = l2_iter.next();\n\
    \        } else if l1_curr < l2_curr {\n            l1_curr = l1_iter.next();\n\
    \        } else {\n            l2_curr = l2_iter.next();\n        }\n    }\n \
    \   result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n   \
    \ l2.sort();\n    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n\
    \    let mut l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n\
    \    let mut result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some()\
    \ {\n        if l1_next.unwrap() == l2_next.unwrap() {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        } else if l1_next.unwrap() < l2_next.unwrap() {\n            l1_next\
    \ = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n    let mut i\
    \ = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n       \
    \ if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n   \
    \         j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n  \
    \      } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ res = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n    \
    \    let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            res.push(*l1_val);\n            l1_next\
    \ = l1_iter.next();\n            l2_next = l2_iter.next();\n        } else if\
    \ l1_val < l2_val {\n            l1_next = l1_iter.next();\n        } else {\n\
    \            l2_next = l2_iter.next();\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            result.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n  \
    \  l2.sort();\n    let mut res = Vec::new();\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j]\
    \ {\n            res.push(l1[i]);\n            i += 1;\n            j += 1;\n\
    \        } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n  \
    \          j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let\
    \ mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n        if\
    \ l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n      \
    \      j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n     \
    \   } else {\n            j += 1;\n        }\n    }\n    res", "    let mut l1\
    \ = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i =\
    \ 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n \
    \       if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       if l1_next.unwrap() == l2_next.unwrap() {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        } else if l1_next.unwrap() < l2_next.unwrap() {\n            l1_next\
    \ = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n    let mut i\
    \ = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n       \
    \ if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n   \
    \         j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n  \
    \      } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut l1_next\
    \ = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut result\
    \ = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n        let\
    \ l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n       \
    \ if l1_val == l2_val {\n            result.push(*l1_val);\n            l1_next\
    \ = l1_iter.next();\n            l2_next = l2_iter.next();\n        } else if\
    \ l1_val < l2_val {\n            l1_next = l1_iter.next();\n        } else {\n\
    \            l2_next = l2_iter.next();\n        }\n    }\n    result", "    let\
    \ mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i <\
    \ l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       if l1_next.unwrap() == l2_next.unwrap() {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        } else if l1_next.unwrap() < l2_next.unwrap() {\n            l1_next\
    \ = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n        if\
    \ l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n      \
    \      j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n     \
    \   } else {\n            j += 1;\n        }\n    }\n    res", "    let mut l1\
    \ = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result\
    \ = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            result.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n  \
    \  l2.sort();\n    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n\
    \    let mut l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n\
    \    let mut result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some()\
    \ {\n        let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut l3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            l3.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    l3", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ res = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n    \
    \    let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            res.push(*l1_val);\n            l1_next\
    \ = l1_iter.next();\n            l2_next = l2_iter.next();\n        } else if\
    \ l1_val < l2_val {\n            l1_next = l1_iter.next();\n        } else {\n\
    \            l2_next = l2_iter.next();\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       if l1_next == l2_next {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        } else if l1_next < l2_next {\n            l1_next = l1_iter.next();\n\
    \        } else {\n            l2_next = l2_iter.next();\n        }\n    }\n \
    \   result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n   \
    \ l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n\
    \    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n     \
    \       result.push(l1[i]);\n            i += 1;\n            j += 1;\n      \
    \  } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n        \
    \    j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len()\
    \ {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i\
    \ += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    res", " \
    \   let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n \
    \   let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n        \
    \    result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n \
    \       if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_curr = l1_iter.next();\n    let mut l2_curr = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_curr.is_some() && l2_curr.is_some() {\n \
    \       if l1_curr == l2_curr {\n            result.push(*l1_curr.unwrap());\n\
    \            l1_curr = l1_iter.next();\n            l2_curr = l2_iter.next();\n\
    \        } else if l1_curr < l2_curr {\n            l1_curr = l1_iter.next();\n\
    \        } else {\n            l2_curr = l2_iter.next();\n        }\n    }\n \
    \   result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n   \
    \ l2.sort();\n    let mut l3 = Vec::new();\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n\
    \            l3.push(l1[i]);\n            i += 1;\n            j += 1;\n     \
    \   } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n       \
    \     j += 1;\n        }\n    }\n    l3", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n  \
    \  let mut l2_iter = l2.iter();\n    let mut l1_val = l1_iter.next();\n    let\
    \ mut l2_val = l2_iter.next();\n    let mut result = Vec::new();\n    while l1_val.is_some()\
    \ && l2_val.is_some() {\n        if l1_val == l2_val {\n            result.push(*l1_val.unwrap());\n\
    \            l1_val = l1_iter.next();\n            l2_val = l2_iter.next();\n\
    \        } else if l1_val < l2_val {\n            l1_val = l1_iter.next();\n \
    \       } else {\n            l2_val = l2_iter.next();\n        }\n    }\n   \
    \ result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_curr = l1_iter.next();\n    let mut l2_curr = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_curr.is_some() && l2_curr.is_some() {\n \
    \       if l1_curr == l2_curr {\n            result.push(*l1_curr.unwrap());\n\
    \            l1_curr = l1_iter.next();\n            l2_curr = l2_iter.next();\n\
    \        } else if l1_curr < l2_curr {\n            l1_curr = l1_iter.next();\n\
    \        } else {\n            l2_curr = l2_iter.next();\n        }\n    }\n \
    \   result", "    let mut res = Vec::new();\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n\
    \            res.push(l1[i]);\n            i += 1;\n            j += 1;\n    \
    \    } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n      \
    \      j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len()\
    \ {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i\
    \ += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    res", " \
    \   let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n \
    \   let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ l3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            l3.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    l3", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       if l1_next.unwrap() < l2_next.unwrap() {\n            l1_next = l1_iter.next();\n\
    \        } else if l1_next.unwrap() > l2_next.unwrap() {\n            l2_next\
    \ = l2_iter.next();\n        } else {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n        if\
    \ l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n      \
    \      j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n     \
    \   } else {\n            j += 1;\n        }\n    }\n    res", "    let mut l1\
    \ = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter\
    \ = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n\
    \    let mut l2_next = l2_iter.next();\n    let mut res = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        if l1_next.unwrap() == l2_next.unwrap()\
    \ {\n            res.push(*l1_next.unwrap());\n            l1_next = l1_iter.next();\n\
    \            l2_next = l2_iter.next();\n        } else if l1_next.unwrap() < l2_next.unwrap()\
    \ {\n            l1_next = l1_iter.next();\n        } else {\n            l2_next\
    \ = l2_iter.next();\n        }\n    }\n    res", "    let mut l1 = l1;\n    let\
    \ mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_val = l1_iter.next();\n    let\
    \ mut l2_val = l2_iter.next();\n    let mut res = Vec::new();\n    while l1_val.is_some()\
    \ && l2_val.is_some() {\n        if l1_val == l2_val {\n            res.push(*l1_val.unwrap());\n\
    \            l1_val = l1_iter.next();\n            l2_val = l2_iter.next();\n\
    \        } else if l1_val < l2_val {\n            l1_val = l1_iter.next();\n \
    \       } else {\n            l2_val = l2_iter.next();\n        }\n    }\n   \
    \ res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_val = l1_iter.next();\n    let mut l2_val = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_val.is_some() && l2_val.is_some() {\n   \
    \     if l1_val == l2_val {\n            result.push(*l1_val.unwrap());\n    \
    \        l1_val = l1_iter.next();\n            l2_val = l2_iter.next();\n    \
    \    } else if l1_val < l2_val {\n            l1_val = l1_iter.next();\n     \
    \   } else {\n            l2_val = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            result.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n  \
    \  l2.sort();\n    let mut res = Vec::new();\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j]\
    \ {\n            res.push(l1[i]);\n            i += 1;\n            j += 1;\n\
    \        } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n  \
    \          j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let\
    \ mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len()\
    \ {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i\
    \ += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    res", " \
    \   let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n \
    \   let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_elem = l1_iter.next();\n    let mut l2_elem = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_elem.is_some() && l2_elem.is_some() {\n \
    \       if l1_elem.unwrap() == l2_elem.unwrap() {\n            result.push(*l1_elem.unwrap());\n\
    \            l1_elem = l1_iter.next();\n            l2_elem = l2_iter.next();\n\
    \        } else if l1_elem.unwrap() < l2_elem.unwrap() {\n            l1_elem\
    \ = l1_iter.next();\n        } else {\n            l2_elem = l2_iter.next();\n\
    \        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n        if\
    \ l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n      \
    \      j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n     \
    \   } else {\n            j += 1;\n        }\n    }\n    res", "    let mut l1\
    \ = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i =\
    \ 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ result = Vec::new();\n    let mut l1_next = l1_iter.next();\n    let mut l2_next\
    \ = l2_iter.next();\n    while l1_next.is_some() && l2_next.is_some() {\n    \
    \    let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    let mut res = Vec::new();\n    while\
    \ i1 < l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n          \
    \  res.push(l1[i1]);\n            i1 += 1;\n            i2 += 1;\n        } else\
    \ if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else {\n            i2\
    \ += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n    let mut i\
    \ = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n       \
    \ if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n   \
    \         j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n  \
    \      } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            l3.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    l3", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_val = l1_iter.next();\n    let mut l2_val = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_val.is_some() && l2_val.is_some() {\n   \
    \     if l1_val == l2_val {\n            result.push(*l1_val.unwrap());\n    \
    \        l1_val = l1_iter.next();\n            l2_val = l2_iter.next();\n    \
    \    } else if l1_val < l2_val {\n            l1_val = l1_iter.next();\n     \
    \   } else {\n            l2_val = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_val = l1_iter.next();\n    let mut l2_val = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_val.is_some() && l2_val.is_some() {\n   \
    \     if l1_val == l2_val {\n            result.push(*l1_val.unwrap());\n    \
    \        l1_val = l1_iter.next();\n            l2_val = l2_iter.next();\n    \
    \    } else if l1_val < l2_val {\n            l1_val = l1_iter.next();\n     \
    \   } else {\n            l2_val = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n  \
    \  let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n    let\
    \ mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while l1_next.is_some()\
    \ && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n        let\
    \ l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n            result.push(*l1_val);\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        } else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n\
    \        } else {\n            l2_next = l2_iter.next();\n        }\n    }\n \
    \   result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n   \
    \ l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n\
    \    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n     \
    \       res.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let mut l2 =\
    \ l2;\n    l1.sort();\n    l2.sort();\n    let mut l3 = Vec::new();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n     \
    \   if l1[i] == l2[j] {\n            l3.push(l1[i]);\n            i += 1;\n  \
    \          j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n \
    \       } else {\n            j += 1;\n        }\n    }\n    l3", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            l3.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    l3", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut result = Vec::new();\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n\
    \            result.push(l1[i]);\n            i += 1;\n            j += 1;\n \
    \       } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n   \
    \         j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let\
    \ mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len()\
    \ {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i\
    \ += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    res", " \
    \   let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n \
    \   let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_curr = l1_iter.next();\n    let mut l2_curr = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_curr.is_some() && l2_curr.is_some() {\n \
    \       let l1_val = l1_curr.unwrap();\n        let l2_val = l2_curr.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_curr = l1_iter.next();\n            l2_curr = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_curr = l1_iter.next();\n        }\
    \ else {\n            l2_curr = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            result.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n  \
    \  l2.sort();\n    let mut res = Vec::new();\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j]\
    \ {\n            res.push(l1[i]);\n            i += 1;\n            j += 1;\n\
    \        } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n  \
    \          j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let\
    \ mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len()\
    \ {\n        if l1[i] == l2[j] {\n            result.push(l1[i]);\n          \
    \  i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n         \
    \   i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_val = l1_iter.next();\n    let mut l2_val = l2_iter.next();\n    let mut\
    \ res = Vec::new();\n    while l1_val.is_some() && l2_val.is_some() {\n      \
    \  if l1_val == l2_val {\n            res.push(*l1_val.unwrap());\n          \
    \  l1_val = l1_iter.next();\n            l2_val = l2_iter.next();\n        } else\
    \ if l1_val < l2_val {\n            l1_val = l1_iter.next();\n        } else {\n\
    \            l2_val = l2_iter.next();\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n    while i <\
    \ l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            result.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n  \
    \  l2.sort();\n    let mut l1_i = 0;\n    let mut l2_i = 0;\n    let mut common\
    \ = Vec::new();\n    while l1_i < l1.len() && l2_i < l2.len() {\n        if l1[l1_i]\
    \ == l2[l2_i] {\n            common.push(l1[l1_i]);\n            l1_i += 1;\n\
    \            l2_i += 1;\n        } else if l1[l1_i] < l2[l2_i] {\n           \
    \ l1_i += 1;\n        } else {\n            l2_i += 1;\n        }\n    }\n   \
    \ common", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len()\
    \ {\n        if l1[i] == l2[j] {\n            result.push(l1[i]);\n          \
    \  i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n         \
    \   i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       let l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n\
    \        if l1_val == l2_val {\n            result.push(*l1_val);\n          \
    \  l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n        }\
    \ else if l1_val < l2_val {\n            l1_next = l1_iter.next();\n        }\
    \ else {\n            l2_next = l2_iter.next();\n        }\n    }\n    result",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut\
    \ result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n \
    \       if l1_next == l2_next {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        } else if l1_next < l2_next {\n            l1_next = l1_iter.next();\n\
    \        } else {\n            l2_next = l2_iter.next();\n        }\n    }\n \
    \   result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n   \
    \ l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n\
    \    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n     \
    \       res.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let mut l2 =\
    \ l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut l1_next\
    \ = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n    let mut result\
    \ = Vec::new();\n    while l1_next.is_some() && l2_next.is_some() {\n        let\
    \ l1_val = l1_next.unwrap();\n        let l2_val = l2_next.unwrap();\n       \
    \ if l1_val == l2_val {\n            result.push(*l1_val);\n            l1_next\
    \ = l1_iter.next();\n            l2_next = l2_iter.next();\n        } else if\
    \ l1_val < l2_val {\n            l1_next = l1_iter.next();\n        } else {\n\
    \            l2_next = l2_iter.next();\n        }\n    }\n    result", "    let\
    \ mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i <\
    \ l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            l3.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    l3", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n    let mut\
    \ l1_val = l1_iter.next();\n    let mut l2_val = l2_iter.next();\n    let mut\
    \ common = Vec::new();\n    while l1_val.is_some() && l2_val.is_some() {\n   \
    \     if l1_val == l2_val {\n            common.push(*l1_val.unwrap());\n    \
    \        l1_val = l1_iter.next();\n            l2_val = l2_iter.next();\n    \
    \    } else if l1_val < l2_val {\n            l1_val = l1_iter.next();\n     \
    \   } else {\n            l2_val = l2_iter.next();\n        }\n    }\n    common",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            result.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n  \
    \  l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n\
    \    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n     \
    \       res.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let mut l2 =\
    \ l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n   \
    \     if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len()\
    \ {\n        if l1[i] == l2[j] {\n            common.push(l1[i]);\n          \
    \  i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n         \
    \   i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    common",
  "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    let mut res = Vec::new();\n    while\
    \ i1 < l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n          \
    \  res.push(l1[i1]);\n            i1 += 1;\n            i2 += 1;\n        } else\
    \ if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else {\n            i2\
    \ += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n    let mut\
    \ l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n    let mut l2_next\
    \ = l2_iter.next();\n    let mut result = Vec::new();\n    while l1_next.is_some()\
    \ && l2_next.is_some() {\n        if l1_next.unwrap() < l2_next.unwrap() {\n \
    \           l1_next = l1_iter.next();\n        } else if l1_next.unwrap() > l2_next.unwrap()\
    \ {\n            l2_next = l2_iter.next();\n        } else {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2 = l2;\n\
    \    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n    let mut i\
    \ = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n       \
    \ if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n   \
    \         j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n  \
    \      } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len()\
    \ && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n\
    \            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n  \
    \  while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n       \
    \     result.push(l1[i]);\n            i += 1;\n            j += 1;\n        }\
    \ else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n    }\n    result", "    let mut l1 = l1;\n    let mut l2\
    \ = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n \
    \       if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n\
    \            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    res", "    let mut\
    \ l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut\
    \ i1 = 0;\n    let mut i2 = 0;\n    let mut res = Vec::new();\n    while i1 <\
    \ l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n\
    \            i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2]\
    \ {\n            i1 += 1;\n        } else {\n            i2 += 1;\n        }\n\
    \    }\n    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n\
    \    l2.sort();\n    let mut res = Vec::new();\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j]\
    \ {\n            res.push(l1[i]);\n            i += 1;\n            j += 1;\n\
    \        } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n  \
    \          j += 1;\n        }\n    }\n    res", "    let mut l1 = l1;\n    let\
    \ mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len()\
    \ {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i\
    \ += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    res", " \
    \   let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n \
    \   let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l1.len() && j < l2.len() {\n        if l1[i] < l2[j] {\n            i +=\
    \ 1;\n        } else if l1[i] > l2[j] {\n            j += 1;\n        } else {\n\
    \            res.push(l1[i]);\n            i += 1;\n            j += 1;\n    \
    \    }\n    }\n    res", "    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n\
    \    l2.sort();\n    let mut l1_iter = l1.iter();\n    let mut l2_iter = l2.iter();\n\
    \    let mut l1_next = l1_iter.next();\n    let mut l2_next = l2_iter.next();\n\
    \    let mut result = Vec::new();\n    while l1_next.is_some() && l2_next.is_some()\
    \ {\n        if l1_next.unwrap() < l2_next.unwrap() {\n            l1_next = l1_iter.next();\n\
    \        } else if l1_next.unwrap() > l2_next.unwrap() {\n            l2_next\
    \ = l2_iter.next();\n        } else {\n            result.push(*l1_next.unwrap());\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result"]
stop_tokens:
- "\n}"
