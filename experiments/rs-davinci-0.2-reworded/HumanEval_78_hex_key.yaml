name: HumanEval_78_hex_key
language: rs
prompt: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n/// digits that are\
  \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
  \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume\
  \ the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are\
  \ always uppercase.\n/// Examples:\n/// >>> hex_key(String::from(\"AB\"))\n/// 1\n\
  /// >>> hex_key(String::from(\"1077E\"))\n/// 2\n/// >>> hex_key(String::from(\"\
  ABED1A33\"))\n/// 4\n/// >>> hex_key(String::from(\"123456789ABCDEF0\"))\n/// 6\n\
  /// >>> hex_key(String::from(\"2020\"))\n/// 2\nfn hex_key(num: String) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!(candidate(String::from(\"\
  AB\")), 1);\n    assert_eq!(candidate(String::from(\"1077E\")), 2);\n    assert_eq!(candidate(String::from(\"\
  ABED1A33\")), 4);\n    assert_eq!(candidate(String::from(\"2020\")), 2);\n    assert_eq!(candidate(String::from(\"\
  123456789ABCDEF0\")), 6);\n    assert_eq!(candidate(String::from(\"112233445566778899AABBCCDDEEFF00\"\
  )), 12);\n}\n"
completions: ["    let mut count = 0;\n    let mut hex_digits = vec![];\n    for c\
    \ in num.chars() {\n        hex_digits.push(c);\n    }\n    for i in 0..hex_digits.len()\
    \ {\n        if hex_digits[i] == '2' || hex_digits[i] == '3' || hex_digits[i]\
    \ == '5' || hex_digits[i] == '7' || hex_digits[i] == 'B' || hex_digits[i] == 'D'\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for c in num.chars() {\n        match c {\n            '2' | '3' |\
    \ '5' | '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    let hex_primes = vec![2, 3, 5, 7, 11,\
    \ 13];\n    for c in num.chars() {\n        let mut n = match c {\n          \
    \  '0' => 0,\n            '1' => 1,\n            '2' => 2,\n            '3' =>\
    \ 3,\n            '4' => 4,\n            '5' => 5,\n            '6' => 6,\n  \
    \          '7' => 7,\n            '8' => 8,\n            '9' => 9,\n         \
    \   'A' => 10,\n            'B' => 11,\n            'C' => 12,\n            'D'\
    \ => 13,\n            'E' => 14,\n            'F' => 15,\n            _ => 0,\n\
    \        };\n        if hex_primes.contains(&n) {\n            count += 1;\n \
    \       }\n    }\n    count", "    let mut count = 0;\n    let mut hex_digits\
    \ = vec![];\n    let mut hex_primes = vec![2, 3, 5, 7, 11, 13];\n    for c in\
    \ num.chars() {\n        hex_digits.push(c.to_digit(16).unwrap());\n    }\n  \
    \  for i in hex_digits {\n        if hex_primes.contains(&i) {\n            count\
    \ += 1;\n        }\n    }\n    count", "    let mut count = 0;\n    let mut primes\
    \ = vec![2, 3, 5, 7, 11, 13];\n    let mut hex_digits = vec![0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    let mut hex_digits_str = vec![\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"];\n    let mut hex_digits_str_primes = vec![\"2\"\
    , \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for i in 0..num.len() {\n        let\
    \ mut num_char = num.chars().nth(i).unwrap();\n        for j in 0..hex_digits_str.len()\
    \ {\n            if num_char.to_string() == hex_digits_str[j] {\n            \
    \    for k in 0..hex_digits_str_primes.len() {\n                    if num_char.to_string()\
    \ == hex_digits_str_primes[k] {\n                        count += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    count",
  "    let mut count = 0;\n    for c in num.chars() {\n        if c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    let mut count = 0;\n    for c in num.chars()\
    \ {\n        match c {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count\
    \ += 1,\n            _ => (),\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for c in num.chars() {\n        if c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D' {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut count = 0;\n    for c in num.chars() {\n    \
    \    if c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    let mut num = num.chars();\n    while let Some(c) = num.next() {\n      \
    \  if c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for c in num.chars() {\n        if c == '2' || c == '3' || c == '5' || c\
    \ == '7' || c == 'B' || c == 'D' {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    let mut primes = vec![2, 3, 5, 7, 11,\
    \ 13];\n    for c in num.chars() {\n        if c.is_digit(16) {\n            let\
    \ digit = c.to_digit(16).unwrap();\n            if primes.contains(&digit) {\n\
    \                count += 1;\n            }\n        }\n    }\n    count", " \
    \   let mut count = 0;\n    let mut num_vec: Vec<char> = num.chars().collect();\n\
    \    for i in 0..num_vec.len() {\n        let mut num_str = String::new();\n \
    \       num_str.push(num_vec[i]);\n        let num_int = u32::from_str_radix(&num_str,\
    \ 16).unwrap();\n        if is_prime(num_int) {\n            count += 1;\n   \
    \     }\n    }\n    count", "    let mut count = 0;\n    for c in num.chars()\
    \ {\n        match c {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count\
    \ += 1,\n            _ => (),\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    let mut num = num.chars();\n    while let Some(c) = num.next() {\n\
    \        if c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for c in num.chars() {\n        if c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D' {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut count = 0;\n    for c in num.chars() {\n    \
    \    match c {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count += 1,\n\
    \            _ => (),\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for c in num.chars() {\n        match c {\n            '2' | '3' | '5' |\
    \ '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n   \
    \ count", "    let mut count = 0;\n    for c in num.chars() {\n        match c\
    \ {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count += 1,\n          \
    \  _ => (),\n        }\n    }\n    count", "    let mut count = 0;\n    for c\
    \ in num.chars() {\n        match c {\n            '2' | '3' | '5' | '7' | 'B'\
    \ | 'D' => count += 1,\n            _ => (),\n        }\n    }\n    count"]
stop_tokens:
- "\n}"
