language: rs
name: HumanEval_151_double_the_difference
results:
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum: isize\
    \ = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0\
    \ {\n            if i % 2.0 == 1.0 {\n                sum += (i * i) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmph3k6112y.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    return sum * 2;\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpbg8f1kyg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpv6p5ux91.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ (i * i) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp0vh1daja.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i as isize;\n        \
    \    }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbhi4w8f3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i.powi(2) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpp52t_nu9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpbrwbf5wf.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `81`,\n right: `25`', /tmp/tmpxczxptwd.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i.powi(2) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpp52t_nu9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i.powi(2) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpotwcrnnv.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i % 2.0 == 1.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpn69hnf12.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|&x| x.is_sign_positive() && x.fract() == 0.0)\n        .map(|x|\
    \ x.powi(2))\n        .sum::<f64>() as isize\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpdhyu6bc7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpbrwbf5wf.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n  \
    \          }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpzrwdym6i.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n        }\n\
    \    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpc9rnsuby.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ me!\n    0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n \
    \   assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmpx9qzywnc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize * i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp90r6ba75.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num.is_sign_positive() && num.fract() == 0.0\
    \ {\n            if num % 2.0 == 1.0 {\n                sum += num.powi(2) as\
    \ isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n   \
    \ let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpyhubjmdj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i as isize;\n        \
    \    }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbhi4w8f3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n        }\n\
    \    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpc9rnsuby.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i.powi(2) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpotwcrnnv.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp7b_7ujrb.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmptz9fpp8n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp7b_7ujrb.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp7b_7ujrb.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp7b_7ujrb.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i as isize;\n        \
    \    }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbhi4w8f3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize * i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp90r6ba75.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpbrwbf5wf.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if (i % 2.0) != 0.0 && i > 0.0 {\n            sum\
    \ += (i * i) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpvmdeqipj.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i.powi(2) as isize;\n        }\n    }\n    return sum * 2;\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpnz1v1g3v.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n        }\n\
    \    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpc9rnsuby.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n        }\n\
    \    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpc9rnsuby.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    return\
    \ sum * 2;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n   \
    \ assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpayrz76_1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num.is_sign_positive() && num.fract() == 0.0\
    \ {\n            if num % 2.0 == 1.0 {\n                sum += num.powi(2) as\
    \ isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n   \
    \ let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpyhubjmdj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i.powi(2) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpp52t_nu9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n        }\n\
    \    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpc9rnsuby.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpv6p5ux91.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            sum\
    \ += (i as isize) * (i as isize);\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpfk529iqj.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpv6p5ux91.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i % 2.0 == 1.0 {\n            sum +=\
    \ (i * i) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpvto6h_0p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i.powi(2) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpp52t_nu9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp7b_7ujrb.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|&x| x.is_sign_positive() && x.fract() == 0.0)\n        .map(|x|\
    \ x.powi(2))\n        .sum::<f64>() as isize\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpdhyu6bc7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i as isize;\n        \
    \    }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbhi4w8f3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp7b_7ujrb.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpv6p5ux91.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ this function\n    0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmpv4jf4mha.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i as isize;\n        \
    \    }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbhi4w8f3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpkvvm8y6e.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i % 2.0 == 1.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpn69hnf12.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num.is_sign_positive() && num.fract() == 0.0\
    \ {\n            if num % 2.0 == 1.0 {\n                sum += num.powi(2) as\
    \ isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n   \
    \ let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpyhubjmdj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpv6p5ux91.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize * i as isize;\n        \
    \    }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp193axgwi.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n        }\n\
    \    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpc9rnsuby.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpv6p5ux91.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            sum\
    \ += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpdovnppnj.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n  \
    \          }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpzrwdym6i.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ this function\n    0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmpv4jf4mha.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum: isize\
    \ = 0;\n    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n       \
    \     if i % 2.0 == 1.0 {\n                sum += (i * i) as isize;\n        \
    \    }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp78_ee_wp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ this function\n    0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmpv4jf4mha.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += (i * i) as isize;\n            }\n  \
    \      }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpdxq4lpr7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i.ceil() {\n         \
    \   if i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n \
    \       }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpt1rxfffy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpbrwbf5wf.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ this function\n    0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmpv4jf4mha.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i.ceil() {\n         \
    \   if i % 2.0 == 1.0 {\n                sum += (i * i) as isize;\n          \
    \  }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmph_vkab4b.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ me!\n    0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n \
    \   assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmpx9qzywnc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `81`,\n right: `25`', /tmp/tmpxczxptwd.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize * i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp90r6ba75.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|&x| x.is_sign_positive() && x.fract() == 0.0)\n        .map(|x|\
    \ x.powi(2))\n        .sum::<f64>() as isize\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpdhyu6bc7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i.powi(2) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpotwcrnnv.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i.powi(2) as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpov99hf0_.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum: isize\
    \ = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0\
    \ {\n            if i % 2.0 == 1.0 {\n                sum += i as isize;\n   \
    \         }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmp5va6p7qb.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n  \
    \          }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpzrwdym6i.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n        }\n\
    \    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpc9rnsuby.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n      \
    \  }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkmgz4vsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ me!\n    0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n \
    \   assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmpx9qzywnc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i as isize;\n            }\n        }\n\
    \    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpc9rnsuby.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i.powi(2) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpotwcrnnv.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for item in lst {\n        if item.is_sign_positive() && item.is_integer()\
    \ {\n            sum += item as isize;\n        }\n    }\n    sum * 2\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmprbwlyymz.rs:15:44\n   |\n15 |         if item.is_sign_positive()\
    \ && item.is_integer() {\n   |                                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmpawlmwsrk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize).pow(2);\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpvmtkwxob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num.is_sign_positive() && num.fract() == 0.0\
    \ {\n            sum += (num as isize).pow(2);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmp7hf5vlwd.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmptz9fpp8n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp7b_7ujrb.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmptz9fpp8n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: implement\
    \ this function\n    let mut sum = 0;\n    for i in lst {\n        if i > 0.0\
    \ && i.floor() == i {\n            if i % 2.0 == 1.0 {\n                sum +=\
    \ i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpxv92uf6t.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.is_integer() {\n   \
    \         sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp7b_7ujrb.rs:15:38\n   |\n15 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.floor() == i {\n            if i\
    \ % 2.0 == 1.0 {\n                sum += (i * i) as isize;\n            }\n  \
    \      }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpdxq4lpr7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpv6p5ux91.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n            if\
    \ i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n            }\n\
    \        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpv6p5ux91.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2.0 == 1.0 && i > 0.0 {\n            sum +=\
    \ i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpbwrth20a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num.is_sign_positive() && num.is_integer() {\n\
    \            sum += num as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpukqfnw5j.rs:15:42\n   |\n15 |         if num.is_sign_positive()\
    \ && num.is_integer() {\n   |                                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpy2g2z_jk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           if i % 2.0 == 1.0 {\n                sum += i.powi(2) as isize;\n\
    \            }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpjso9l0b6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp90z212uj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746945
