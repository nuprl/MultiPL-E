name: HumanEval_102_choose_num
language: rs
results:
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpxzgme79c.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..y +\
    \ 1 {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n\
    \    max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n    \
    \        max = i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 && i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if x + 1 == y {\n        return\
    \ -1;\n    }\n    return x + 2;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpl9put_st.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpoh6hdnnu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpttsigrwf.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..(y+1)\
    \ {\n        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcslpf_6e.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpucdfgz7a.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpg51aeigd.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphttsvyda.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpvg59d12q.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        }\n        return x;\n    }\n    if x + 1 > y {\n\
    \        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpw_el5yz6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 2, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpotasszjz.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmphs8dn_ur.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if x + 1 == y {\n        return\
    \ -1;\n    }\n    return x + 2;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpgxhrk4wi.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function.\n    // You\
    \ may need to use the modulo operator (%) to determine if a number\n    // is\
    \ even.\n    let mut num = x;\n    while num <= y {\n        if num % 2 == 0 {\n\
    \            return num;\n        }\n        num += 1;\n    }\n    -1\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpohvegfox.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement me!\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpva6tr7je.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if x + 1 == y {\n        return\
    \ -1;\n    }\n    return x + 2;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpe412ns4u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpofdb2uqw.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp626plkkr.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfwqcp2zp.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function.\n    if x\
    \ > y {\n        return -1;\n    }\n    if x % 2 == 0 {\n        return x;\n \
    \   }\n    if x + 1 == y {\n        return -1;\n    }\n    return x + 2;\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp03kz8hy3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    if x\
    \ % 2 == 0 {\n        if x > y {\n            return -1;\n        }\n        else\
    \ {\n            return x;\n        }\n    }\n    else {\n        if x + 1 > y\
    \ {\n            return -1;\n        }\n        else {\n            return x +\
    \ 1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpahcovcdm.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n\n \
    \   if x % 2 == 0 {\n        return x;\n    }\n\n    if y % 2 == 0 {\n       \
    \ return y;\n    }\n\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpoo1xgqho.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            num = i;\n        }\n    }\n    num\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp7elm0xr0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..(y\
    \ + 1) {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n\
    \    max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp7s6m3fs1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpybggnzer.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3pjvmi5f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        }\n        return x;\n    }\n    if x + 1 > y {\n\
    \        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp06id_4xk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    let mut\
    \ z = 0;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n            z = i;\n\
    \        }\n    }\n    if z == 0 {\n        return -1;\n    }\n    else {\n  \
    \      return z;\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpdf9slnz2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpy6i2kwvl.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        } else {\n            return x;\n        }\n    }\
    \ else {\n        if x + 1 > y {\n            return -1;\n        } else {\n \
    \           return x + 1;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpad3c_bqe.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpggpzn_cz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    if x\
    \ > y {\n        return -1;\n    }\n    if x % 2 == 0 {\n        return x;\n \
    \   }\n    if y % 2 == 0 {\n        return y;\n    }\n    return -1;\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpp3p9z9k0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpw9w58sys.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function.\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpulx4fs9d.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max_even = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n\
    \            max_even = i;\n        }\n    }\n    max_even\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        return x;\n    }\n\
    \    if x + 1 == y {\n        return -1;\n    }\n    choose_num(x + 1, y)\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpohw82tde.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpsnalp_ez.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max_even = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n\
    \            max_even = i;\n        }\n    }\n    max_even\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwoledio2.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvog6gbfw.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3yrm5_t7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..(y\
    \ + 1) {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n\
    \    max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    let mut\
    \ z = x;\n    while z <= y {\n        if z % 2 == 0 {\n            return z;\n\
    \        }\n        z += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpfyvxll4q.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5scfbde7.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n\n \
    \   let mut max_even = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n\
    \            max_even = i;\n        }\n    }\n\n    return max_even;\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpgy7i1_nv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..y+1\
    \ {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n  \
    \  max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz2crokkd.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpj4cg17t9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpj5kb1bxj.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx4p7rh9d.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO\n    -1\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpz6ji_eej.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp05w60olt.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpty4lohk1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        }\n        return x;\n    }\n    if x + 1 > y {\n\
    \        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpind5brf6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        x\n    } else if y\
    \ % 2 == 0 {\n        y\n    } else {\n        -1\n    }\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp6b466sp3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpnsqfmneq.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmps1jnjqv0.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..y+1\
    \ {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n  \
    \  max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        }\n        return x;\n    }\n    if x + 1 > y {\n\
    \        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4ggywe5i.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpr5keh2pb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpj_xi9bim.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function.\n    if x\
    \ > y {\n        return -1;\n    }\n    let mut i = y;\n    while i >= x {\n \
    \       if i % 2 == 0 {\n            return i;\n        }\n        i -= 1;\n \
    \   }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 1, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmp8b8j81sz.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp5wrf7r7i.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9ywi9yhs.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmprl3gany2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    if x + 1 == y {\n        return -1;\n    }\n    return x + 1;\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmphoyj0oxk.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpo08m6dy8.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    let mut\
    \ max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n            if i\
    \ > max {\n                max = i;\n            }\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp7rgw7axg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        } else {\n            return x;\n        }\n    }\
    \ else {\n        if x + 1 > y {\n            return -1;\n        } else {\n \
    \           return x + 1;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp0ocexbeg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpgto_bfqq.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp9m4m8d5k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpn9u38ozy.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max_even = -1;\n    for i in x..y + 1 {\n        if i % 2 == 0 {\n \
    \           max_even = i;\n        }\n    }\n    max_even\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        }\n        return choose_num(x + 2, y);\n    }\n \
    \   if x + 1 >= y {\n        return -1;\n    }\n    return choose_num(x + 2, y);\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmp8f6tapoh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpobmoiatf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        -1\n    } else if x % 2\
    \ == 0 {\n        x\n    } else {\n        x + 1\n    }\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpn3p4_hdk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        return x;\n    }\n\
    \    if x + 1 == y {\n        return -1;\n    }\n    choose_num(x + 1, y)\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpkxcgouw9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    if x + 1 == y {\n        return -1;\n    }\n    return choose_num(x\
    \ + 1, y - 1);\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpb2vg5l3w.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmptpoxrwm5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3h290ny6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpvxssp3l2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return y;\n        }\n    }\
    \ else {\n        if x + 1 >= y {\n            return -1;\n        } else {\n\
    \            return y;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpf4k_d2ek.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_8n6lzdi.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmph5lha9kl.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpofze5aj8.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpc7zoht74.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp385y0vqo.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    if x + 1 == y {\n        return -1;\n    }\n    return choose_num(x\
    \ + 1, y - 1);\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpqc0hthih.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp_1zpcx7u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmptftv7oe7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if x + 1 == y {\n        return\
    \ -1;\n    }\n    return x + 2;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmprmj2ng33.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        }\n        return x + 2;\n    }\n    if x + 1 >= y\
    \ {\n        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `34`,\n right: `12354`', /tmp/tmps2aquuoi.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz34ga9g9.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpfojtsmca.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx_gr23r1.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplkvmwvzj.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp6c92rsf4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpudicez45.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2vr9n9sy.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpmdwcblwn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp77v_mg4c.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp8mhtyhxd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpq1ifcqld.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    return choose_num(x + 1, y);\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpc5ftllqh.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpmq234zwy.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpc27w0z1j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        return x;\n    } else\
    \ if x + 1 == y {\n        return -1;\n    } else {\n        return choose_num(x\
    \ + 1, y);\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp_wss7p1i.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp1v3ocl34.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxhmuj3hx.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpbcxh8ytk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpf0z0t1cv.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        }\n        return choose_num(x + 2, y);\n    }\n \
    \   if x + 1 >= y {\n        return -1;\n    }\n    return choose_num(x + 2, y);\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmp140aswxw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpau3e9now.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        return x;\n    }\n\
    \    if y % 2 == 0 {\n        return y;\n    }\n    return -1;\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp7gi9g_5e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8hfhlorl.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpo_e5e0nx.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    if x + 1 == y {\n        return -1;\n    }\n    return choose_num(x\
    \ + 1, y - 1);\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpee9g0rn3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x <= y {\n    \
    \        return x;\n        }\n    }\n    if y % 2 == 0 {\n        if x <= y {\n\
    \            return y;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpmrjn0llc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 && i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwq8qbb8g.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpoopz4urg.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp185qpsav.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        -1\n    } else if x % 2\
    \ == 0 {\n        x\n    } else {\n        x + 1\n    }\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp1w4f3lbq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            num = i;\n        }\n    }\n    num\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x <= y {\n    \
    \        return x;\n        }\n    }\n    if x + 1 <= y {\n        return x +\
    \ 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp1bupmp07.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpjghzq_j_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function.\n    // Hint:\
    \ You can use the modulo operator (%) to check if a number is even.\n    // Hint:\
    \ You can use the max() function to find the maximum of two numbers.\n    let\
    \ mut max = -1;\n    if x > y {\n        return max;\n    }\n    for i in x..y+1\
    \ {\n        if i % 2 == 0 {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n\n \
    \   let mut max = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n  \
    \          max = i;\n        }\n    }\n\n    max\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz3uzb2ly.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    let mut\
    \ max_even = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n           \
    \ max_even = i;\n        }\n    }\n    max_even\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function.\n    if x\
    \ % 2 == 0 {\n        return x;\n    }\n    else if x + 1 == y {\n        return\
    \ -1;\n    }\n    else {\n        return choose_num(x + 1, y);\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpxsexge69.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpw19ruct4.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpr34vm5kj.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4vt3es_c.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqbiqh2lb.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcc7rufns.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp__b5n6_u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpnv2w_n8n.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpj9fch580.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp0b8zapjb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp8j8_1dfw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if x + 1 == y {\n        return\
    \ -1;\n    }\n    return x + 2;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpl2y0e5q3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmphfxadldd.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp9osq1svq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp9hdde5pg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpbkbnsm7q.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    if x\
    \ > y {\n        return -1;\n    }\n    if x % 2 == 0 {\n        return x;\n \
    \   }\n    if x + 1 == y {\n        return -1;\n    }\n    return x + 2;\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpciqm4v4l.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if x + 1 == y {\n        return\
    \ -1;\n    }\n    return x + 2;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp121r9uj9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement me!\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpl5ineyq1.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp75ffutqr.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvcx35_fi.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpkgw8a072.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 && i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4o7n5w59.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpanggk9m8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        }\n        return choose_num(x + 2, y);\n    }\n \
    \   if x + 1 >= y {\n        return -1;\n    }\n    return choose_num(x + 2, y);\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpuxsspubj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n\n \
    \   if x % 2 == 0 {\n        return x;\n    }\n\n    if y % 2 == 0 {\n       \
    \ return y;\n    }\n\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpgmozw8ar.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp5u_olv_g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO\n    if x%2 == 0 {\n        if x >\
    \ y {\n            return -1;\n        }\n        else {\n            return x;\n\
    \        }\n    }\n    else {\n        if x+1 > y {\n            return -1;\n\
    \        }\n        else {\n            return x+1;\n        }\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpajjy_1f_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpoox9urhl.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..(y+1)\
    \ {\n        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpirpe56uk.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3e3rephk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpkefzf9vh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x <= y {\n    \
    \        return x;\n        }\n    }\n    if y % 2 == 0 {\n        if x <= y {\n\
    \            return y;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp_pjwtw7m.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        }\n        return x;\n    }\n    if x + 1 > y {\n\
    \        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmptqf7qet1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz036ns3c.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp8yw2tiwj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 2, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpu0y8nzk7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpm4yldi0v.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp87tr84yu.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    if x\
    \ > y {\n        return -1;\n    }\n    if x % 2 == 0 {\n        return x;\n \
    \   }\n    if x + 1 == y {\n        return -1;\n    }\n    return x + 2;\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpdeajh8b8.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmprlsa4wun.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..y+1\
    \ {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n  \
    \  max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpiyty7zaw.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..(y\
    \ + 1) {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n\
    \    max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 2, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmprs8hh1aw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphinubtcf.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp1rk43o_b.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
