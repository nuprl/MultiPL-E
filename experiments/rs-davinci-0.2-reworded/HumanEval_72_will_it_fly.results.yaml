name: HumanEval_72_will_it_fly
language: rs
results:
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_iter = q.iter();\n    let mut q_rev_iter = q.iter().rev();\n\
    \    let mut sum = 0;\n    loop {\n        match (q_iter.next(), q_rev_iter.next())\
    \ {\n            (Some(x), Some(y)) => {\n                if x != y {\n      \
    \              return false;\n                }\n                sum += x + y;\n\
    \            }\n            (Some(x), None) => {\n                sum += x;\n\
    \            }\n            (None, Some(y)) => {\n                sum += y;\n\
    \            }\n            (None, None) => {\n                break;\n      \
    \      }\n        }\n    }\n    sum <= w\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdzsd3t1h.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpcc_z1t1w.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp9ymmxxeb.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpbc8uyxf5.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpn_mv6mxq.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcbc4nf_o.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp_f5vf4co.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp24amv1dn.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    if sum <= w && is_palindrome(&q)\
    \ {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp4j1yy3z3.rs:18:20\n   |\n18 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut q_rev = q.clone();\n    q_rev.reverse();\n\
    \    if q == q_rev {\n        for i in q {\n            sum += i;\n        }\n\
    \        if sum <= w {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpks99uhvy.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpjb583s5s.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        true\n    } else {\n   \
    \     false\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2wugsyh2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpaq2e6ar8.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    if sum <= w && q == q.iter().rev().collect::<Vec<_>>()\
    \ {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmphtynsgob.rs:18:22\n\
    \   |\n18 |     if sum <= w && q == q.iter().rev().collect::<Vec<_>>() {\n   |\
    \                      ^^ no implementation for `isize == &isize`\n   |\n   =\
    \ help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpbsd6zr59.rs:18:19\n\
    \   |\n18 |     sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n   |    \
    \               ^^ no implementation for `isize == &isize`\n   |\n   = help: the\
    \ trait `PartialEq<&isize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n   = note: required\
    \ because of the requirements on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmprl1_7soh.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_iter = q.iter();\n    let mut q_iter_rev = q.iter().rev();\n\
    \    let mut sum = 0;\n    loop {\n        match (q_iter.next(), q_iter_rev.next())\
    \ {\n            (Some(x), Some(y)) => {\n                if x != y {\n      \
    \              return false;\n                }\n                sum += x + y;\n\
    \            }\n            (Some(x), None) => {\n                sum += x;\n\
    \            }\n            (None, Some(y)) => {\n                sum += y;\n\
    \            }\n            (None, None) => break,\n        }\n    }\n    sum\
    \ <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaj_s0zht.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    let mut sum = 0;\n    while !q.is_empty() {\n   \
    \     sum += q.pop().unwrap();\n        if sum > w {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqporulyw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpyt38kqor.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.reverse();\n    let sum: isize =\
    \ q.iter().sum();\n    sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n}\n\
    \nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpr9k2fmha.rs:21:19\n\
    \   |\n21 |     sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n   |    \
    \               ^^ no implementation for `isize == &isize`\n   |\n   = help: the\
    \ trait `PartialEq<&isize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n   = note: required\
    \ because of the requirements on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    q == q.iter().rev().collect::<Vec<_>>()\
    \ && sum <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpjqa3r_fy.rs:18:7\n\
    \   |\n18 |     q == q.iter().rev().collect::<Vec<_>>() && sum <= w\n   |    \
    \   ^^ no implementation for `isize == &isize`\n   |\n   = help: the trait `PartialEq<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n   = note: required because of the requirements\
    \ on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_copy = q.clone();\n \
    \   q_copy.reverse();\n    q == q_copy && sum <= w\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpulns93yy.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpwx9sev6w.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.reverse();\n    let mut sum = 0;\n\
    \    for i in q {\n        sum += i;\n        if sum > w {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpueohb_fi.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in &q {\n        sum += i;\n    }\n    if\
    \ sum > w {\n        return false;\n    }\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    q == q_rev\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7da81mia.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpp2yxenjz.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpjgytxjr9.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    let mut q_rev = q.clone();\n\
    \    q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpxkt6z6aq.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpuk92kqlp.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().cloned().collect::<Vec<isize>>() {\n \
    \       return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    let mut q_rev = q.clone();\n\
    \    q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpoyf385cp.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpgpj_hrsv.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp_bz48vxp.rs:21:22\n\
    \   |\n21 |     if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n\
    \   |                      ^^ no implementation for `isize == &isize`\n   |\n\
    \   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    let mut w = w;\n    q.sort();\n    let mut sum =\
    \ 0;\n    for i in q {\n        sum += i;\n        if sum > w {\n            return\
    \ false;\n        }\n    }\n    if q.len() % 2 == 0 {\n        return false;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmparl0o4na.rs:18:9\n\
    \   |\n18 |     let mut w = w;\n   |         ----^\n   |         |\n   |     \
    \    help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0382]: borrow of moved value: `q`\n   --> /tmp/tmparl0o4na.rs:27:8\n\
    \    |\n17  |     let mut q = q;\n    |         ----- move occurs because `q`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n21  |\
    \     for i in q {\n    |              - `q` moved due to this implicit call to\
    \ `.into_iter()`\n...\n27  |     if q.len() % 2 == 0 {\n    |        ^^^^^^^ value\
    \ borrowed here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `q`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n21  |   \
    \  for i in &q {\n    |              +\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.iter().sum::<isize>() <= w && q\
    \ == q.iter().rev().collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpv_11krom.rs:19:39\n\
    \   |\n19 |     q.iter().sum::<isize>() <= w && q == q.iter().rev().collect::<Vec<_>>()\n\
    \   |                                       ^^ no implementation for `isize ==\
    \ &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n   = note: required because of the requirements on the impl\
    \ of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpcp5xp2hs.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpku2gulh4.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp_mzlfjk9.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        let mut q_rev = q.clone();\n\
    \        q_rev.reverse();\n        if q == q_rev {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmp2b6e42mj.rs:24:25\n\
    \    |\n17  |     let mut q = q;\n    |         ----- move occurs because `q`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n20  |\
    \     for i in q {\n    |              - `q` moved due to this implicit call to\
    \ `.into_iter()`\n...\n24  |         let mut q_rev = q.clone();\n    |       \
    \                  ^^^^^^^^^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `q`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n20  |     for i in &q {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpf1nfthp7.rs:21:22\n\
    \   |\n21 |     if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n\
    \   |                      ^^ no implementation for `isize == &isize`\n   |\n\
    \   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_iter = q.iter();\n    let mut q_rev_iter = q.iter().rev();\n\
    \    let mut sum = 0;\n    while let (Some(x), Some(y)) = (q_iter.next(), q_rev_iter.next())\
    \ {\n        if x != y {\n            return false;\n        }\n        sum +=\
    \ x;\n    }\n    sum <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpwe2v7ruf.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut q_rev = q.clone();\n    q_rev.reverse();\n\
    \    for i in 0..q.len() {\n        sum += q[i];\n        if sum > w {\n     \
    \       return false;\n        }\n        if q[i] != q_rev[i] {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj9ph0dg8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().collect::<Vec<_>>() {\n        true\n\
    \    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp3ob02uum.rs:21:22\n\
    \   |\n21 |     if sum <= w && q == q.iter().rev().collect::<Vec<_>>() {\n   |\
    \                      ^^ no implementation for `isize == &isize`\n   |\n   =\
    \ help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().cloned().collect::<Vec<isize>>() {\n \
    \       return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    let mut sum = 0;\n    for i in 0..q.len() {\n   \
    \     sum += q[i];\n        if sum > w {\n            return false;\n        }\n\
    \        if q[i] != q[q.len() - 1 - i] {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    let mut q_rev = q.clone();\n\
    \    q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut rev = q.clone();\n        rev.reverse();\n\
    \        if rev == q {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut i = 0;\n        let mut j = q.len() - 1;\n\
    \        while i < j {\n            if q[i] != q[j] {\n                return\
    \ false;\n            }\n            i += 1;\n            j -= 1;\n        }\n\
    \        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_iter = q.iter();\n    let mut q_iter_rev = q.iter().rev();\n\
    \    let mut sum = 0;\n    while let (Some(x), Some(y)) = (q_iter.next(), q_iter_rev.next())\
    \ {\n        if x != y {\n            return false;\n        }\n        sum +=\
    \ x;\n    }\n    sum <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        true\n    } else {\n   \
    \     false\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxbhnemw0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    let mut q_rev = q.clone();\n\
    \    q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().fold(0, |acc, x| acc + x);\n    let mut q_rev = q.clone();\n\
    \    q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgs6g4bsm.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let is_palindrome = q.iter().eq(q.iter().rev());\n\
    \    sum <= w && is_palindrome\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    let is_palindrome = q.iter().zip(q.iter().rev()).all(|(a,\
    \ b)| a == b);\n    sum <= w && is_palindrome\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let sum: isize = q.iter().sum();\n\
    \    if sum > w {\n        return false;\n    }\n    let mut q_rev = q.clone();\n\
    \    q_rev.reverse();\n    q == q_rev\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp19yziahu.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.reverse();\n    let sum: isize =\
    \ q.iter().sum();\n    sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n}\n\
    \nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpovpbve01.rs:21:19\n\
    \   |\n21 |     sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n   |    \
    \               ^^ no implementation for `isize == &isize`\n   |\n   = help: the\
    \ trait `PartialEq<&isize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n   = note: required\
    \ because of the requirements on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in &q {\n        sum += i;\n    }\n    if\
    \ sum > w {\n        return false;\n    }\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    if q_rev == q {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    let is_palindrome = q.iter().eq(q.iter().rev());\n\
    \    sum <= w && is_palindrome\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in &q {\n        sum += i;\n    }\n    if\
    \ sum > w {\n        return false;\n    }\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    q == q_rev\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8lvghfvr.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        true\n    } else {\n   \
    \     false\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6dfnukz4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    if sum <= w && is_palindrome(&q)\
    \ {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpu0m85zd9.rs:18:20\n   |\n18 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        if q.len() == 1 {\n            return true;\n    \
    \    }\n        let mut i = 0;\n        let mut j = q.len() - 1;\n        while\
    \ i < j {\n            if q[i] != q[j] {\n                return false;\n    \
    \        }\n            i += 1;\n            j -= 1;\n        }\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.iter().sum::<isize>() <= w && q\
    \ == q.iter().rev().collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp9mj5bham.rs:19:39\n\
    \   |\n19 |     q.iter().sum::<isize>() <= w && q == q.iter().rev().collect::<Vec<_>>()\n\
    \   |                                       ^^ no implementation for `isize ==\
    \ &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n   = note: required because of the requirements on the impl\
    \ of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpkcsvlwjd.rs:21:22\n\
    \   |\n21 |     if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n\
    \   |                      ^^ no implementation for `isize == &isize`\n   |\n\
    \   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let sum: isize = q.iter().sum();\n\
    \    let mut q_rev = q.clone();\n    q_rev.reverse();\n    q == q_rev && sum <=\
    \ w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgtvuty2b.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmprbonvgci.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpzecaj_c8.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    if sum <= w && q == q.iter().rev().collect::<Vec<_>>()\
    \ {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpt6zbe488.rs:18:22\n\
    \   |\n18 |     if sum <= w && q == q.iter().rev().collect::<Vec<_>>() {\n   |\
    \                      ^^ no implementation for `isize == &isize`\n   |\n   =\
    \ help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().cloned().collect::<Vec<isize>>() {\n \
    \       return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.iter().sum::<isize>() <= w && q\
    \ == q.iter().rev().collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpelz4i8ci.rs:19:39\n\
    \   |\n19 |     q.iter().sum::<isize>() <= w && q == q.iter().rev().collect::<Vec<_>>()\n\
    \   |                                       ^^ no implementation for `isize ==\
    \ &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n   = note: required because of the requirements on the impl\
    \ of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp18ojjdbf.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in 0..q.len()\
    \ {\n        sum += q[i];\n        if sum > w {\n            return false;\n \
    \       }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0fd_h4rm.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.reverse();\n    let mut sum = 0;\n\
    \    for i in q {\n        sum += i;\n        if sum > w {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3qz_6d48.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut q_rev = q.clone();\n    q_rev.reverse();\n\
    \    for i in 0..q.len() {\n        sum += q[i];\n        if sum > w {\n     \
    \       return false;\n        }\n        if q[i] != q_rev[i] {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpkjs56kd1.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpmb39nkyj.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgiq7h2v3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp58pas86s.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpdak125h3.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpkkpwbs0u.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpwm8wad1p.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum > w {\n        return false;\n    }\n  \
    \  let mut q_rev = q.clone();\n    q_rev.reverse();\n    q == q_rev\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmp_hriu636.rs:26:21\n\
    \    |\n17  |     let mut q = q;\n    |         ----- move occurs because `q`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n20  |\
    \     for i in q {\n    |              - `q` moved due to this implicit call to\
    \ `.into_iter()`\n...\n26  |     let mut q_rev = q.clone();\n    |           \
    \          ^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `q`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n20  |     for i in &q {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp92dp4cer.rs:18:19\n\
    \   |\n18 |     sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n   |    \
    \               ^^ no implementation for `isize == &isize`\n   |\n   = help: the\
    \ trait `PartialEq<&isize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n   = note: required\
    \ because of the requirements on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    let mut q_rev = q.clone();\n\
    \    q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp2uw_7b7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp7hd3enwa.rs:21:22\n\
    \   |\n21 |     if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n\
    \   |                      ^^ no implementation for `isize == &isize`\n   |\n\
    \   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmptsq2rk2g.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp8vi6chcq.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpa_15b2ms.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp5csbe4lx.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        true\n    } else {\n   \
    \     false\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptgt66zdp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprutfq4md.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcfr41wwg.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfyrd_zrk.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut q_rev = q.clone();\n    q_rev.reverse();\n\
    \    for i in 0..q.len() {\n        sum += q[i];\n        if sum > w {\n     \
    \       return false;\n        }\n        if q[i] != q_rev[i] {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmprwnl3rd2.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let sum: isize = q.iter().sum();\n\
    \    if sum > w {\n        return false;\n    }\n    let mut q_rev = q.clone();\n\
    \    q_rev.reverse();\n    q == q_rev\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1wzb9tzd.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp67k8gmvr.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpkke7vvbd.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpseuhe_bg.rs:21:22\n\
    \   |\n21 |     if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n\
    \   |                      ^^ no implementation for `isize == &isize`\n   |\n\
    \   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    let mut sum = 0;\n    while !q.is_empty() {\n   \
    \     sum += q.pop().unwrap();\n        if sum > w {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkt67kw2q.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut q_rev = q.clone();\n    q_rev.reverse();\n\
    \    for i in 0..q.len() {\n        sum += q[i];\n        if sum > w {\n     \
    \       return false;\n        }\n        if q[i] != q_rev[i] {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp6eb9ncpp.rs:21:22\n\
    \   |\n21 |     if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n\
    \   |                      ^^ no implementation for `isize == &isize`\n   |\n\
    \   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpc0qjxaew.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp0n9agm2w.rs:21:22\n\
    \   |\n21 |     if sum <= w && q == q.iter().rev().collect::<Vec<&isize>>() {\n\
    \   |                      ^^ no implementation for `isize == &isize`\n   |\n\
    \   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n   = note: required because of the requirements on the impl of `PartialEq<Vec<&isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpt_r_bqtz.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpt4dk7v58.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.iter().sum::<isize>() <= w && q\
    \ == q.iter().rev().collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpfzvlip0j.rs:19:39\n\
    \   |\n19 |     q.iter().sum::<isize>() <= w && q == q.iter().rev().collect::<Vec<_>>()\n\
    \   |                                       ^^ no implementation for `isize ==\
    \ &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n   = note: required because of the requirements on the impl\
    \ of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum > w {\n        return false;\n    }\n  \
    \  let mut q_rev = q.clone();\n    q_rev.reverse();\n    if q == q_rev {\n   \
    \     return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmpl8bc2l66.rs:26:21\n\
    \    |\n17  |     let mut q = q;\n    |         ----- move occurs because `q`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n20  |\
    \     for i in q {\n    |              - `q` moved due to this implicit call to\
    \ `.into_iter()`\n...\n26  |     let mut q_rev = q.clone();\n    |           \
    \          ^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `q`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n20  |     for i in &q {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpr61i5e18.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    if q.len() == 0 {\n        return false;\n    }\n    let mut sum = 0;\n\
    \    for i in q.iter() {\n        sum += i;\n    }\n    if sum > w {\n       \
    \ return false;\n    }\n    let mut i = 0;\n    let mut j = q.len() - 1;\n   \
    \ while i < j {\n        if q[i] != q[j] {\n            return false;\n      \
    \  }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().cloned().collect::<Vec<isize>>() {\n \
    \       return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        true\n    } else {\n   \
    \     false\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl3tenfnd.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && q == q.iter().rev().cloned().collect::<Vec<isize>>() {\n \
    \       return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp30z0j_yu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    let is_balanced = q.iter().zip(q.iter().rev()).all(|(a,\
    \ b)| a == b);\n    sum <= w && is_balanced\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprgxf0mxl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    if sum <= w && is_palindrome(&q)\
    \ {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpvh7qck6c.rs:18:20\n   |\n18 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0qizjwuz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum > w {\n        return false;\n    }\n  \
    \  let mut q_rev = q.clone();\n    q_rev.reverse();\n    q == q_rev\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmpx5jz8sxr.rs:26:21\n\
    \    |\n17  |     let mut q = q;\n    |         ----- move occurs because `q`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n20  |\
    \     for i in q {\n    |              - `q` moved due to this implicit call to\
    \ `.into_iter()`\n...\n26  |     let mut q_rev = q.clone();\n    |           \
    \          ^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `q`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n20  |     for i in &q {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut left = 0;\n    let mut right = q.len() - 1;\n    let mut sum\
    \ = 0;\n    while left < right {\n        if q[left] != q[right] {\n         \
    \   return false;\n        }\n        sum += q[left];\n        left += 1;\n  \
    \      right -= 1;\n    }\n    if left == right {\n        sum += q[left];\n \
    \   }\n    sum <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        if q.len() == 1 {\n            return true;\n    \
    \    }\n        let mut i = 0;\n        let mut j = q.len() - 1;\n        while\
    \ i < j {\n            if q[i] != q[j] {\n                return false;\n    \
    \        }\n            i += 1;\n            j -= 1;\n        }\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in 0..q.len()\
    \ {\n        sum += q[i];\n        if sum > w {\n            return false;\n \
    \       }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo28cnzw7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum = q.iter().sum::<isize>();\n    let mut q_rev = q.clone();\n\
    \    q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr4645k_3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp20ws9nzu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = q.len() - 1;\n\
    \    while i < j {\n        if q[i] != q[j] {\n            return false;\n   \
    \     }\n        sum += q[i];\n        i += 1;\n        j -= 1;\n    }\n    if\
    \ i == j {\n        sum += q[i];\n    }\n    sum <= w\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        return true;\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptulnn_p8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        true\n    } else {\n   \
    \     false\n    }\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd0crg78s.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.reverse();\n    let mut sum = 0;\n\
    \    for i in q {\n        sum += i;\n        if sum > w {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi2a1to5i.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum > w {\n        return false;\n    }\n  \
    \  let mut q_rev = q.clone();\n    q_rev.reverse();\n    q == q_rev\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmpxsef8loa.rs:26:21\n\
    \    |\n17  |     let mut q = q;\n    |         ----- move occurs because `q`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n20  |\
    \     for i in q {\n    |              - `q` moved due to this implicit call to\
    \ `.into_iter()`\n...\n26  |     let mut q_rev = q.clone();\n    |           \
    \          ^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `q`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n20  |     for i in &q {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.reverse();\n    let sum: isize =\
    \ q.iter().sum();\n    sum <= w && q == q.iter().rev().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplej89n8i.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmp_0mni5st.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.reverse();\n    let sum = q.iter().sum::<isize>();\n\
    \    sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n}\n\nfn main() {\n \
    \   let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpg040zw42.rs:21:19\n\
    \   |\n21 |     sum <= w && q == q.iter().rev().collect::<Vec<_>>()\n   |    \
    \               ^^ no implementation for `isize == &isize`\n   |\n   = help: the\
    \ trait `PartialEq<&isize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n   = note: required\
    \ because of the requirements on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmprzds0mj7.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w && is_palindrome(&q) {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_palindrome` in this scope\n  -->\
    \ /tmp/tmpgdtc4rrq.rs:21:20\n   |\n21 |     if sum <= w && is_palindrome(&q) {\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    q.reverse();\n    let sum: isize =\
    \ q.iter().sum();\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while\
    \ i < j {\n        if q[i] != q[j] {\n            return false;\n        }\n \
    \       i += 1;\n        j -= 1;\n    }\n    sum <= w\n}\n\nfn main() {\n    let\
    \ candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n\
    \    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0btmufn1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    let mut sum = 0;\n    for i in q.iter() {\n     \
    \   sum += i;\n    }\n    if sum > w {\n        return false;\n    }\n    q.reverse();\n\
    \    q == q\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx09tv9ws.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum > w {\n        return false;\n    }\n  \
    \  let mut q_rev = q.clone();\n    q_rev.reverse();\n    if q == q_rev {\n   \
    \     return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmpvpjwof2q.rs:26:21\n\
    \    |\n17  |     let mut q = q;\n    |         ----- move occurs because `q`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n20  |\
    \     for i in q {\n    |              - `q` moved due to this implicit call to\
    \ `.into_iter()`\n...\n26  |     let mut q_rev = q.clone();\n    |           \
    \          ^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `q`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n20  |     for i in &q {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q = q;\n    q.sort();\n    let mut sum = 0;\n    for i in q {\n\
    \        sum += i;\n    }\n    if sum <= w {\n        let mut q_rev = q.clone();\n\
    \        q_rev.reverse();\n        if q == q_rev {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `q`\n   --> /tmp/tmpkyh640bv.rs:24:25\n\
    \    |\n17  |     let mut q = q;\n    |         ----- move occurs because `q`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n20  |\
    \     for i in q {\n    |              - `q` moved due to this implicit call to\
    \ `.into_iter()`\n...\n24  |         let mut q_rev = q.clone();\n    |       \
    \                  ^^^^^^^^^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `q`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n20  |     for i in &q {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_iter = q.iter();\n    let mut q_rev_iter = q.iter().rev();\n\
    \    let mut sum = 0;\n    loop {\n        match (q_iter.next(), q_rev_iter.next())\
    \ {\n            (Some(x), Some(y)) => {\n                if x != y {\n      \
    \              return false;\n                }\n                sum += x + y;\n\
    \            }\n            (Some(x), None) => {\n                sum += x;\n\
    \            }\n            (None, Some(y)) => {\n                sum += y;\n\
    \            }\n            (None, None) => {\n                break;\n      \
    \      }\n        }\n    }\n    sum <= w\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe1o9v1a_.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        return true;\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl0hphimm.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut q_iter = q.iter();\n    let mut q_iter_rev = q.iter().rev();\n\
    \    let mut sum = 0;\n    loop {\n        match (q_iter.next(), q_iter_rev.next())\
    \ {\n            (Some(x), Some(y)) => {\n                if x != y {\n      \
    \              return false;\n                }\n                sum += x + y;\n\
    \            }\n            (Some(x), None) => {\n                sum += x;\n\
    \            }\n            (None, Some(y)) => {\n                sum += y;\n\
    \            }\n            (None, None) => {\n                break;\n      \
    \      }\n        }\n    }\n    sum <= w\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptwzyofgv.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let sum: isize = q.iter().sum();\n    let mut q_rev = q.clone();\n  \
    \  q_rev.reverse();\n    sum <= w && q == q_rev\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n///\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>>\
    \ will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n\
    /// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    /// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n\
    \    if sum <= w {\n        let mut q_rev = q.clone();\n        q_rev.reverse();\n\
    \        if q == q_rev {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
